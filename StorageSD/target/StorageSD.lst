
c:/Users/pingu/Documents/SIO179/StorageSD/target/StorageSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08083fb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000400  08083fb4  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000ac4  20000468  20000468  00030468  2**2
                  ALLOC
  5 .module_info_suffix 00000028  0808401c  0808401c  0002401c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08084044  08084044  00024044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0016be90  00000000  00000000  00024048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001c22d  00000000  00000000  0018fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001a7a3  00000000  00000000  001ac105  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002270  00000000  00000000  001c68a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039c8  00000000  00000000  001c8b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036841  00000000  00000000  001cc4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00040d8d  00000000  00000000  00202d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a1254  00000000  00000000  00243aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c148  00000000  00000000  002e4d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	dc 3a 08 08                                         .:..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 fd12 	bl	8083a56 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 fd17 	bl	8083a6c <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08083fb4 	.word	0x08083fb4
 808004c:	20000468 	.word	0x20000468
 8080050:	20000468 	.word	0x20000468
 8080054:	20000f2c 	.word	0x20000f2c
 8080058:	20000f2c 	.word	0x20000f2c

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fa25 	bl	80824ac <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08083f38 	.word	0x08083f38
 8080084:	08083fb0 	.word	0x08083fb0

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b86c 	b.w	8080164 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f93b 	bl	8080308 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 b9cb 	b.w	8082430 <_post_loop>

0808009a <_ZdlPv>:
 808009a:	f001 bf4d 	b.w	8081f38 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr

080800ae <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 80800ae:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 80800b0:	4602      	mov	r2, r0
 80800b2:	f003 0308 	and.w	r3, r3, #8
 80800b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80800ba:	b12b      	cbz	r3, 80800c8 <_ZN4File9availableEv+0x1a>
 80800bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80800be:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 80800c0:	1a18      	subs	r0, r3, r0
 80800c2:	bf48      	it	mi
 80800c4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 80800c8:	4770      	bx	lr

080800ca <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 80800ca:	4770      	bx	lr

080800cc <_ZN4FileD0Ev>:
 80800cc:	b510      	push	{r4, lr}
 80800ce:	4604      	mov	r4, r0
 80800d0:	f7ff ffe3 	bl	808009a <_ZdlPv>
 80800d4:	4620      	mov	r0, r4
 80800d6:	bd10      	pop	{r4, pc}

080800d8 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 80800d8:	3010      	adds	r0, #16
 80800da:	f000 bed7 	b.w	8080e8c <_ZN7FatFile4syncEv>

080800de <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 80800de:	3010      	adds	r0, #16
 80800e0:	f000 be03 	b.w	8080cea <_ZN7FatFile4peekEv>

080800e4 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80800e4:	3010      	adds	r0, #16
 80800e6:	f000 bf5d 	b.w	8080fa4 <_ZN7FatFile5writeEPKvj>

080800ea <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 80800ea:	b507      	push	{r0, r1, r2, lr}
 80800ec:	ab02      	add	r3, sp, #8
 80800ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80800f2:	2201      	movs	r2, #1
 80800f4:	4619      	mov	r1, r3
 80800f6:	3010      	adds	r0, #16
 80800f8:	f000 ff54 	bl	8080fa4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80800fc:	b003      	add	sp, #12
 80800fe:	f85d fb04 	ldr.w	pc, [sp], #4

08080102 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080102:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080106:	f001 bc06 	b.w	8081916 <_ZN9SdSpiCard11writeBlocksEmPKhj>

0808010a <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 808010a:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808010e:	f001 bb3a 	b.w	8081786 <_ZN9SdSpiCard10readBlocksEmPhj>

08080112 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 8080112:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080116:	f001 bb79 	b.w	808180c <_ZN9SdSpiCard10writeBlockEmPKh>

0808011a <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 808011a:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808011e:	f001 baea 	b.w	80816f6 <_ZN9SdSpiCard9readBlockEmPh>

08080122 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
 8080122:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080124:	2201      	movs	r2, #1
 8080126:	f10d 0107 	add.w	r1, sp, #7
 808012a:	f000 fd2a 	bl	8080b82 <_ZN7FatFile4readEPvj>
 808012e:	2801      	cmp	r0, #1
 8080130:	bf0c      	ite	eq
 8080132:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080136:	f04f 30ff 	movne.w	r0, #4294967295
  }
 808013a:	b003      	add	sp, #12
 808013c:	f85d fb04 	ldr.w	pc, [sp], #4

08080140 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080140:	b508      	push	{r3, lr}
    return FatFile::read();
 8080142:	3010      	adds	r0, #16
 8080144:	f7ff ffed 	bl	8080122 <_ZN7FatFile4readEv>
  }
 8080148:	bd08      	pop	{r3, pc}

0808014a <_ZN9SdFatBase9errorHaltEPKc>:
  void errorHalt(Print* pr);
  /** %Print msg, any SD error code and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(char const* msg) {
 808014a:	b538      	push	{r3, r4, r5, lr}
 808014c:	460d      	mov	r5, r1
 808014e:	4604      	mov	r4, r0
    errorHalt(&Serial, msg);
 8080150:	f002 fa6c 	bl	808262c <_Z16_fetch_usbserialv>
 8080154:	462a      	mov	r2, r5
 8080156:	4601      	mov	r1, r0
 8080158:	4620      	mov	r0, r4
  }
 808015a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /** %Print msg, any SD error code and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(char const* msg) {
    errorHalt(&Serial, msg);
 808015e:	f001 bce3 	b.w	8081b28 <_ZN9SdFatBase9errorHaltEP5PrintPKc>
	...

08080164 <setup>:
#endif //SPI_CONFIGURATION
//----

File myFile;

void setup() {
 8080164:	b538      	push	{r3, r4, r5, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080166:	2300      	movs	r3, #0
 8080168:	461a      	mov	r2, r3
 808016a:	4619      	mov	r1, r3
 808016c:	4618      	mov	r0, r3
 808016e:	f001 fec3 	bl	8081ef8 <network_off>
  // How about, fileName = User_Appended_File_Name & "_" & DateTime.Now.ToString("yyyyMMdd_HH_mm_ss")
  // this seems good: LOG_2019_etc....
  // TODO: ensure that Time. is related to realtime and is not damaged during clock drift, time reset, etc.

  Cellular.off();
  pinMode(led1, OUTPUT);
 8080172:	4b54      	ldr	r3, [pc, #336]	; (80802c4 <setup+0x160>)
 8080174:	2101      	movs	r1, #1
 8080176:	8818      	ldrh	r0, [r3, #0]
 8080178:	f002 fbda 	bl	8082930 <pinMode>
  delay(5000);
 808017c:	f241 3088 	movw	r0, #5000	; 0x1388
 8080180:	f002 f866 	bl	8082250 <delay>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080184:	4c50      	ldr	r4, [pc, #320]	; (80802c8 <setup+0x164>)
  // Wait for USB Serial
  while(!Serial){
 8080186:	f002 fa51 	bl	808262c <_Z16_fetch_usbserialv>
 808018a:	f002 fa37 	bl	80825fc <_ZN9USBSerialcvbEv>
 808018e:	b928      	cbnz	r0, 808019c <setup+0x38>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080190:	f001 fd8e 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080194:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080196:	f001 feb7 	bl	8081f08 <spark_process>
 808019a:	e7f4      	b.n	8080186 <setup+0x22>
    SysCall::yield();
  }

  Serial.println("Type any character to start");
 808019c:	f002 fa46 	bl	808262c <_Z16_fetch_usbserialv>
 80801a0:	494a      	ldr	r1, [pc, #296]	; (80802cc <setup+0x168>)
 80801a2:	f001 ffc8 	bl	8082136 <_ZN5Print7printlnEPKc>
 80801a6:	4c48      	ldr	r4, [pc, #288]	; (80802c8 <setup+0x164>)
  while(Serial.read() <= 0){
 80801a8:	f002 fa40 	bl	808262c <_Z16_fetch_usbserialv>
 80801ac:	6803      	ldr	r3, [r0, #0]
 80801ae:	695b      	ldr	r3, [r3, #20]
 80801b0:	4798      	blx	r3
 80801b2:	2800      	cmp	r0, #0
 80801b4:	dc05      	bgt.n	80801c2 <setup+0x5e>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801b6:	f001 fd7b 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801ba:	6020      	str	r0, [r4, #0]
 80801bc:	f001 fea4 	bl	8081f08 <spark_process>
 80801c0:	e7f2      	b.n	80801a8 <setup+0x44>
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
    return m_sdCard.begin(spi, csPin, divisor) &&
 80801c2:	4943      	ldr	r1, [pc, #268]	; (80802d0 <setup+0x16c>)
 80801c4:	2304      	movs	r3, #4
 80801c6:	220c      	movs	r2, #12
 80801c8:	f1a1 000c 	sub.w	r0, r1, #12
 80801cc:	f001 f9ff 	bl	80815ce <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 80801d0:	2800      	cmp	r0, #0
 80801d2:	d06f      	beq.n	80802b4 <setup+0x150>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 80801d4:	483f      	ldr	r0, [pc, #252]	; (80802d4 <setup+0x170>)
 80801d6:	f000 fe8f 	bl	8080ef8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80801da:	2101      	movs	r1, #1
 80801dc:	483e      	ldr	r0, [pc, #248]	; (80802d8 <setup+0x174>)
 80801de:	f001 f8c9 	bl	8081374 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80801e2:	4601      	mov	r1, r0
 80801e4:	b148      	cbz	r0, 80801fa <setup+0x96>
 80801e6:	4c3c      	ldr	r4, [pc, #240]	; (80802d8 <setup+0x174>)
 80801e8:	f504 6588 	add.w	r5, r4, #1088	; 0x440
 80801ec:	4621      	mov	r1, r4
 80801ee:	4628      	mov	r0, r5
 80801f0:	f000 fcaf 	bl	8080b52 <_ZN7FatFile8openRootEP9FatVolume>
 80801f4:	2800      	cmp	r0, #0
 80801f6:	d05d      	beq.n	80802b4 <setup+0x150>
 80801f8:	e005      	b.n	8080206 <setup+0xa2>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80801fa:	4837      	ldr	r0, [pc, #220]	; (80802d8 <setup+0x174>)
 80801fc:	f001 f8ba 	bl	8081374 <_ZN9FatVolume4initEh>
 8080200:	2800      	cmp	r0, #0
 8080202:	d1f0      	bne.n	80801e6 <setup+0x82>
 8080204:	e056      	b.n	80802b4 <setup+0x150>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080206:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 808020a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808020e:	d051      	beq.n	80802b4 <setup+0x150>
      return false;
    }
    m_cwd = dir;
 8080210:	4b32      	ldr	r3, [pc, #200]	; (80802dc <setup+0x178>)
 8080212:	601d      	str	r5, [r3, #0]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8080214:	4c31      	ldr	r4, [pc, #196]	; (80802dc <setup+0x178>)
 8080216:	2363      	movs	r3, #99	; 0x63
 8080218:	4a31      	ldr	r2, [pc, #196]	; (80802e0 <setup+0x17c>)
 808021a:	6821      	ldr	r1, [r4, #0]
 808021c:	4831      	ldr	r0, [pc, #196]	; (80802e4 <setup+0x180>)
 808021e:	f000 fe72 	bl	8080f06 <_ZN7FatFile4openEPS_PKch>
 8080222:	4625      	mov	r5, r4
  }

  //String fileName = String( "LOG_" + Time.year() + Time.month() + Time.day() + Time.hour() + Time.minute() + Time.second() );
  //Serial.println(fileName);
  // Open the file for write at end like the "Native SD library"
  if(!myFile.open("e1.txt", O_RDWR | O_CREAT | O_AT_END)){
 8080224:	b918      	cbnz	r0, 808022e <setup+0xca>
    sd.errorHalt("opening e1.txt for write failed (1)");
 8080226:	4930      	ldr	r1, [pc, #192]	; (80802e8 <setup+0x184>)
 8080228:	482b      	ldr	r0, [pc, #172]	; (80802d8 <setup+0x174>)
 808022a:	f7ff ff8e 	bl	808014a <_ZN9SdFatBase9errorHaltEPKc>
  }
  // If the file opened okay, write to it:
  Serial.print("Writing to e1.txt...");
  myFile.println("testing 1, 2, 3.");
 808022e:	4c2f      	ldr	r4, [pc, #188]	; (80802ec <setup+0x188>)
  // Open the file for write at end like the "Native SD library"
  if(!myFile.open("e1.txt", O_RDWR | O_CREAT | O_AT_END)){
    sd.errorHalt("opening e1.txt for write failed (1)");
  }
  // If the file opened okay, write to it:
  Serial.print("Writing to e1.txt...");
 8080230:	f002 f9fc 	bl	808262c <_Z16_fetch_usbserialv>
 8080234:	492e      	ldr	r1, [pc, #184]	; (80802f0 <setup+0x18c>)
 8080236:	f001 ff6b 	bl	8082110 <_ZN5Print5printEPKc>
  myFile.println("testing 1, 2, 3.");
 808023a:	492e      	ldr	r1, [pc, #184]	; (80802f4 <setup+0x190>)
 808023c:	4620      	mov	r0, r4
 808023e:	f001 ff7a 	bl	8082136 <_ZN5Print7printlnEPKc>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8080244:	4a2c      	ldr	r2, [pc, #176]	; (80802f8 <setup+0x194>)
 8080246:	2100      	movs	r1, #0
 8080248:	4620      	mov	r0, r4
 808024a:	f001 ffb4 	bl	80821b6 <_ZN5Print11printf_implEbPKcz>
  myFile.printf("fileSize: %d\n", myFile.fileSize());

  // Close the file:
  myFile.close();
 808024e:	f104 0010 	add.w	r0, r4, #16
 8080252:	f000 fe51 	bl	8080ef8 <_ZN7FatFile5closeEv>
  Serial.println("done.");
 8080256:	f002 f9e9 	bl	808262c <_Z16_fetch_usbserialv>
 808025a:	4928      	ldr	r1, [pc, #160]	; (80802fc <setup+0x198>)
 808025c:	f001 ff6b 	bl	8082136 <_ZN5Print7printlnEPKc>
 8080260:	2301      	movs	r3, #1
 8080262:	4a1f      	ldr	r2, [pc, #124]	; (80802e0 <setup+0x17c>)
 8080264:	6829      	ldr	r1, [r5, #0]
 8080266:	f104 0010 	add.w	r0, r4, #16
 808026a:	f000 fe4c 	bl	8080f06 <_ZN7FatFile4openEPS_PKch>

  // Re-open the file for reading: 
  if(!myFile.open("e1.txt", O_READ)){
 808026e:	b918      	cbnz	r0, 8080278 <setup+0x114>
    sd.errorHalt("opening e1.txt for read failed (2)");
 8080270:	4923      	ldr	r1, [pc, #140]	; (8080300 <setup+0x19c>)
 8080272:	4819      	ldr	r0, [pc, #100]	; (80802d8 <setup+0x174>)
 8080274:	f7ff ff69 	bl	808014a <_ZN9SdFatBase9errorHaltEPKc>
  }
  Serial.println("e1.txt content:");
 8080278:	f002 f9d8 	bl	808262c <_Z16_fetch_usbserialv>
 808027c:	4921      	ldr	r1, [pc, #132]	; (8080304 <setup+0x1a0>)
 808027e:	f001 ff5a 	bl	8082136 <_ZN5Print7printlnEPKc>
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return FatFile::read();
 8080282:	4818      	ldr	r0, [pc, #96]	; (80802e4 <setup+0x180>)
 8080284:	f7ff ff4d 	bl	8080122 <_ZN7FatFile4readEv>

  // Read from the file until there's nothing else in it
  // Show data from file over serial. NOTE THAT IT CAN TAKE A FAIRLY LONG TIME 
  // TO WRITE AND PUSH TO SERIAL THIS DATA (i.e. 1-3 min) - PM 3/5/19 10:29am
  int data;
  while((data = myFile.read()) >= 0){
 8080288:	1e04      	subs	r4, r0, #0
 808028a:	db06      	blt.n	808029a <setup+0x136>
    Serial.write(data);
 808028c:	f002 f9ce 	bl	808262c <_Z16_fetch_usbserialv>
 8080290:	6803      	ldr	r3, [r0, #0]
 8080292:	b2e1      	uxtb	r1, r4
 8080294:	689b      	ldr	r3, [r3, #8]
 8080296:	4798      	blx	r3

  // Read from the file until there's nothing else in it
  // Show data from file over serial. NOTE THAT IT CAN TAKE A FAIRLY LONG TIME 
  // TO WRITE AND PUSH TO SERIAL THIS DATA (i.e. 1-3 min) - PM 3/5/19 10:29am
  int data;
  while((data = myFile.read()) >= 0){
 8080298:	e7f3      	b.n	8080282 <setup+0x11e>
    Serial.write(data);
  }

  // Close the file
  myFile.close();
 808029a:	4812      	ldr	r0, [pc, #72]	; (80802e4 <setup+0x180>)
 808029c:	f000 fe2c 	bl	8080ef8 <_ZN7FatFile5closeEv>

  // Shut off serial port in hopes that it will prevent
  // breaking stuff.
  delay(5000); // Give Serial.write(---) enough time to print out everything
 80802a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80802a4:	f001 ffd4 	bl	8082250 <delay>

  // ^ delay(5000) is, in other words, for enough time after flashing 
  // to connect over serial via tera term, etc. - PM 3/5/19 10:31am
  
  Serial.end();
 80802a8:	f002 f9c0 	bl	808262c <_Z16_fetch_usbserialv>
}
 80802ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(5000); // Give Serial.write(---) enough time to print out everything

  // ^ delay(5000) is, in other words, for enough time after flashing 
  // to connect over serial via tera term, etc. - PM 3/5/19 10:31am
  
  Serial.end();
 80802b0:	f002 b99e 	b.w	80825f0 <_ZN9USBSerial3endEv>
  bool fsBegin() {
    return FatFileSystem::begin();
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
 80802b4:	f002 f9ba 	bl	808262c <_Z16_fetch_usbserialv>
 80802b8:	4601      	mov	r1, r0
 80802ba:	4807      	ldr	r0, [pc, #28]	; (80802d8 <setup+0x174>)
 80802bc:	f001 fc6e 	bl	8081b9c <_ZN9SdFatBase13initErrorHaltEP5Print>
 80802c0:	e7a8      	b.n	8080214 <setup+0xb0>
 80802c2:	bf00      	nop
 80802c4:	2000046c 	.word	0x2000046c
 80802c8:	20000e50 	.word	0x20000e50
 80802cc:	08083b30 	.word	0x08083b30
 80802d0:	20000924 	.word	0x20000924
 80802d4:	200008f4 	.word	0x200008f4
 80802d8:	200004b4 	.word	0x200004b4
 80802dc:	20000934 	.word	0x20000934
 80802e0:	08083b4c 	.word	0x08083b4c
 80802e4:	20000488 	.word	0x20000488
 80802e8:	08083b53 	.word	0x08083b53
 80802ec:	20000478 	.word	0x20000478
 80802f0:	08083b77 	.word	0x08083b77
 80802f4:	08083b8c 	.word	0x08083b8c
 80802f8:	08083b9d 	.word	0x08083b9d
 80802fc:	08083bab 	.word	0x08083bab
 8080300:	08083bb1 	.word	0x08083bb1
 8080304:	08083bd4 	.word	0x08083bd4

08080308 <loop>:
}

void loop() {
 8080308:	b570      	push	{r4, r5, r6, lr}
  // Create vars for battery params and buffer for SD card
  float cellVoltage = batteryMonitor.getVCell(); 
 808030a:	481e      	ldr	r0, [pc, #120]	; (8080384 <loop+0x7c>)
  // to connect over serial via tera term, etc. - PM 3/5/19 10:31am
  
  Serial.end();
}

void loop() {
 808030c:	b09e      	sub	sp, #120	; 0x78
  // Create vars for battery params and buffer for SD card
  float cellVoltage = batteryMonitor.getVCell(); 
 808030e:	f002 f817 	bl	8082340 <_ZN9FuelGauge8getVCellEv>
 8080312:	4605      	mov	r5, r0
  float stateOfCharge = batteryMonitor.getSoC();
 8080314:	481b      	ldr	r0, [pc, #108]	; (8080384 <loop+0x7c>)
 8080316:	f002 f829 	bl	808236c <_ZN9FuelGauge6getSoCEv>
 808031a:	491b      	ldr	r1, [pc, #108]	; (8080388 <loop+0x80>)
 808031c:	4606      	mov	r6, r0
 808031e:	2363      	movs	r3, #99	; 0x63
 8080320:	4a1a      	ldr	r2, [pc, #104]	; (808038c <loop+0x84>)
 8080322:	6809      	ldr	r1, [r1, #0]
 8080324:	481a      	ldr	r0, [pc, #104]	; (8080390 <loop+0x88>)
 8080326:	f000 fdee 	bl	8080f06 <_ZN7FatFile4openEPS_PKch>
  we will push the parameters of the instrument & particle that are
  relevant to us - PM 3/5/19 10:34am 
  */ 

 // Open the file for write at end like the "Native SD Library"
 if(!myFile.open("e1.txt", O_RDWR | O_CREAT | O_AT_END)){
 808032a:	b918      	cbnz	r0, 8080334 <loop+0x2c>
   sd.errorHalt("opening e1.txt for write failed (3)");
 808032c:	4919      	ldr	r1, [pc, #100]	; (8080394 <loop+0x8c>)
 808032e:	481a      	ldr	r0, [pc, #104]	; (8080398 <loop+0x90>)
 8080330:	f7ff ff0b 	bl	808014a <_ZN9SdFatBase9errorHaltEPKc>
 }

 // Write into buffer the increment and battery params
 snprintf(buf, sizeof(buf), "%d, %.02f. %.02f", count, cellVoltage, stateOfCharge);
 8080334:	4630      	mov	r0, r6
 8080336:	f002 fe5d 	bl	8082ff4 <__aeabi_f2d>
 808033a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808033e:	4628      	mov	r0, r5
 8080340:	f002 fe58 	bl	8082ff4 <__aeabi_f2d>
 8080344:	4c15      	ldr	r4, [pc, #84]	; (808039c <loop+0x94>)
 8080346:	4a16      	ldr	r2, [pc, #88]	; (80803a0 <loop+0x98>)
 8080348:	6823      	ldr	r3, [r4, #0]
 808034a:	e9cd 0100 	strd	r0, r1, [sp]
 808034e:	2164      	movs	r1, #100	; 0x64
 8080350:	a805      	add	r0, sp, #20
 8080352:	f001 fdf9 	bl	8081f48 <snprintf>
 myFile.println(buf);
 8080356:	a905      	add	r1, sp, #20
 8080358:	4812      	ldr	r0, [pc, #72]	; (80803a4 <loop+0x9c>)
 808035a:	f001 feec 	bl	8082136 <_ZN5Print7printlnEPKc>

 myFile.close();
 808035e:	480c      	ldr	r0, [pc, #48]	; (8080390 <loop+0x88>)
 8080360:	f000 fdca 	bl	8080ef8 <_ZN7FatFile5closeEv>

 // Toggle LED, increment counter, delay 100ms
  digitalWrite(led1, !led_state);
 8080364:	4b10      	ldr	r3, [pc, #64]	; (80803a8 <loop+0xa0>)
 8080366:	7819      	ldrb	r1, [r3, #0]
 8080368:	4b10      	ldr	r3, [pc, #64]	; (80803ac <loop+0xa4>)
 808036a:	f081 0101 	eor.w	r1, r1, #1
 808036e:	8818      	ldrh	r0, [r3, #0]
 8080370:	f002 faef 	bl	8082952 <digitalWrite>
  count++;
 8080374:	6823      	ldr	r3, [r4, #0]
  delay(100);
 8080376:	2064      	movs	r0, #100	; 0x64

 myFile.close();

 // Toggle LED, increment counter, delay 100ms
  digitalWrite(led1, !led_state);
  count++;
 8080378:	3301      	adds	r3, #1
 808037a:	6023      	str	r3, [r4, #0]
  delay(100);
 808037c:	f001 ff68 	bl	8082250 <delay>
 8080380:	b01e      	add	sp, #120	; 0x78
 8080382:	bd70      	pop	{r4, r5, r6, pc}
 8080384:	2000092c 	.word	0x2000092c
 8080388:	20000934 	.word	0x20000934
 808038c:	08083b4c 	.word	0x08083b4c
 8080390:	20000488 	.word	0x20000488
 8080394:	08083be4 	.word	0x08083be4
 8080398:	200004b4 	.word	0x200004b4
 808039c:	20000470 	.word	0x20000470
 80803a0:	08083c08 	.word	0x08083c08
 80803a4:	20000478 	.word	0x20000478
 80803a8:	20000474 	.word	0x20000474
 80803ac:	2000046c 	.word	0x2000046c

080803b0 <_GLOBAL__sub_I_SystemMode>:
 80803b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80803b2:	f001 fbfd 	bl	8081bb0 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80803b6:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80803ba:	4c23      	ldr	r4, [pc, #140]	; (8080448 <_GLOBAL__sub_I_SystemMode+0x98>)
 80803bc:	2500      	movs	r5, #0
 80803be:	8063      	strh	r3, [r4, #2]
 80803c0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80803c4:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80803c6:	80a3      	strh	r3, [r4, #4]
 80803c8:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80803ca:	f001 fd69 	bl	8081ea0 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80803ce:	a802      	add	r0, sp, #8
 80803d0:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80803d4:	462a      	mov	r2, r5
 80803d6:	4629      	mov	r1, r5
 80803d8:	f001 fc72 	bl	8081cc0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80803dc:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80803de:	2b1e      	cmp	r3, #30
 80803e0:	d104      	bne.n	80803ec <_GLOBAL__sub_I_SystemMode+0x3c>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80803e2:	2303      	movs	r3, #3
 80803e4:	7023      	strb	r3, [r4, #0]
 80803e6:	2311      	movs	r3, #17
 80803e8:	8065      	strh	r5, [r4, #2]
 80803ea:	80a3      	strh	r3, [r4, #4]

#include "SdFat.h"

// Prep for turning off cellular (for testing), getting battery details, and incrementing/toggling
SYSTEM_MODE(MANUAL);
FuelGauge batteryMonitor;
 80803ec:	2100      	movs	r1, #0
 80803ee:	4817      	ldr	r0, [pc, #92]	; (808044c <_GLOBAL__sub_I_SystemMode+0x9c>)
 80803f0:	f001 ff66 	bl	80822c0 <_ZN9FuelGaugeC1Eb>
 80803f4:	4a16      	ldr	r2, [pc, #88]	; (8080450 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80803f6:	4917      	ldr	r1, [pc, #92]	; (8080454 <_GLOBAL__sub_I_SystemMode+0xa4>)
 80803f8:	4814      	ldr	r0, [pc, #80]	; (808044c <_GLOBAL__sub_I_SystemMode+0x9c>)
 80803fa:	f002 fb49 	bl	8082a90 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80803fe:	4a16      	ldr	r2, [pc, #88]	; (8080458 <_GLOBAL__sub_I_SystemMode+0xa8>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8080400:	2119      	movs	r1, #25
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080402:	4816      	ldr	r0, [pc, #88]	; (808045c <_GLOBAL__sub_I_SystemMode+0xac>)
 8080404:	f882 146a 	strb.w	r1, [r2, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8080408:	4915      	ldr	r1, [pc, #84]	; (8080460 <_GLOBAL__sub_I_SystemMode+0xb0>)
 808040a:	2300      	movs	r3, #0
 808040c:	71d3      	strb	r3, [r2, #7]
 808040e:	f882 3440 	strb.w	r3, [r2, #1088]	; 0x440
 8080412:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
 8080416:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
 808041a:	f882 346d 	strb.w	r3, [r2, #1133]	; 0x46d
 808041e:	6011      	str	r1, [r2, #0]
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8080420:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8080424:	490f      	ldr	r1, [pc, #60]	; (8080464 <_GLOBAL__sub_I_SystemMode+0xb4>)
 8080426:	7403      	strb	r3, [r0, #16]
 8080428:	7443      	strb	r3, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808042a:	6043      	str	r3, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808042c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080430:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8080432:	4b0d      	ldr	r3, [pc, #52]	; (8080468 <_GLOBAL__sub_I_SystemMode+0xb8>)
 8080434:	f8c2 1470 	str.w	r1, [r2, #1136]	; 0x470
SdFat sd;
const uint8_t chipSelect = SS;
#endif //SPI_CONFIGURATION
//----

File myFile;
 8080438:	4a05      	ldr	r2, [pc, #20]	; (8080450 <_GLOBAL__sub_I_SystemMode+0xa0>)
 808043a:	490c      	ldr	r1, [pc, #48]	; (808046c <_GLOBAL__sub_I_SystemMode+0xbc>)
 808043c:	6003      	str	r3, [r0, #0]
 808043e:	f002 fb27 	bl	8082a90 <__aeabi_atexit>

 // Toggle LED, increment counter, delay 100ms
  digitalWrite(led1, !led_state);
  count++;
  delay(100);
 8080442:	b003      	add	sp, #12
 8080444:	bd30      	pop	{r4, r5, pc}
 8080446:	bf00      	nop
 8080448:	200004ac 	.word	0x200004ac
 808044c:	2000092c 	.word	0x2000092c
 8080450:	20000468 	.word	0x20000468
 8080454:	080822df 	.word	0x080822df
 8080458:	200004b4 	.word	0x200004b4
 808045c:	20000478 	.word	0x20000478
 8080460:	08083b20 	.word	0x08083b20
 8080464:	08083c30 	.word	0x08083c30
 8080468:	08083af8 	.word	0x08083af8
 808046c:	080800cb 	.word	0x080800cb

08080470 <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
 8080470:	f001 bb9e 	b.w	8081bb0 <HAL_Pin_Map>

08080474 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8080474:	f001 bb9c 	b.w	8081bb0 <HAL_Pin_Map>

08080478 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8080478:	f001 bb9a 	b.w	8081bb0 <HAL_Pin_Map>

0808047c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808047c:	b510      	push	{r4, lr}
 808047e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8080480:	3028      	adds	r0, #40	; 0x28
 8080482:	f000 fe71 	bl	8081168 <_ZN8FatCache4syncEv>
 8080486:	b128      	cbz	r0, 8080494 <_ZN9FatVolume9cacheSyncEv+0x18>
 8080488:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 808048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8080490:	f000 be6a 	b.w	8081168 <_ZN8FatCache4syncEv>
  }
 8080494:	bd10      	pop	{r4, pc}

08080496 <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8080496:	1e41      	subs	r1, r0, #1
 8080498:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 808049c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808049e:	0843      	lsrs	r3, r0, #1
 80804a0:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80804a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80804a8:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80804aa:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80804ac:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80804b0:	d1f5      	bne.n	808049e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80804b2:	4770      	bx	lr

080804b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80804b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80804b8:	7803      	ldrb	r3, [r0, #0]
 80804ba:	1c44      	adds	r4, r0, #1
 80804bc:	2b20      	cmp	r3, #32
 80804be:	d101      	bne.n	80804c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80804c0:	4620      	mov	r0, r4
 80804c2:	e7f9      	b.n	80804b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80804c4:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80804c6:	4f70      	ldr	r7, [pc, #448]	; (8080688 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80804c8:	6088      	str	r0, [r1, #8]
 80804ca:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80804cc:	462e      	mov	r6, r5
 80804ce:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80804d2:	b30b      	cbz	r3, 8080518 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80804d4:	2b2f      	cmp	r3, #47	; 0x2f
 80804d6:	d101      	bne.n	80804dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80804d8:	1903      	adds	r3, r0, r4
 80804da:	e017      	b.n	808050c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80804dc:	2b5c      	cmp	r3, #92	; 0x5c
 80804de:	d102      	bne.n	80804e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80804e0:	2000      	movs	r0, #0
 80804e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80804e6:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80804ea:	b2e4      	uxtb	r4, r4
 80804ec:	2c1d      	cmp	r4, #29
 80804ee:	d803      	bhi.n	80804f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80804f0:	fa27 f404 	lsr.w	r4, r7, r4
 80804f4:	07e4      	lsls	r4, r4, #31
 80804f6:	d4f3      	bmi.n	80804e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80804f8:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80804fc:	2c3c      	cmp	r4, #60	; 0x3c
 80804fe:	d0ef      	beq.n	80804e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8080500:	3b20      	subs	r3, #32
 8080502:	2b5e      	cmp	r3, #94	; 0x5e
 8080504:	d9e1      	bls.n	80804ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8080506:	e7eb      	b.n	80804e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8080508:	2d2f      	cmp	r5, #47	; 0x2f
 808050a:	d105      	bne.n	8080518 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 808050c:	461e      	mov	r6, r3
 808050e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8080512:	2d20      	cmp	r5, #32
 8080514:	d1f8      	bne.n	8080508 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8080516:	e7f9      	b.n	808050c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8080518:	6016      	str	r6, [r2, #0]
 808051a:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 808051c:	4298      	cmp	r0, r3
 808051e:	ebc0 0803 	rsb	r8, r0, r3
 8080522:	d009      	beq.n	8080538 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8080524:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8080528:	2a2e      	cmp	r2, #46	; 0x2e
 808052a:	d0f7      	beq.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 808052c:	2a20      	cmp	r2, #32
 808052e:	d0f5      	beq.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8080530:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8080534:	dcd4      	bgt.n	80804e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8080536:	e001      	b.n	808053c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8080538:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 808053c:	f8c1 8004 	str.w	r8, [r1, #4]
 8080540:	f101 030c 	add.w	r3, r1, #12
 8080544:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8080548:	2420      	movs	r4, #32
 808054a:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 808054e:	4293      	cmp	r3, r2
 8080550:	d1fb      	bne.n	808054a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8080552:	4603      	mov	r3, r0
 8080554:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8080556:	f813 4b01 	ldrb.w	r4, [r3], #1
 808055a:	2c2e      	cmp	r4, #46	; 0x2e
 808055c:	d0fa      	beq.n	8080554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808055e:	2c20      	cmp	r4, #32
 8080560:	d0f8      	beq.n	8080554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8080562:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8080566:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808056a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808056c:	1c73      	adds	r3, r6, #1
 808056e:	d107      	bne.n	8080580 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8080570:	2700      	movs	r7, #0
 8080572:	f04f 0e07 	mov.w	lr, #7
 8080576:	463d      	mov	r5, r7
 8080578:	46ba      	mov	sl, r7
 808057a:	f04f 0908 	mov.w	r9, #8
 808057e:	e009      	b.n	8080594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8080580:	5d83      	ldrb	r3, [r0, r6]
 8080582:	2b2e      	cmp	r3, #46	; 0x2e
 8080584:	d0f4      	beq.n	8080570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8080586:	3e01      	subs	r6, #1
 8080588:	e7f0      	b.n	808056c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808058a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 808058c:	2b20      	cmp	r3, #32
 808058e:	d104      	bne.n	808059a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8080590:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8080592:	3201      	adds	r2, #1
 8080594:	4542      	cmp	r2, r8
 8080596:	dbf8      	blt.n	808058a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8080598:	e04b      	b.n	8080632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808059a:	2b2e      	cmp	r3, #46	; 0x2e
 808059c:	d102      	bne.n	80805a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 808059e:	42b2      	cmp	r2, r6
 80805a0:	d1f6      	bne.n	8080590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80805a2:	e003      	b.n	80805ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80805a4:	2b22      	cmp	r3, #34	; 0x22
 80805a6:	d017      	beq.n	80805d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80805a8:	2b7c      	cmp	r3, #124	; 0x7c
 80805aa:	d015      	beq.n	80805d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80805ac:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80805b0:	f1bc 0f05 	cmp.w	ip, #5
 80805b4:	d801      	bhi.n	80805ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80805b6:	2b2d      	cmp	r3, #45	; 0x2d
 80805b8:	d10e      	bne.n	80805d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80805ba:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80805be:	f1bc 0f05 	cmp.w	ip, #5
 80805c2:	d909      	bls.n	80805d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80805c4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80805c8:	f1bc 0f02 	cmp.w	ip, #2
 80805cc:	d904      	bls.n	80805d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80805ce:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80805d2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80805d6:	d902      	bls.n	80805de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80805d8:	42b2      	cmp	r2, r6
 80805da:	d10e      	bne.n	80805fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80805dc:	e049      	b.n	8080672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80805de:	42b2      	cmp	r2, r6
 80805e0:	d047      	beq.n	8080672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80805e2:	4575      	cmp	r5, lr
 80805e4:	d821      	bhi.n	808062a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80805e6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80805ea:	f1bc 0f19 	cmp.w	ip, #25
 80805ee:	d808      	bhi.n	8080602 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80805f0:	3b20      	subs	r3, #32
 80805f2:	b2db      	uxtb	r3, r3
        lc |= bit;
 80805f4:	ea49 0707 	orr.w	r7, r9, r7
 80805f8:	e00a      	b.n	8080610 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80805fa:	4575      	cmp	r5, lr
 80805fc:	d815      	bhi.n	808062a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80805fe:	2400      	movs	r4, #0
      c = '_';
 8080600:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8080602:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8080606:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 808060a:	bf98      	it	ls
 808060c:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8080610:	f105 0c01 	add.w	ip, r5, #1
 8080614:	fa5f fc8c 	uxtb.w	ip, ip
 8080618:	440d      	add	r5, r1
      if (i < 7) {
 808061a:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 808061e:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8080620:	d801      	bhi.n	8080626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8080622:	f881 c00c 	strb.w	ip, [r1, #12]
 8080626:	4665      	mov	r5, ip
 8080628:	e7b3      	b.n	8080592 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808062a:	f1be 0f0a 	cmp.w	lr, #10
 808062e:	d117      	bne.n	8080660 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8080630:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8080632:	7b4b      	ldrb	r3, [r1, #13]
 8080634:	2b20      	cmp	r3, #32
 8080636:	f43f af53 	beq.w	80804e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808063a:	b13c      	cbz	r4, 808064c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 808063c:	ea1a 0f07 	tst.w	sl, r7
 8080640:	bf18      	it	ne
 8080642:	2702      	movne	r7, #2
 8080644:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8080646:	2001      	movs	r0, #1
 8080648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 808064c:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808064e:	2001      	movs	r0, #1
 8080650:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8080652:	4419      	add	r1, r3
 8080654:	237e      	movs	r3, #126	; 0x7e
 8080656:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8080658:	2331      	movs	r3, #49	; 0x31
 808065a:	738b      	strb	r3, [r1, #14]
 808065c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8080660:	42b2      	cmp	r2, r6
 8080662:	dce5      	bgt.n	8080630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080664:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8080666:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808066a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 808066c:	f04f 0910 	mov.w	r9, #16
 8080670:	e78e      	b.n	8080590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080672:	f1be 0f0a 	cmp.w	lr, #10
 8080676:	d0db      	beq.n	8080630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8080678:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808067a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808067e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8080680:	f04f 0910 	mov.w	r9, #16
 8080684:	e785      	b.n	8080592 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8080686:	bf00      	nop
 8080688:	31000101 	.word	0x31000101

0808068c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 808068c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080690:	4606      	mov	r6, r0
 8080692:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8080694:	f891 900c 	ldrb.w	r9, [r1, #12]
 8080698:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808069a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808069c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80806a0:	6869      	ldr	r1, [r5, #4]
 80806a2:	68aa      	ldr	r2, [r5, #8]
 80806a4:	1863      	adds	r3, r4, r1
 80806a6:	b29b      	uxth	r3, r3
 80806a8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80806aa:	4291      	cmp	r1, r2
 80806ac:	d006      	beq.n	80806bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80806ae:	f812 0b01 	ldrb.w	r0, [r2], #1
 80806b2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80806b6:	4043      	eors	r3, r0
 80806b8:	b29b      	uxth	r3, r3
 80806ba:	e7f6      	b.n	80806aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80806bc:	f1b9 0f03 	cmp.w	r9, #3
 80806c0:	bf28      	it	cs
 80806c2:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80806c6:	f109 0204 	add.w	r2, r9, #4
 80806ca:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80806cc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80806d0:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80806d2:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80806d4:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80806d6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80806d8:	bf94      	ite	ls
 80806da:	3130      	addls	r1, #48	; 0x30
 80806dc:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80806de:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80806e0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80806e2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80806e6:	d3f1      	bcc.n	80806cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80806e8:	eb05 0309 	add.w	r3, r5, r9
 80806ec:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80806ee:	2100      	movs	r1, #0
 80806f0:	4630      	mov	r0, r6
 80806f2:	f000 fb2a 	bl	8080d4a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80806f6:	2101      	movs	r1, #1
 80806f8:	4630      	mov	r0, r6
 80806fa:	f000 fb09 	bl	8080d10 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80806fe:	4601      	mov	r1, r0
 8080700:	b928      	cbnz	r0, 808070e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8080702:	7870      	ldrb	r0, [r6, #1]
 8080704:	fab0 f080 	clz	r0, r0
 8080708:	0940      	lsrs	r0, r0, #5
 808070a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808070e:	7803      	ldrb	r3, [r0, #0]
 8080710:	b14b      	cbz	r3, 8080726 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8080712:	7ac3      	ldrb	r3, [r0, #11]
 8080714:	071b      	lsls	r3, r3, #28
 8080716:	d4ee      	bmi.n	80806f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080718:	220b      	movs	r2, #11
 808071a:	4640      	mov	r0, r8
 808071c:	f003 f98c 	bl	8083a38 <memcmp>
 8080720:	2800      	cmp	r0, #0
 8080722:	d1e8      	bne.n	80806f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080724:	e002      	b.n	808072c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8080726:	2001      	movs	r0, #1
 8080728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808072c:	3401      	adds	r4, #1
 808072e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8080730:	2c64      	cmp	r4, #100	; 0x64
 8080732:	d1b5      	bne.n	80806a0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8080734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080738 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808073c:	b089      	sub	sp, #36	; 0x24
 808073e:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080740:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080742:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080744:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080748:	460e      	mov	r6, r1
 808074a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808074c:	d101      	bne.n	8080752 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 808074e:	2000      	movs	r0, #0
 8080750:	e199      	b.n	8080a86 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080752:	9b05      	ldr	r3, [sp, #20]
 8080754:	781b      	ldrb	r3, [r3, #0]
 8080756:	2b00      	cmp	r3, #0
 8080758:	d1f9      	bne.n	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808075a:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 808075c:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080760:	079b      	lsls	r3, r3, #30
 8080762:	f000 8186 	beq.w	8080a72 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 8080766:	f10b 030c 	add.w	r3, fp, #12
 808076a:	270d      	movs	r7, #13
 808076c:	fbb3 f7f7 	udiv	r7, r3, r7
 8080770:	3701      	adds	r7, #1
 8080772:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8080774:	f04f 0800 	mov.w	r8, #0
 8080778:	2100      	movs	r1, #0
 808077a:	4630      	mov	r0, r6
 808077c:	f000 fae5 	bl	8080d4a <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8080780:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8080782:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8080784:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080786:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808078a:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 808078e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8080792:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8080794:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8080796:	2101      	movs	r1, #1
 8080798:	4630      	mov	r0, r6
 808079a:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808079c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80807a0:	f000 fab6 	bl	8080d10 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80807a4:	9b07      	ldr	r3, [sp, #28]
 80807a6:	b920      	cbnz	r0, 80807b2 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 80807a8:	7873      	ldrb	r3, [r6, #1]
 80807aa:	2b00      	cmp	r3, #0
 80807ac:	f000 808e 	beq.w	80808cc <_ZN7FatFile4openEPS_P7fname_th+0x194>
 80807b0:	e7cd      	b.n	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80807b2:	7802      	ldrb	r2, [r0, #0]
 80807b4:	2ae5      	cmp	r2, #229	; 0xe5
 80807b6:	d000      	beq.n	80807ba <_ZN7FatFile4openEPS_P7fname_th+0x82>
 80807b8:	b942      	cbnz	r2, 80807cc <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80807ba:	2d00      	cmp	r5, #0
 80807bc:	bf08      	it	eq
 80807be:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80807c0:	42bd      	cmp	r5, r7
        freeFound++;
 80807c2:	bf3c      	itt	cc
 80807c4:	3501      	addcc	r5, #1
 80807c6:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80807c8:	b922      	cbnz	r2, 80807d4 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 80807ca:	e07f      	b.n	80808cc <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80807cc:	42bd      	cmp	r5, r7
 80807ce:	bf38      	it	cc
 80807d0:	2500      	movcc	r5, #0
 80807d2:	e003      	b.n	80807dc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80807d4:	2ae5      	cmp	r2, #229	; 0xe5
 80807d6:	d101      	bne.n	80807dc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80807d8:	2400      	movs	r4, #0
 80807da:	e7db      	b.n	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80807dc:	2a2e      	cmp	r2, #46	; 0x2e
 80807de:	d0fb      	beq.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80807e0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80807e2:	290f      	cmp	r1, #15
 80807e4:	d150      	bne.n	8080888 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80807e6:	b93c      	cbnz	r4, 80807f8 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80807e8:	0651      	lsls	r1, r2, #25
 80807ea:	d5d3      	bpl.n	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80807ec:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80807ee:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 80807f2:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80807f4:	4623      	mov	r3, r4
 80807f6:	e007      	b.n	8080808 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80807f8:	3b01      	subs	r3, #1
 80807fa:	b2db      	uxtb	r3, r3
 80807fc:	429a      	cmp	r2, r3
 80807fe:	d1eb      	bne.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080800:	7b42      	ldrb	r2, [r0, #13]
 8080802:	9902      	ldr	r1, [sp, #8]
 8080804:	4291      	cmp	r1, r2
 8080806:	d1e7      	bne.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8080808:	1e5a      	subs	r2, r3, #1
 808080a:	f04f 0c0d 	mov.w	ip, #13
 808080e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8080812:	45e3      	cmp	fp, ip
 8080814:	d9e0      	bls.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080816:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 808081a:	f1be 0f04 	cmp.w	lr, #4
 808081e:	fa5f f28e 	uxtb.w	r2, lr
 8080822:	d804      	bhi.n	808082e <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8080824:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8080828:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 808082c:	e00c      	b.n	8080848 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808082e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080830:	bf95      	itete	ls
 8080832:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080836:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 808083a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808083e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080842:	bf94      	ite	ls
 8080844:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080846:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8080848:	45e3      	cmp	fp, ip
 808084a:	d103      	bne.n	8080854 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 808084c:	2a00      	cmp	r2, #0
 808084e:	bf18      	it	ne
 8080850:	2400      	movne	r4, #0
 8080852:	e79f      	b.n	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080854:	2aff      	cmp	r2, #255	; 0xff
 8080856:	d8bf      	bhi.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080858:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808085a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 808085e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080860:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080864:	bf98      	it	ls
 8080866:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080868:	f811 100c 	ldrb.w	r1, [r1, ip]
 808086c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080870:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8080874:	bf98      	it	ls
 8080876:	b2d2      	uxtbls	r2, r2
 8080878:	f1bc 0f19 	cmp.w	ip, #25
 808087c:	bf9c      	itt	ls
 808087e:	3120      	addls	r1, #32
 8080880:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080882:	4291      	cmp	r1, r2
 8080884:	d1a8      	bne.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080886:	e0f6      	b.n	8080a76 <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8080888:	070a      	lsls	r2, r1, #28
 808088a:	d4a5      	bmi.n	80807d8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 808088c:	b14c      	cbz	r4, 80808a2 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 808088e:	2b01      	cmp	r3, #1
 8080890:	f47f af5d 	bne.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8080894:	f7ff fdff 	bl	8080496 <_ZN7FatFile11lfnChecksumEPh>
 8080898:	9b02      	ldr	r3, [sp, #8]
 808089a:	4283      	cmp	r3, r0
 808089c:	f47f af57 	bne.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80808a0:	e00f      	b.n	80808c2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80808a2:	220b      	movs	r2, #11
 80808a4:	9906      	ldr	r1, [sp, #24]
 80808a6:	9307      	str	r3, [sp, #28]
 80808a8:	f003 f8c6 	bl	8083a38 <memcmp>
 80808ac:	9b07      	ldr	r3, [sp, #28]
 80808ae:	2800      	cmp	r0, #0
 80808b0:	f47f af70 	bne.w	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80808b4:	f899 2000 	ldrb.w	r2, [r9]
 80808b8:	07d1      	lsls	r1, r2, #31
 80808ba:	d502      	bpl.n	80808c2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 80808bc:	2201      	movs	r2, #1
 80808be:	9204      	str	r2, [sp, #16]
 80808c0:	e768      	b.n	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80808c2:	9b03      	ldr	r3, [sp, #12]
 80808c4:	061a      	lsls	r2, r3, #24
 80808c6:	f140 80cc 	bpl.w	8080a62 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 80808ca:	e740      	b.n	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 80808cc:	9b03      	ldr	r3, [sp, #12]
 80808ce:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80808d2:	2b42      	cmp	r3, #66	; 0x42
 80808d4:	f47f af3b 	bne.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80808d8:	2d00      	cmp	r5, #0
 80808da:	bf08      	it	eq
 80808dc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80808de:	42bd      	cmp	r5, r7
 80808e0:	d302      	bcc.n	80808e8 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80808e2:	9b04      	ldr	r3, [sp, #16]
 80808e4:	b9cb      	cbnz	r3, 808091a <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 80808e6:	e01f      	b.n	8080928 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80808e8:	2100      	movs	r1, #0
 80808ea:	4630      	mov	r0, r6
 80808ec:	f000 fa10 	bl	8080d10 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80808f0:	b910      	cbnz	r0, 80808f8 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 80808f2:	7873      	ldrb	r3, [r6, #1]
 80808f4:	b15b      	cbz	r3, 808090e <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 80808f6:	e72a      	b.n	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80808f8:	3501      	adds	r5, #1
 80808fa:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80808fc:	e7ef      	b.n	80808de <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 80808fe:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8080900:	791b      	ldrb	r3, [r3, #4]
 8080902:	2b01      	cmp	r3, #1
 8080904:	d8ed      	bhi.n	80808e2 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8080906:	3510      	adds	r5, #16
 8080908:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 808090a:	42af      	cmp	r7, r5
 808090c:	d9e9      	bls.n	80808e2 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 808090e:	4630      	mov	r0, r6
 8080910:	f000 f8d0 	bl	8080ab4 <_ZN7FatFile13addDirClusterEv>
 8080914:	2800      	cmp	r0, #0
 8080916:	d1f2      	bne.n	80808fe <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8080918:	e719      	b.n	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 808091a:	4649      	mov	r1, r9
 808091c:	4630      	mov	r0, r6
 808091e:	f7ff feb5 	bl	808068c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8080922:	2800      	cmp	r0, #0
 8080924:	f43f af13 	beq.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8080928:	ea4f 1148 	mov.w	r1, r8, lsl #5
 808092c:	4630      	mov	r0, r6
 808092e:	f000 fa0c 	bl	8080d4a <_ZN7FatFile7seekSetEm>
 8080932:	2800      	cmp	r0, #0
 8080934:	f43f af0b 	beq.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8080938:	1e7c      	subs	r4, r7, #1
 808093a:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808093c:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808093e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8080942:	f04f 080f 	mov.w	r8, #15
 8080946:	e040      	b.n	80809ca <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080948:	2100      	movs	r1, #0
 808094a:	4630      	mov	r0, r6
 808094c:	f000 f9e0 	bl	8080d10 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8080950:	4607      	mov	r7, r0
 8080952:	2800      	cmp	r0, #0
 8080954:	f43f aefb 	beq.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8080958:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808095a:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 808095c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8080960:	f043 0301 	orr.w	r3, r3, #1
 8080964:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8080968:	bf14      	ite	ne
 808096a:	462a      	movne	r2, r5
 808096c:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8080970:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8080972:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8080976:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808097a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808097e:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8080980:	f7ff fd89 	bl	8080496 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8080984:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8080986:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8080988:	f887 a01a 	strb.w	sl, [r7, #26]
 808098c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8080990:	f002 021f 	and.w	r2, r2, #31
 8080994:	230d      	movs	r3, #13
 8080996:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8080998:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808099c:	435a      	muls	r2, r3
 808099e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80809a0:	4593      	cmp	fp, r2
 80809a2:	d915      	bls.n	80809d0 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 80809a4:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 80809a8:	2b04      	cmp	r3, #4
 80809aa:	fa5f fc83 	uxtb.w	ip, r3
 80809ae:	f103 0001 	add.w	r0, r3, #1
 80809b2:	d813      	bhi.n	80809dc <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 80809b4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80809b8:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80809bc:	280d      	cmp	r0, #13
 80809be:	f102 0201 	add.w	r2, r2, #1
 80809c2:	4603      	mov	r3, r0
 80809c4:	d1ec      	bne.n	80809a0 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80809c6:	3d01      	subs	r5, #1
 80809c8:	b2ed      	uxtb	r5, r5
 80809ca:	2d00      	cmp	r5, #0
 80809cc:	d1bc      	bne.n	8080948 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 80809ce:	e00e      	b.n	80809ee <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80809d0:	bf14      	ite	ne
 80809d2:	f04f 31ff 	movne.w	r1, #4294967295
 80809d6:	2100      	moveq	r1, #0
 80809d8:	b289      	uxth	r1, r1
 80809da:	e7e5      	b.n	80809a8 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80809dc:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80809e0:	bf94      	ite	ls
 80809e2:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80809e6:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80809ea:	8099      	strh	r1, [r3, #4]
 80809ec:	e7e6      	b.n	80809bc <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80809ee:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80809f0:	4629      	mov	r1, r5
 80809f2:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80809f4:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80809f8:	f000 f98a 	bl	8080d10 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80809fc:	4607      	mov	r7, r0
 80809fe:	2800      	cmp	r0, #0
 8080a00:	f43f aea5 	beq.w	808074e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8080a04:	2220      	movs	r2, #32
 8080a06:	4629      	mov	r1, r5
 8080a08:	f003 f830 	bl	8083a6c <memset>
  memcpy(dir->name, fname->sfn, 11);
 8080a0c:	464b      	mov	r3, r9
 8080a0e:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8080a12:	603a      	str	r2, [r7, #0]
 8080a14:	685a      	ldr	r2, [r3, #4]
 8080a16:	607a      	str	r2, [r7, #4]
 8080a18:	891a      	ldrh	r2, [r3, #8]
 8080a1a:	813a      	strh	r2, [r7, #8]
 8080a1c:	7a9b      	ldrb	r3, [r3, #10]
 8080a1e:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8080a20:	f899 3000 	ldrb.w	r3, [r9]
 8080a24:	f003 0318 	and.w	r3, r3, #24
 8080a28:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8080a2a:	4b18      	ldr	r3, [pc, #96]	; (8080a8c <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8080a2c:	681b      	ldr	r3, [r3, #0]
 8080a2e:	b12b      	cbz	r3, 8080a3c <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8080a30:	f107 010e 	add.w	r1, r7, #14
 8080a34:	f107 0010 	add.w	r0, r7, #16
 8080a38:	4798      	blx	r3
 8080a3a:	e006      	b.n	8080a4a <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8080a3c:	2321      	movs	r3, #33	; 0x21
 8080a3e:	743b      	strb	r3, [r7, #16]
 8080a40:	2328      	movs	r3, #40	; 0x28
 8080a42:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8080a44:	2308      	movs	r3, #8
 8080a46:	73bd      	strb	r5, [r7, #14]
 8080a48:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8080a4a:	8a3b      	ldrh	r3, [r7, #16]
 8080a4c:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8080a4e:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8080a50:	89fb      	ldrh	r3, [r7, #14]
 8080a52:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8080a54:	68b2      	ldr	r2, [r6, #8]
 8080a56:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8080a5a:	f043 0301 	orr.w	r3, r3, #1
 8080a5e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8080a62:	9400      	str	r4, [sp, #0]
 8080a64:	9b03      	ldr	r3, [sp, #12]
 8080a66:	4652      	mov	r2, sl
 8080a68:	4631      	mov	r1, r6
 8080a6a:	9805      	ldr	r0, [sp, #20]
 8080a6c:	f000 f9b6 	bl	8080ddc <_ZN7FatFile15openCachedEntryEPS_thh>
 8080a70:	e009      	b.n	8080a86 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080a72:	2701      	movs	r7, #1
 8080a74:	e67e      	b.n	8080774 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8080a76:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8080a7a:	f1be 0f0d 	cmp.w	lr, #13
 8080a7e:	f43f ae89 	beq.w	8080794 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080a82:	46d4      	mov	ip, sl
 8080a84:	e6c9      	b.n	808081a <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8080a86:	b009      	add	sp, #36	; 0x24
 8080a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080a8c:	20000938 	.word	0x20000938

08080a90 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8080a90:	f001 b88e 	b.w	8081bb0 <HAL_Pin_Map>

08080a94 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8080a94:	f001 b88c 	b.w	8081bb0 <HAL_Pin_Map>

08080a98 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8080a98:	f001 b88a 	b.w	8081bb0 <HAL_Pin_Map>

08080a9c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8080a9c:	f001 b888 	b.w	8081bb0 <HAL_Pin_Map>

08080aa0 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8080aa0:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8080aa2:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8080aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080aaa:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8080aac:	6901      	ldr	r1, [r0, #16]
 8080aae:	6880      	ldr	r0, [r0, #8]
 8080ab0:	f000 bc04 	b.w	80812bc <_ZN9FatVolume15allocateClusterEmPm>

08080ab4 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8080ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8080ab8:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8080aba:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8080abc:	f003 0320 	and.w	r3, r3, #32
 8080ac0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8080ac4:	b10b      	cbz	r3, 8080aca <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8080ac6:	2600      	movs	r6, #0
 8080ac8:	e02e      	b.n	8080b28 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8080aca:	6942      	ldr	r2, [r0, #20]
 8080acc:	4b18      	ldr	r3, [pc, #96]	; (8080b30 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8080ace:	429a      	cmp	r2, r3
 8080ad0:	d8f9      	bhi.n	8080ac6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8080ad2:	f7ff ffe5 	bl	8080aa0 <_ZN7FatFile10addClusterEv>
 8080ad6:	4606      	mov	r6, r0
 8080ad8:	2800      	cmp	r0, #0
 8080ada:	d0f4      	beq.n	8080ac6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8080adc:	6921      	ldr	r1, [r4, #16]
 8080ade:	68a0      	ldr	r0, [r4, #8]
 8080ae0:	f000 fb8d 	bl	80811fe <_ZNK9FatVolume17clusterStartBlockEm>
 8080ae4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8080ae6:	68a0      	ldr	r0, [r4, #8]
 8080ae8:	2205      	movs	r2, #5
 8080aea:	4639      	mov	r1, r7
 8080aec:	3028      	adds	r0, #40	; 0x28
 8080aee:	f000 fb62 	bl	80811b6 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8080af2:	4680      	mov	r8, r0
 8080af4:	2800      	cmp	r0, #0
 8080af6:	d0e6      	beq.n	8080ac6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8080af8:	4629      	mov	r1, r5
 8080afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080afe:	f002 ffb5 	bl	8083a6c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8080b02:	2501      	movs	r5, #1
 8080b04:	68a0      	ldr	r0, [r4, #8]
 8080b06:	7902      	ldrb	r2, [r0, #4]
 8080b08:	42aa      	cmp	r2, r5
 8080b0a:	d909      	bls.n	8080b20 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8080b0c:	6803      	ldr	r3, [r0, #0]
 8080b0e:	4642      	mov	r2, r8
 8080b10:	685b      	ldr	r3, [r3, #4]
 8080b12:	19e9      	adds	r1, r5, r7
 8080b14:	4798      	blx	r3
 8080b16:	2800      	cmp	r0, #0
 8080b18:	d0d5      	beq.n	8080ac6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8080b1a:	3501      	adds	r5, #1
 8080b1c:	b2ed      	uxtb	r5, r5
 8080b1e:	e7f1      	b.n	8080b04 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8080b20:	6963      	ldr	r3, [r4, #20]
 8080b22:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8080b26:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8080b28:	4630      	mov	r0, r6
 8080b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080b2e:	bf00      	nop
 8080b30:	001ffdff 	.word	0x001ffdff

08080b34 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8080b34:	b510      	push	{r4, lr}
 8080b36:	4604      	mov	r4, r0
 8080b38:	6880      	ldr	r0, [r0, #8]
 8080b3a:	460a      	mov	r2, r1
 8080b3c:	3028      	adds	r0, #40	; 0x28
 8080b3e:	69a1      	ldr	r1, [r4, #24]
 8080b40:	f000 fb39 	bl	80811b6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8080b44:	b120      	cbz	r0, 8080b50 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8080b46:	88a3      	ldrh	r3, [r4, #4]
 8080b48:	f003 030f 	and.w	r3, r3, #15
 8080b4c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8080b50:	bd10      	pop	{r4, pc}

08080b52 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8080b52:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8080b54:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8080b56:	4605      	mov	r5, r0
 8080b58:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8080b5a:	b984      	cbnz	r4, 8080b7e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8080b5c:	2224      	movs	r2, #36	; 0x24
 8080b5e:	4621      	mov	r1, r4
 8080b60:	f002 ff84 	bl	8083a6c <memset>

  m_vol = vol;
 8080b64:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8080b66:	79f3      	ldrb	r3, [r6, #7]
 8080b68:	2b10      	cmp	r3, #16
 8080b6a:	d003      	beq.n	8080b74 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8080b6c:	2b20      	cmp	r3, #32
 8080b6e:	d106      	bne.n	8080b7e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8080b70:	2340      	movs	r3, #64	; 0x40
 8080b72:	e000      	b.n	8080b76 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8080b74:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8080b76:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8080b78:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8080b7a:	70a8      	strb	r0, [r5, #2]
 8080b7c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8080b7e:	2000      	movs	r0, #0
 8080b80:	bd70      	pop	{r4, r5, r6, pc}

08080b82 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8080b82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080b86:	7803      	ldrb	r3, [r0, #0]
 8080b88:	4604      	mov	r4, r0
 8080b8a:	4689      	mov	r9, r1
 8080b8c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8080b8e:	b14b      	cbz	r3, 8080ba4 <_ZN7FatFile4readEPvj+0x22>
 8080b90:	7882      	ldrb	r2, [r0, #2]
 8080b92:	07d1      	lsls	r1, r2, #31
 8080b94:	d506      	bpl.n	8080ba4 <_ZN7FatFile4readEPvj+0x22>
 8080b96:	e00c      	b.n	8080bb2 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8080b98:	465a      	mov	r2, fp
 8080b9a:	6921      	ldr	r1, [r4, #16]
 8080b9c:	f000 fb35 	bl	808120a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8080ba0:	2800      	cmp	r0, #0
 8080ba2:	da3d      	bge.n	8080c20 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8080ba4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8080ba6:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8080baa:	f043 0302 	orr.w	r3, r3, #2
 8080bae:	7063      	strb	r3, [r4, #1]
  return -1;
 8080bb0:	e098      	b.n	8080ce4 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8080bb2:	071a      	lsls	r2, r3, #28
 8080bb4:	d503      	bpl.n	8080bbe <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8080bb6:	69e3      	ldr	r3, [r4, #28]
 8080bb8:	6962      	ldr	r2, [r4, #20]
 8080bba:	1a9b      	subs	r3, r3, r2
 8080bbc:	e007      	b.n	8080bce <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8080bbe:	069a      	lsls	r2, r3, #26
 8080bc0:	d508      	bpl.n	8080bd4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8080bc2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8080bc4:	891a      	ldrh	r2, [r3, #8]
 8080bc6:	6963      	ldr	r3, [r4, #20]
 8080bc8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8080bcc:	b29b      	uxth	r3, r3
 8080bce:	429d      	cmp	r5, r3
 8080bd0:	bf28      	it	cs
 8080bd2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8080bd4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8080bd6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8080bda:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8080bde:	2e00      	cmp	r6, #0
 8080be0:	d035      	beq.n	8080c4e <_ZN7FatFile4readEPvj+0xcc>
 8080be2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8080be4:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8080be6:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8080bea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8080bee:	68a0      	ldr	r0, [r4, #8]
 8080bf0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8080bf4:	d002      	beq.n	8080bfc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8080bf6:	6a03      	ldr	r3, [r0, #32]
 8080bf8:	4419      	add	r1, r3
 8080bfa:	e01d      	b.n	8080c38 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8080bfc:	f890 8005 	ldrb.w	r8, [r0, #5]
 8080c00:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8080c04:	f1ba 0f00 	cmp.w	sl, #0
 8080c08:	d110      	bne.n	8080c2c <_ZN7FatFile4readEPvj+0xaa>
 8080c0a:	f1b8 0f00 	cmp.w	r8, #0
 8080c0e:	d10d      	bne.n	8080c2c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8080c10:	2b00      	cmp	r3, #0
 8080c12:	d1c1      	bne.n	8080b98 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8080c14:	0653      	lsls	r3, r2, #25
 8080c16:	bf4c      	ite	mi
 8080c18:	6a03      	ldrmi	r3, [r0, #32]
 8080c1a:	6a23      	ldrpl	r3, [r4, #32]
 8080c1c:	6123      	str	r3, [r4, #16]
 8080c1e:	e005      	b.n	8080c2c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8080c20:	d104      	bne.n	8080c2c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8080c22:	7823      	ldrb	r3, [r4, #0]
 8080c24:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080c28:	d111      	bne.n	8080c4e <_ZN7FatFile4readEPvj+0xcc>
 8080c2a:	e7bb      	b.n	8080ba4 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8080c2c:	6921      	ldr	r1, [r4, #16]
 8080c2e:	68a0      	ldr	r0, [r4, #8]
 8080c30:	f000 fae5 	bl	80811fe <_ZNK9FatVolume17clusterStartBlockEm>
 8080c34:	eb08 0100 	add.w	r1, r8, r0
 8080c38:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8080c3a:	f1ba 0f00 	cmp.w	sl, #0
 8080c3e:	d135      	bne.n	8080cac <_ZN7FatFile4readEPvj+0x12a>
 8080c40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8080c44:	d332      	bcc.n	8080cac <_ZN7FatFile4readEPvj+0x12a>
 8080c46:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8080c48:	4291      	cmp	r1, r2
 8080c4a:	d102      	bne.n	8080c52 <_ZN7FatFile4readEPvj+0xd0>
 8080c4c:	e02e      	b.n	8080cac <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8080c4e:	1ba8      	subs	r0, r5, r6
 8080c50:	e048      	b.n	8080ce4 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8080c52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8080c56:	d31b      	bcc.n	8080c90 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8080c58:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 8080c5a:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8080c5e:	06bf      	lsls	r7, r7, #26
 8080c60:	d406      	bmi.n	8080c70 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8080c62:	7907      	ldrb	r7, [r0, #4]
 8080c64:	ebc8 0707 	rsb	r7, r8, r7
 8080c68:	b2ff      	uxtb	r7, r7
 8080c6a:	42bb      	cmp	r3, r7
 8080c6c:	bf28      	it	cs
 8080c6e:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080c70:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8080c72:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080c76:	d207      	bcs.n	8080c88 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8080c78:	68a0      	ldr	r0, [r4, #8]
 8080c7a:	6802      	ldr	r2, [r0, #0]
 8080c7c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8080c80:	464a      	mov	r2, r9
 8080c82:	47d0      	blx	sl
 8080c84:	b960      	cbnz	r0, 8080ca0 <_ZN7FatFile4readEPvj+0x11e>
 8080c86:	e78d      	b.n	8080ba4 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080c88:	441a      	add	r2, r3
 8080c8a:	4291      	cmp	r1, r2
 8080c8c:	d321      	bcc.n	8080cd2 <_ZN7FatFile4readEPvj+0x150>
 8080c8e:	e7f3      	b.n	8080c78 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8080c90:	6803      	ldr	r3, [r0, #0]
 8080c92:	464a      	mov	r2, r9
 8080c94:	681b      	ldr	r3, [r3, #0]
 8080c96:	4798      	blx	r3
 8080c98:	2800      	cmp	r0, #0
 8080c9a:	d083      	beq.n	8080ba4 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8080c9c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8080ca0:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8080ca2:	44b9      	add	r9, r7
    m_curPosition += n;
 8080ca4:	443b      	add	r3, r7
 8080ca6:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8080ca8:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8080caa:	e798      	b.n	8080bde <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8080cac:	2200      	movs	r2, #0
 8080cae:	3028      	adds	r0, #40	; 0x28
 8080cb0:	f000 fa81 	bl	80811b6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8080cb4:	2800      	cmp	r0, #0
 8080cb6:	f43f af75 	beq.w	8080ba4 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8080cba:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8080cbe:	42b7      	cmp	r7, r6
 8080cc0:	bf28      	it	cs
 8080cc2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8080cc4:	eb00 010a 	add.w	r1, r0, sl
 8080cc8:	463a      	mov	r2, r7
 8080cca:	4648      	mov	r0, r9
 8080ccc:	f002 fec3 	bl	8083a56 <memcpy>
 8080cd0:	e7e6      	b.n	8080ca0 <_ZN7FatFile4readEPvj+0x11e>
 8080cd2:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8080cd6:	f7ff fbd1 	bl	808047c <_ZN9FatVolume9cacheSyncEv>
 8080cda:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8080cde:	2800      	cmp	r0, #0
 8080ce0:	d1ca      	bne.n	8080c78 <_ZN7FatFile4readEPvj+0xf6>
 8080ce2:	e75f      	b.n	8080ba4 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8080ce4:	b003      	add	sp, #12
 8080ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080cea <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8080cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080cec:	2201      	movs	r2, #1
 8080cee:	f10d 0107 	add.w	r1, sp, #7
 8080cf2:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8080cf4:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8080cf6:	6905      	ldr	r5, [r0, #16]
 8080cf8:	f7ff ff43 	bl	8080b82 <_ZN7FatFile4readEPvj>
 8080cfc:	2801      	cmp	r0, #1
 8080cfe:	bf09      	itett	eq
 8080d00:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080d04:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8080d08:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 8080d0a:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8080d0c:	b002      	add	sp, #8
 8080d0e:	bd70      	pop	{r4, r5, r6, pc}

08080d10 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8080d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8080d12:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8080d14:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8080d16:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8080d1a:	b105      	cbz	r5, 8080d1e <_ZN7FatFile12readDirCacheEb+0xe>
 8080d1c:	b969      	cbnz	r1, 8080d3a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8080d1e:	2201      	movs	r2, #1
 8080d20:	f10d 0107 	add.w	r1, sp, #7
 8080d24:	4620      	mov	r0, r4
 8080d26:	f7ff ff2c 	bl	8080b82 <_ZN7FatFile4readEPvj>
 8080d2a:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8080d2c:	2801      	cmp	r0, #1
 8080d2e:	d001      	beq.n	8080d34 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8080d30:	2000      	movs	r0, #0
 8080d32:	e008      	b.n	8080d46 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8080d34:	6963      	ldr	r3, [r4, #20]
 8080d36:	331f      	adds	r3, #31
 8080d38:	e000      	b.n	8080d3c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8080d3a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8080d3c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8080d3e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8080d40:	3034      	adds	r0, #52	; 0x34
 8080d42:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8080d46:	b003      	add	sp, #12
 8080d48:	bd30      	pop	{r4, r5, pc}

08080d4a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8080d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080d4e:	460e      	mov	r6, r1
 8080d50:	7801      	ldrb	r1, [r0, #0]
 8080d52:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8080d54:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8080d56:	2900      	cmp	r1, #0
 8080d58:	d039      	beq.n	8080dce <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8080d5a:	6945      	ldr	r5, [r0, #20]
 8080d5c:	42b5      	cmp	r5, r6
 8080d5e:	d03a      	beq.n	8080dd6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8080d60:	b90e      	cbnz	r6, 8080d66 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8080d62:	6106      	str	r6, [r0, #16]
    goto done;
 8080d64:	e031      	b.n	8080dca <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8080d66:	070b      	lsls	r3, r1, #28
 8080d68:	d503      	bpl.n	8080d72 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8080d6a:	69c3      	ldr	r3, [r0, #28]
 8080d6c:	429e      	cmp	r6, r3
 8080d6e:	d82e      	bhi.n	8080dce <_ZN7FatFile7seekSetEm+0x84>
 8080d70:	e007      	b.n	8080d82 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8080d72:	0688      	lsls	r0, r1, #26
 8080d74:	d505      	bpl.n	8080d82 <_ZN7FatFile7seekSetEm+0x38>
 8080d76:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8080d78:	891b      	ldrh	r3, [r3, #8]
 8080d7a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8080d7e:	d826      	bhi.n	8080dce <_ZN7FatFile7seekSetEm+0x84>
 8080d80:	e023      	b.n	8080dca <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8080d82:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8080d86:	1e6a      	subs	r2, r5, #1
 8080d88:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8080d8c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8080d90:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8080d92:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8080d94:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8080d96:	429a      	cmp	r2, r3
 8080d98:	d800      	bhi.n	8080d9c <_ZN7FatFile7seekSetEm+0x52>
 8080d9a:	b94d      	cbnz	r5, 8080db0 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8080d9c:	064a      	lsls	r2, r1, #25
 8080d9e:	bf4c      	ite	mi
 8080da0:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8080da4:	6a22      	ldrpl	r2, [r4, #32]
 8080da6:	6122      	str	r2, [r4, #16]
 8080da8:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8080daa:	f104 0810 	add.w	r8, r4, #16
 8080dae:	e00a      	b.n	8080dc6 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8080db0:	1a9b      	subs	r3, r3, r2
 8080db2:	e7f9      	b.n	8080da8 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8080db4:	4642      	mov	r2, r8
 8080db6:	6921      	ldr	r1, [r4, #16]
 8080db8:	68a0      	ldr	r0, [r4, #8]
 8080dba:	f000 fa26 	bl	808120a <_ZN9FatVolume6fatGetEmPm>
 8080dbe:	2800      	cmp	r0, #0
 8080dc0:	f105 35ff 	add.w	r5, r5, #4294967295
 8080dc4:	dd03      	ble.n	8080dce <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8080dc6:	2d00      	cmp	r5, #0
 8080dc8:	d1f4      	bne.n	8080db4 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8080dca:	6166      	str	r6, [r4, #20]
 8080dcc:	e003      	b.n	8080dd6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8080dce:	6127      	str	r7, [r4, #16]
  return false;
 8080dd0:	2000      	movs	r0, #0
 8080dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8080dd6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8080dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080ddc <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8080ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080dde:	460f      	mov	r7, r1
 8080de0:	4604      	mov	r4, r0
 8080de2:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8080de4:	2100      	movs	r1, #0
 8080de6:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8080de8:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8080dea:	f002 fe3f 	bl	8083a6c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8080dee:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8080df0:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8080df2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8080df4:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8080df6:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8080dfa:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8080dfc:	0152      	lsls	r2, r2, #5
 8080dfe:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8080e02:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8080e04:	7ad9      	ldrb	r1, [r3, #11]
 8080e06:	070f      	lsls	r7, r1, #28
 8080e08:	d502      	bpl.n	8080e10 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8080e0a:	2000      	movs	r0, #0
 8080e0c:	7020      	strb	r0, [r4, #0]
  return false;
 8080e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8080e10:	1881      	adds	r1, r0, r2
 8080e12:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8080e16:	f001 0117 	and.w	r1, r1, #23
 8080e1a:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8080e1c:	7adb      	ldrb	r3, [r3, #11]
 8080e1e:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 8080e22:	bf08      	it	eq
 8080e24:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 8080e28:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 8080e2c:	bf08      	it	eq
 8080e2e:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8080e30:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8080e34:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8080e36:	d003      	beq.n	8080e40 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8080e38:	7823      	ldrb	r3, [r4, #0]
 8080e3a:	f013 0f11 	tst.w	r3, #17
 8080e3e:	d1e4      	bne.n	8080e0a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8080e40:	f005 030f 	and.w	r3, r5, #15
 8080e44:	70a3      	strb	r3, [r4, #2]
 8080e46:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8080e48:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 8080e4a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8080e4c:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8080e50:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8080e54:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8080e56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 8080e5a:	d504      	bpl.n	8080e66 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8080e5c:	b171      	cbz	r1, 8080e7c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8080e5e:	f000 fa68 	bl	8081332 <_ZN9FatVolume9freeChainEm>
 8080e62:	b958      	cbnz	r0, 8080e7c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8080e64:	e7d1      	b.n	8080e0a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8080e66:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8080e68:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8080e6a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8080e6c:	06ab      	lsls	r3, r5, #26
 8080e6e:	d50a      	bpl.n	8080e86 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8080e70:	69e1      	ldr	r1, [r4, #28]
 8080e72:	4620      	mov	r0, r4
 8080e74:	f7ff ff69 	bl	8080d4a <_ZN7FatFile7seekSetEm>
 8080e78:	b928      	cbnz	r0, 8080e86 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8080e7a:	e7c6      	b.n	8080e0a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8080e7c:	78a3      	ldrb	r3, [r4, #2]
 8080e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080e82:	70a3      	strb	r3, [r4, #2]
 8080e84:	e7f2      	b.n	8080e6c <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8080e86:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8080e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080e8c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8080e8c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8080e8e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8080e90:	4604      	mov	r4, r0
  if (!isOpen()) {
 8080e92:	b90b      	cbnz	r3, 8080e98 <_ZN7FatFile4syncEv+0xc>
    return true;
 8080e94:	2001      	movs	r0, #1
 8080e96:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8080e98:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8080e9c:	2b00      	cmp	r3, #0
 8080e9e:	da23      	bge.n	8080ee8 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8080ea0:	2101      	movs	r1, #1
 8080ea2:	f7ff fe47 	bl	8080b34 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8080ea6:	4605      	mov	r5, r0
 8080ea8:	b928      	cbnz	r0, 8080eb6 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8080eaa:	7863      	ldrb	r3, [r4, #1]
  return false;
 8080eac:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8080eae:	f043 0301 	orr.w	r3, r3, #1
 8080eb2:	7063      	strb	r3, [r4, #1]
 8080eb4:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8080eb6:	7803      	ldrb	r3, [r0, #0]
 8080eb8:	2be5      	cmp	r3, #229	; 0xe5
 8080eba:	d0f6      	beq.n	8080eaa <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8080ebc:	7823      	ldrb	r3, [r4, #0]
 8080ebe:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8080ec0:	bf44      	itt	mi
 8080ec2:	69e3      	ldrmi	r3, [r4, #28]
 8080ec4:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8080ec6:	8c23      	ldrh	r3, [r4, #32]
 8080ec8:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8080eca:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8080ecc:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8080ece:	4b09      	ldr	r3, [pc, #36]	; (8080ef4 <_ZN7FatFile4syncEv+0x68>)
 8080ed0:	681b      	ldr	r3, [r3, #0]
 8080ed2:	b12b      	cbz	r3, 8080ee0 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8080ed4:	f100 0116 	add.w	r1, r0, #22
 8080ed8:	3018      	adds	r0, #24
 8080eda:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8080edc:	8b2b      	ldrh	r3, [r5, #24]
 8080ede:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8080ee0:	78a3      	ldrb	r3, [r4, #2]
 8080ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8080ee6:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8080ee8:	68a0      	ldr	r0, [r4, #8]
 8080eea:	f7ff fac7 	bl	808047c <_ZN9FatVolume9cacheSyncEv>
 8080eee:	2800      	cmp	r0, #0
 8080ef0:	d0db      	beq.n	8080eaa <_ZN7FatFile4syncEv+0x1e>
 8080ef2:	e7cf      	b.n	8080e94 <_ZN7FatFile4syncEv+0x8>
 8080ef4:	20000938 	.word	0x20000938

08080ef8 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8080ef8:	b510      	push	{r4, lr}
 8080efa:	4604      	mov	r4, r0
  bool rtn = sync();
 8080efc:	f7ff ffc6 	bl	8080e8c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8080f00:	2300      	movs	r3, #0
 8080f02:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8080f04:	bd10      	pop	{r4, pc}

08080f06 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8080f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080f08:	461f      	mov	r7, r3
 8080f0a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080f0c:	2300      	movs	r3, #0
 8080f0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8080f12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8080f16:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8080f18:	4606      	mov	r6, r0
 8080f1a:	460c      	mov	r4, r1
 8080f1c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8080f1e:	b10b      	cbz	r3, 8080f24 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8080f20:	2000      	movs	r0, #0
 8080f22:	e03d      	b.n	8080fa0 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8080f24:	780b      	ldrb	r3, [r1, #0]
 8080f26:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080f2a:	d0f9      	beq.n	8080f20 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8080f2c:	7813      	ldrb	r3, [r2, #0]
 8080f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8080f30:	d112      	bne.n	8080f58 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8080f32:	9b01      	ldr	r3, [sp, #4]
 8080f34:	781a      	ldrb	r2, [r3, #0]
 8080f36:	2a2f      	cmp	r2, #47	; 0x2f
 8080f38:	d102      	bne.n	8080f40 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 8080f3a:	3301      	adds	r3, #1
 8080f3c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8080f3e:	e7f8      	b.n	8080f32 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8080f40:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8080f42:	b91a      	cbnz	r2, 8080f4c <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8080f44:	4630      	mov	r0, r6
 8080f46:	f7ff fe04 	bl	8080b52 <_ZN7FatFile8openRootEP9FatVolume>
 8080f4a:	e029      	b.n	8080fa0 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8080f4c:	a809      	add	r0, sp, #36	; 0x24
 8080f4e:	f7ff fe00 	bl	8080b52 <_ZN7FatFile8openRootEP9FatVolume>
 8080f52:	2800      	cmp	r0, #0
 8080f54:	d0e4      	beq.n	8080f20 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8080f56:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8080f58:	aa01      	add	r2, sp, #4
 8080f5a:	a903      	add	r1, sp, #12
 8080f5c:	9801      	ldr	r0, [sp, #4]
 8080f5e:	f7ff faa9 	bl	80804b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8080f62:	2800      	cmp	r0, #0
 8080f64:	d0dc      	beq.n	8080f20 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8080f66:	9b01      	ldr	r3, [sp, #4]
 8080f68:	781b      	ldrb	r3, [r3, #0]
 8080f6a:	b19b      	cbz	r3, 8080f94 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 8080f6c:	2301      	movs	r3, #1
 8080f6e:	aa03      	add	r2, sp, #12
 8080f70:	4621      	mov	r1, r4
 8080f72:	4630      	mov	r0, r6
 8080f74:	f7ff fbe0 	bl	8080738 <_ZN7FatFile4openEPS_P7fname_th>
 8080f78:	2800      	cmp	r0, #0
 8080f7a:	d0d1      	beq.n	8080f20 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8080f7c:	4635      	mov	r5, r6
 8080f7e:	ac09      	add	r4, sp, #36	; 0x24
 8080f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080f88:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8080f8a:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8080f8c:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8080f8e:	f7ff ffb3 	bl	8080ef8 <_ZN7FatFile5closeEv>
 8080f92:	e7e0      	b.n	8080f56 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8080f94:	463b      	mov	r3, r7
 8080f96:	aa03      	add	r2, sp, #12
 8080f98:	4621      	mov	r1, r4
 8080f9a:	4630      	mov	r0, r6
 8080f9c:	f7ff fbcc 	bl	8080738 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8080fa0:	b013      	add	sp, #76	; 0x4c
 8080fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080fa4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8080fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8080fa8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8080faa:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8080fac:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8080fae:	4689      	mov	r9, r1
 8080fb0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8080fb2:	d508      	bpl.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
 8080fb4:	7883      	ldrb	r3, [r0, #2]
 8080fb6:	0799      	lsls	r1, r3, #30
 8080fb8:	d505      	bpl.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8080fba:	075b      	lsls	r3, r3, #29
 8080fbc:	d50b      	bpl.n	8080fd6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8080fbe:	69e1      	ldr	r1, [r4, #28]
 8080fc0:	f7ff fec3 	bl	8080d4a <_ZN7FatFile7seekSetEm>
 8080fc4:	b938      	cbnz	r0, 8080fd6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8080fc6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8080fc8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8080fcc:	f043 0301 	orr.w	r3, r3, #1
 8080fd0:	7063      	strb	r3, [r4, #1]
  return -1;
 8080fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8080fd6:	6963      	ldr	r3, [r4, #20]
 8080fd8:	43db      	mvns	r3, r3
 8080fda:	4598      	cmp	r8, r3
 8080fdc:	d8f3      	bhi.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
 8080fde:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8080fe0:	f04f 0a00 	mov.w	sl, #0
 8080fe4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8080fe6:	2f00      	cmp	r7, #0
 8080fe8:	f000 8082 	beq.w	80810f0 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8080fec:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8080fee:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8080ff2:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8080ff4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8080ff8:	d11c      	bne.n	8081034 <_ZN7FatFile5writeEPKvj+0x90>
 8080ffa:	b9de      	cbnz	r6, 8081034 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8080ffc:	6921      	ldr	r1, [r4, #16]
 8080ffe:	b171      	cbz	r1, 808101e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081000:	f104 0210 	add.w	r2, r4, #16
 8081004:	f000 f901 	bl	808120a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081008:	2800      	cmp	r0, #0
 808100a:	dbdc      	blt.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 808100c:	f040 808e 	bne.w	808112c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081010:	4620      	mov	r0, r4
 8081012:	f7ff fd45 	bl	8080aa0 <_ZN7FatFile10addClusterEv>
 8081016:	2800      	cmp	r0, #0
 8081018:	f040 8088 	bne.w	808112c <_ZN7FatFile5writeEPKvj+0x188>
 808101c:	e7d3      	b.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 808101e:	6a23      	ldr	r3, [r4, #32]
 8081020:	b93b      	cbnz	r3, 8081032 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8081022:	4620      	mov	r0, r4
 8081024:	f7ff fd3c 	bl	8080aa0 <_ZN7FatFile10addClusterEv>
 8081028:	2800      	cmp	r0, #0
 808102a:	d0cc      	beq.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 808102c:	6923      	ldr	r3, [r4, #16]
 808102e:	6223      	str	r3, [r4, #32]
 8081030:	e000      	b.n	8081034 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8081032:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081034:	6921      	ldr	r1, [r4, #16]
 8081036:	68a0      	ldr	r0, [r4, #8]
 8081038:	f000 f8e1 	bl	80811fe <_ZNK9FatVolume17clusterStartBlockEm>
 808103c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808103e:	b916      	cbnz	r6, 8081046 <_ZN7FatFile5writeEPKvj+0xa2>
 8081040:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081044:	d221      	bcs.n	808108a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081046:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808104a:	42bd      	cmp	r5, r7
 808104c:	bf28      	it	cs
 808104e:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081050:	b936      	cbnz	r6, 8081060 <_ZN7FatFile5writeEPKvj+0xbc>
 8081052:	6963      	ldr	r3, [r4, #20]
 8081054:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081056:	4293      	cmp	r3, r2
 8081058:	bf34      	ite	cc
 808105a:	2201      	movcc	r2, #1
 808105c:	2205      	movcs	r2, #5
 808105e:	e000      	b.n	8081062 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081060:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081062:	68a0      	ldr	r0, [r4, #8]
 8081064:	3028      	adds	r0, #40	; 0x28
 8081066:	f000 f8a6 	bl	80811b6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808106a:	2800      	cmp	r0, #0
 808106c:	d0ab      	beq.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808106e:	4430      	add	r0, r6
 8081070:	462a      	mov	r2, r5
 8081072:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081074:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081076:	f002 fcee 	bl	8083a56 <memcpy>
      if (512 == (n + blockOffset)) {
 808107a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808107e:	d131      	bne.n	80810e4 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081080:	68a0      	ldr	r0, [r4, #8]
 8081082:	3028      	adds	r0, #40	; 0x28
 8081084:	f000 f870 	bl	8081168 <_ZN8FatCache4syncEv>
 8081088:	e018      	b.n	80810bc <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808108a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 808108e:	68a2      	ldr	r2, [r4, #8]
 8081090:	d316      	bcc.n	80810c0 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8081092:	7913      	ldrb	r3, [r2, #4]
 8081094:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8081096:	1b5d      	subs	r5, r3, r5
 8081098:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 808109a:	f3c7 2347 	ubfx	r3, r7, #9, #8
 808109e:	42ab      	cmp	r3, r5
 80810a0:	bf28      	it	cs
 80810a2:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80810a4:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80810a6:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80810aa:	d302      	bcc.n	80810b2 <_ZN7FatFile5writeEPKvj+0x10e>
 80810ac:	4418      	add	r0, r3
 80810ae:	4281      	cmp	r1, r0
 80810b0:	d336      	bcc.n	8081120 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80810b2:	68a0      	ldr	r0, [r4, #8]
 80810b4:	6802      	ldr	r2, [r0, #0]
 80810b6:	68d6      	ldr	r6, [r2, #12]
 80810b8:	464a      	mov	r2, r9
 80810ba:	47b0      	blx	r6
 80810bc:	b990      	cbnz	r0, 80810e4 <_ZN7FatFile5writeEPKvj+0x140>
 80810be:	e782      	b.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80810c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80810c2:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80810c4:	bf02      	ittt	eq
 80810c6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80810ca:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80810ce:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80810d0:	68a0      	ldr	r0, [r4, #8]
 80810d2:	464a      	mov	r2, r9
 80810d4:	6803      	ldr	r3, [r0, #0]
 80810d6:	685b      	ldr	r3, [r3, #4]
 80810d8:	4798      	blx	r3
 80810da:	2800      	cmp	r0, #0
 80810dc:	f43f af73 	beq.w	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80810e0:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80810e4:	6963      	ldr	r3, [r4, #20]
    src += n;
 80810e6:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80810e8:	442b      	add	r3, r5
 80810ea:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80810ec:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80810ee:	e779      	b.n	8080fe4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80810f0:	69e2      	ldr	r2, [r4, #28]
 80810f2:	4293      	cmp	r3, r2
 80810f4:	78a2      	ldrb	r2, [r4, #2]
 80810f6:	d901      	bls.n	80810fc <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80810f8:	61e3      	str	r3, [r4, #28]
 80810fa:	e002      	b.n	8081102 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80810fc:	4b0e      	ldr	r3, [pc, #56]	; (8081138 <_ZN7FatFile5writeEPKvj+0x194>)
 80810fe:	681b      	ldr	r3, [r3, #0]
 8081100:	b113      	cbz	r3, 8081108 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8081102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8081106:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8081108:	78a3      	ldrb	r3, [r4, #2]
 808110a:	071a      	lsls	r2, r3, #28
 808110c:	d402      	bmi.n	8081114 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 808110e:	4640      	mov	r0, r8
 8081110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8081114:	4620      	mov	r0, r4
 8081116:	f7ff feb9 	bl	8080e8c <_ZN7FatFile4syncEv>
 808111a:	2800      	cmp	r0, #0
 808111c:	d1f7      	bne.n	808110e <_ZN7FatFile5writeEPKvj+0x16a>
 808111e:	e752      	b.n	8080fc6 <_ZN7FatFile5writeEPKvj+0x22>
 8081120:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081124:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081128:	6310      	str	r0, [r2, #48]	; 0x30
 808112a:	e7c2      	b.n	80810b2 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808112c:	6921      	ldr	r1, [r4, #16]
 808112e:	68a0      	ldr	r0, [r4, #8]
 8081130:	f000 f865 	bl	80811fe <_ZNK9FatVolume17clusterStartBlockEm>
 8081134:	4601      	mov	r1, r0
 8081136:	e783      	b.n	8081040 <_ZN7FatFile5writeEPKvj+0x9c>
 8081138:	20000938 	.word	0x20000938

0808113c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 808113c:	f000 bd38 	b.w	8081bb0 <HAL_Pin_Map>

08081140 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081140:	b570      	push	{r4, r5, r6, lr}
 8081142:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081144:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081146:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081148:	b149      	cbz	r1, 808115e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808114a:	f002 fcbf 	bl	8083acc <strlen>
 808114e:	682b      	ldr	r3, [r5, #0]
 8081150:	4602      	mov	r2, r0
 8081152:	4621      	mov	r1, r4
 8081154:	4628      	mov	r0, r5
    }
 8081156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808115a:	68db      	ldr	r3, [r3, #12]
 808115c:	4718      	bx	r3
    }
 808115e:	bd70      	pop	{r4, r5, r6, pc}

08081160 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081160:	f000 bd26 	b.w	8081bb0 <HAL_Pin_Map>

08081164 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081164:	f000 bd24 	b.w	8081bb0 <HAL_Pin_Map>

08081168 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808116a:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808116c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808116e:	07da      	lsls	r2, r3, #31
 8081170:	d51e      	bpl.n	80811b0 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081172:	6840      	ldr	r0, [r0, #4]
 8081174:	f104 060c 	add.w	r6, r4, #12
 8081178:	6803      	ldr	r3, [r0, #0]
 808117a:	4632      	mov	r2, r6
 808117c:	685b      	ldr	r3, [r3, #4]
 808117e:	68a1      	ldr	r1, [r4, #8]
 8081180:	4798      	blx	r3
 8081182:	4605      	mov	r5, r0
 8081184:	b908      	cbnz	r0, 808118a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8081186:	2500      	movs	r5, #0
 8081188:	e013      	b.n	80811b2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808118a:	7823      	ldrb	r3, [r4, #0]
 808118c:	079b      	lsls	r3, r3, #30
 808118e:	d404      	bmi.n	808119a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081190:	7823      	ldrb	r3, [r4, #0]
 8081192:	f023 0301 	bic.w	r3, r3, #1
 8081196:	7023      	strb	r3, [r4, #0]
 8081198:	e00b      	b.n	80811b2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808119a:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808119c:	68a7      	ldr	r7, [r4, #8]
 808119e:	6901      	ldr	r1, [r0, #16]
 80811a0:	6803      	ldr	r3, [r0, #0]
 80811a2:	4632      	mov	r2, r6
 80811a4:	685b      	ldr	r3, [r3, #4]
 80811a6:	4439      	add	r1, r7
 80811a8:	4798      	blx	r3
 80811aa:	2800      	cmp	r0, #0
 80811ac:	d1f0      	bne.n	8081190 <_ZN8FatCache4syncEv+0x28>
 80811ae:	e7ea      	b.n	8081186 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80811b0:	2501      	movs	r5, #1

fail:
  return false;
}
 80811b2:	4628      	mov	r0, r5
 80811b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080811b6 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80811b6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80811b8:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80811ba:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80811bc:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80811be:	460e      	mov	r6, r1
 80811c0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80811c2:	d014      	beq.n	80811ee <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80811c4:	f7ff ffd0 	bl	8081168 <_ZN8FatCache4syncEv>
 80811c8:	b908      	cbnz	r0, 80811ce <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 80811ca:	2000      	movs	r0, #0
 80811cc:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80811ce:	076b      	lsls	r3, r5, #29
 80811d0:	d503      	bpl.n	80811da <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80811d2:	2300      	movs	r3, #0
 80811d4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80811d6:	60a6      	str	r6, [r4, #8]
 80811d8:	e009      	b.n	80811ee <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80811da:	6860      	ldr	r0, [r4, #4]
 80811dc:	f104 020c 	add.w	r2, r4, #12
 80811e0:	6803      	ldr	r3, [r0, #0]
 80811e2:	4631      	mov	r1, r6
 80811e4:	681b      	ldr	r3, [r3, #0]
 80811e6:	4798      	blx	r3
 80811e8:	2800      	cmp	r0, #0
 80811ea:	d1f2      	bne.n	80811d2 <_ZN8FatCache4readEmh+0x1c>
 80811ec:	e7ed      	b.n	80811ca <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80811ee:	4620      	mov	r0, r4
 80811f0:	7823      	ldrb	r3, [r4, #0]
 80811f2:	f005 0503 	and.w	r5, r5, #3
 80811f6:	431d      	orrs	r5, r3
 80811f8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 80811fc:	bd70      	pop	{r4, r5, r6, pc}

080811fe <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80811fe:	7983      	ldrb	r3, [r0, #6]
 8081200:	3902      	subs	r1, #2
 8081202:	6940      	ldr	r0, [r0, #20]
 8081204:	4099      	lsls	r1, r3
}
 8081206:	4408      	add	r0, r1
 8081208:	4770      	bx	lr

0808120a <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808120a:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808120c:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808120e:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081210:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081212:	460c      	mov	r4, r1
 8081214:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081216:	d112      	bne.n	808123e <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081218:	6981      	ldr	r1, [r0, #24]
 808121a:	2202      	movs	r2, #2
 808121c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081220:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081224:	f7ff ffc7 	bl	80811b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081228:	b910      	cbnz	r0, 8081230 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 808122a:	f04f 30ff 	mov.w	r0, #4294967295
 808122e:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081230:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081234:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 808123c:	e00f      	b.n	808125e <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 808123e:	2b10      	cmp	r3, #16
 8081240:	d1f3      	bne.n	808122a <_ZN9FatVolume6fatGetEmPm+0x20>
 8081242:	6983      	ldr	r3, [r0, #24]
 8081244:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081248:	2202      	movs	r2, #2
 808124a:	4419      	add	r1, r3
 808124c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081250:	f7ff ffb1 	bl	80811b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081254:	2800      	cmp	r0, #0
 8081256:	d0e8      	beq.n	808122a <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081258:	b2e4      	uxtb	r4, r4
 808125a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808125e:	69ea      	ldr	r2, [r5, #28]
 8081260:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8081262:	bf9a      	itte	ls
 8081264:	6033      	strls	r3, [r6, #0]
  return 1;
 8081266:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081268:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 808126a:	bd70      	pop	{r4, r5, r6, pc}

0808126c <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808126c:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808126e:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081270:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081272:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081274:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081276:	d10f      	bne.n	8081298 <_ZN9FatVolume6fatPutEmm+0x2c>
 8081278:	6981      	ldr	r1, [r0, #24]
 808127a:	2203      	movs	r2, #3
 808127c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081280:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081284:	f7ff ff97 	bl	80811b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081288:	b908      	cbnz	r0, 808128e <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 808128a:	2000      	movs	r0, #0
 808128c:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 808128e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081292:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8081296:	e00f      	b.n	80812b8 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8081298:	2b10      	cmp	r3, #16
 808129a:	d1f6      	bne.n	808128a <_ZN9FatVolume6fatPutEmm+0x1e>
 808129c:	6983      	ldr	r3, [r0, #24]
 808129e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80812a2:	2203      	movs	r2, #3
 80812a4:	4419      	add	r1, r3
 80812a6:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80812aa:	f7ff ff84 	bl	80811b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80812ae:	2800      	cmp	r0, #0
 80812b0:	d0eb      	beq.n	808128a <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 80812b2:	b2e4      	uxtb	r4, r4
 80812b4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 80812b8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 80812ba:	bd38      	pop	{r3, r4, r5, pc}

080812bc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80812bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80812c0:	4605      	mov	r5, r0
 80812c2:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 80812c4:	460f      	mov	r7, r1
 80812c6:	b909      	cbnz	r1, 80812cc <_ZN9FatVolume15allocateClusterEmPm+0x10>
 80812c8:	68c6      	ldr	r6, [r0, #12]
 80812ca:	e000      	b.n	80812ce <_ZN9FatVolume15allocateClusterEmPm+0x12>
 80812cc:	460e      	mov	r6, r1
 80812ce:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 80812d0:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 80812d2:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 80812d4:	429c      	cmp	r4, r3
 80812d6:	bf88      	it	hi
 80812d8:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80812da:	aa01      	add	r2, sp, #4
 80812dc:	4621      	mov	r1, r4
 80812de:	4628      	mov	r0, r5
 80812e0:	f7ff ff93 	bl	808120a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80812e4:	2800      	cmp	r0, #0
 80812e6:	db0d      	blt.n	8081304 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80812e8:	d001      	beq.n	80812ee <_ZN9FatVolume15allocateClusterEmPm+0x32>
 80812ea:	9b01      	ldr	r3, [sp, #4]
 80812ec:	b113      	cbz	r3, 80812f4 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 80812ee:	42b4      	cmp	r4, r6
 80812f0:	d1ee      	bne.n	80812d0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80812f2:	e007      	b.n	8081304 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80812f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80812f8:	4621      	mov	r1, r4
 80812fa:	4628      	mov	r0, r5
 80812fc:	f7ff ffb6 	bl	808126c <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081300:	4606      	mov	r6, r0
 8081302:	b908      	cbnz	r0, 8081308 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8081304:	2600      	movs	r6, #0
 8081306:	e010      	b.n	808132a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081308:	b137      	cbz	r7, 8081318 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 808130a:	4622      	mov	r2, r4
 808130c:	4639      	mov	r1, r7
 808130e:	4628      	mov	r0, r5
 8081310:	f7ff ffac 	bl	808126c <_ZN9FatVolume6fatPutEmm>
 8081314:	b908      	cbnz	r0, 808131a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8081316:	e7f5      	b.n	8081304 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8081318:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 808131a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808131c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808131e:	bfa4      	itt	ge
 8081320:	f103 33ff 	addge.w	r3, r3, #4294967295
 8081324:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8081326:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 808132a:	4630      	mov	r0, r6
 808132c:	b002      	add	sp, #8
 808132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081332 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8081332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081334:	4604      	mov	r4, r0
 8081336:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8081338:	aa01      	add	r2, sp, #4
 808133a:	4629      	mov	r1, r5
 808133c:	4620      	mov	r0, r4
 808133e:	f7ff ff64 	bl	808120a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081342:	1e06      	subs	r6, r0, #0
 8081344:	da01      	bge.n	808134a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8081346:	2000      	movs	r0, #0
 8081348:	e012      	b.n	8081370 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808134a:	2200      	movs	r2, #0
 808134c:	4629      	mov	r1, r5
 808134e:	4620      	mov	r0, r4
 8081350:	f7ff ff8c 	bl	808126c <_ZN9FatVolume6fatPutEmm>
 8081354:	2800      	cmp	r0, #0
 8081356:	d0f6      	beq.n	8081346 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808135a:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808135c:	bfa4      	itt	ge
 808135e:	3301      	addge	r3, #1
 8081360:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8081362:	68e3      	ldr	r3, [r4, #12]
 8081364:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8081366:	bf38      	it	cc
 8081368:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 808136a:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 808136c:	2e00      	cmp	r6, #0
 808136e:	d1e3      	bne.n	8081338 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8081370:	b002      	add	sp, #8
 8081372:	bd70      	pop	{r4, r5, r6, pc}

08081374 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8081374:	b570      	push	{r4, r5, r6, lr}
 8081376:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8081378:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808137a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 808137c:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808137e:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8081382:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8081384:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8081386:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081388:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808138c:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 808138e:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081392:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8081396:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 808139a:	b1a1      	cbz	r1, 80813c6 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 808139c:	2904      	cmp	r1, #4
 808139e:	d860      	bhi.n	8081462 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80813a0:	4611      	mov	r1, r2
 80813a2:	3028      	adds	r0, #40	; 0x28
 80813a4:	f7ff ff07 	bl	80811b6 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80813a8:	2800      	cmp	r0, #0
 80813aa:	d05a      	beq.n	8081462 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80813ac:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80813b0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80813b4:	065b      	lsls	r3, r3, #25
 80813b6:	d154      	bne.n	8081462 <_ZN9FatVolume4initEh+0xee>
 80813b8:	351b      	adds	r5, #27
 80813ba:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80813be:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80813c2:	2d00      	cmp	r5, #0
 80813c4:	d04d      	beq.n	8081462 <_ZN9FatVolume4initEh+0xee>
 80813c6:	2200      	movs	r2, #0
 80813c8:	4629      	mov	r1, r5
 80813ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80813ce:	f7ff fef2 	bl	80811b6 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80813d2:	2800      	cmp	r0, #0
 80813d4:	d045      	beq.n	8081462 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80813d6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80813da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80813de:	d140      	bne.n	8081462 <_ZN9FatVolume4initEh+0xee>
 80813e0:	7c03      	ldrb	r3, [r0, #16]
 80813e2:	2b02      	cmp	r3, #2
 80813e4:	d13d      	bne.n	8081462 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 80813e6:	89c3      	ldrh	r3, [r0, #14]
 80813e8:	2b00      	cmp	r3, #0
 80813ea:	d03a      	beq.n	8081462 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80813ec:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80813ee:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80813f0:	1e4b      	subs	r3, r1, #1
 80813f2:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80813f4:	2300      	movs	r3, #0
 80813f6:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80813f8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80813fa:	2301      	movs	r3, #1
 80813fc:	428b      	cmp	r3, r1
 80813fe:	d007      	beq.n	8081410 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8081400:	3e01      	subs	r6, #1
 8081402:	d02e      	beq.n	8081462 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081404:	79a2      	ldrb	r2, [r4, #6]
 8081406:	005b      	lsls	r3, r3, #1
 8081408:	3201      	adds	r2, #1
 808140a:	b2db      	uxtb	r3, r3
 808140c:	71a2      	strb	r2, [r4, #6]
 808140e:	e7f5      	b.n	80813fc <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8081410:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8081412:	b902      	cbnz	r2, 8081416 <_ZN9FatVolume4initEh+0xa2>
 8081414:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8081416:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8081418:	89c6      	ldrh	r6, [r0, #14]
 808141a:	442e      	add	r6, r5
 808141c:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808141e:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081422:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081426:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081428:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 808142a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 808142e:	0152      	lsls	r2, r2, #5
 8081430:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8081434:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8081438:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 808143a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 808143e:	b903      	cbnz	r3, 8081442 <_ZN9FatVolume4initEh+0xce>
 8081440:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8081442:	1aad      	subs	r5, r5, r2
 8081444:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8081446:	79a5      	ldrb	r5, [r4, #6]
 8081448:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 808144c:	1c6b      	adds	r3, r5, #1
 808144e:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8081450:	f04f 33ff 	mov.w	r3, #4294967295
 8081454:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8081456:	f640 73f4 	movw	r3, #4084	; 0xff4
 808145a:	429d      	cmp	r5, r3
 808145c:	d803      	bhi.n	8081466 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 808145e:	230c      	movs	r3, #12
 8081460:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8081462:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8081464:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8081466:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 808146a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808146c:	bf89      	itett	hi
 808146e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8081470:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8081472:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8081474:	2320      	movhi	r3, #32
 8081476:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8081478:	2001      	movs	r0, #1

fail:
  return false;
}
 808147a:	bd70      	pop	{r4, r5, r6, pc}

0808147c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 808147c:	f000 bb98 	b.w	8081bb0 <HAL_Pin_Map>

08081480 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8081480:	f000 bb96 	b.w	8081bb0 <HAL_Pin_Map>

08081484 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8081484:	f000 bb94 	b.w	8081bb0 <HAL_Pin_Map>

08081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8081488:	6803      	ldr	r3, [r0, #0]
 808148a:	695b      	ldr	r3, [r3, #20]
 808148c:	4718      	bx	r3

0808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808148e:	6803      	ldr	r3, [r0, #0]
 8081490:	68db      	ldr	r3, [r3, #12]
 8081492:	4718      	bx	r3

08081494 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081494:	b510      	push	{r4, lr}
  if (!m_selected) {
 8081496:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081498:	4604      	mov	r4, r0
  if (!m_selected) {
 808149a:	b16b      	cbz	r3, 80814b8 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 808149c:	2101      	movs	r1, #1
 808149e:	7940      	ldrb	r0, [r0, #5]
 80814a0:	f001 fa57 	bl	8082952 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 80814a4:	21ff      	movs	r1, #255	; 0xff
 80814a6:	6820      	ldr	r0, [r4, #0]
 80814a8:	f7ff ffee 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80814ac:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80814ae:	6803      	ldr	r3, [r0, #0]
 80814b0:	689b      	ldr	r3, [r3, #8]
 80814b2:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 80814b4:	2300      	movs	r3, #0
 80814b6:	7123      	strb	r3, [r4, #4]
 80814b8:	bd10      	pop	{r4, pc}

080814ba <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80814ba:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 80814bc:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80814be:	4604      	mov	r4, r0
  if (m_selected) {
 80814c0:	b955      	cbnz	r5, 80814d8 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 80814c2:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80814c4:	79e1      	ldrb	r1, [r4, #7]
 80814c6:	6803      	ldr	r3, [r0, #0]
 80814c8:	685b      	ldr	r3, [r3, #4]
 80814ca:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 80814cc:	4629      	mov	r1, r5
 80814ce:	7960      	ldrb	r0, [r4, #5]
 80814d0:	f001 fa3f 	bl	8082952 <digitalWrite>
  m_selected = true;
 80814d4:	2301      	movs	r3, #1
 80814d6:	7123      	strb	r3, [r4, #4]
 80814d8:	bd38      	pop	{r3, r4, r5, pc}

080814da <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80814da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80814dc:	4604      	mov	r4, r0
 80814de:	460d      	mov	r5, r1
 80814e0:	4616      	mov	r6, r2
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80814e2:	f000 fbe5 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
 80814e6:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80814e8:	6820      	ldr	r0, [r4, #0]
 80814ea:	f7ff ffd0 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80814ee:	28ff      	cmp	r0, #255	; 0xff
 80814f0:	7220      	strb	r0, [r4, #8]
 80814f2:	d107      	bne.n	8081504 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 80814f4:	f000 fbdc 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80814f8:	1bc0      	subs	r0, r0, r7
 80814fa:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80814fe:	d9f3      	bls.n	80814e8 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8081500:	2311      	movs	r3, #17
 8081502:	e00c      	b.n	808151e <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8081504:	28fe      	cmp	r0, #254	; 0xfe
 8081506:	d001      	beq.n	808150c <_ZN9SdSpiCard8readDataEPhj+0x32>
 8081508:	230f      	movs	r3, #15
 808150a:	e008      	b.n	808151e <_ZN9SdSpiCard8readDataEPhj+0x44>
 808150c:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 808150e:	4632      	mov	r2, r6
 8081510:	6803      	ldr	r3, [r0, #0]
 8081512:	4629      	mov	r1, r5
 8081514:	691b      	ldr	r3, [r3, #16]
 8081516:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8081518:	7220      	strb	r0, [r4, #8]
 808151a:	b130      	cbz	r0, 808152a <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808151c:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 808151e:	4620      	mov	r0, r4
 8081520:	71a3      	strb	r3, [r4, #6]
 8081522:	f7ff ffb7 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081526:	2000      	movs	r0, #0
}
 8081528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 808152a:	6820      	ldr	r0, [r4, #0]
 808152c:	f7ff ffaf 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8081530:	6820      	ldr	r0, [r4, #0]
 8081532:	f7ff ffac 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081536:	2001      	movs	r0, #1
 8081538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808153a <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 808153a:	b570      	push	{r4, r5, r6, lr}
 808153c:	4606      	mov	r6, r0
 808153e:	460c      	mov	r4, r1
 8081540:	f000 fbb6 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
 8081544:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8081546:	6830      	ldr	r0, [r6, #0]
 8081548:	f7ff ffa1 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808154c:	28ff      	cmp	r0, #255	; 0xff
 808154e:	d006      	beq.n	808155e <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8081550:	f000 fbae 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8081554:	1b40      	subs	r0, r0, r5
 8081556:	42a0      	cmp	r0, r4
 8081558:	d3f5      	bcc.n	8081546 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 808155a:	2000      	movs	r0, #0
 808155c:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 808155e:	2001      	movs	r0, #1

fail:
  return false;
}
 8081560:	bd70      	pop	{r4, r5, r6, pc}

08081562 <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8081562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8081564:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8081566:	4604      	mov	r4, r0
 8081568:	460d      	mov	r5, r1
 808156a:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 808156c:	b90b      	cbnz	r3, 8081572 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 808156e:	f7ff ffa4 	bl	80814ba <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8081572:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081576:	4620      	mov	r0, r4
 8081578:	f7ff ffdf 	bl	808153a <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 808157c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8081580:	6820      	ldr	r0, [r4, #0]
 8081582:	f7ff ff81 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8081586:	f10d 0607 	add.w	r6, sp, #7
 808158a:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 808158e:	f816 1901 	ldrb.w	r1, [r6], #-1
 8081592:	6820      	ldr	r0, [r4, #0]
 8081594:	f7ff ff78 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8081598:	42be      	cmp	r6, r7
 808159a:	d1f8      	bne.n	808158e <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808159c:	2d00      	cmp	r5, #0
 808159e:	bf0c      	ite	eq
 80815a0:	2195      	moveq	r1, #149	; 0x95
 80815a2:	2187      	movne	r1, #135	; 0x87
 80815a4:	6820      	ldr	r0, [r4, #0]
 80815a6:	f7ff ff6f 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 80815aa:	2d0c      	cmp	r5, #12
 80815ac:	d102      	bne.n	80815b4 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 80815ae:	6820      	ldr	r0, [r4, #0]
 80815b0:	f7ff ff6d 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80815b4:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 80815b6:	6820      	ldr	r0, [r4, #0]
 80815b8:	f7ff ff69 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80815bc:	0603      	lsls	r3, r0, #24
 80815be:	7220      	strb	r0, [r4, #8]
 80815c0:	d503      	bpl.n	80815ca <_ZN9SdSpiCard11cardCommandEhm+0x68>
 80815c2:	3501      	adds	r5, #1
 80815c4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80815c8:	d1f5      	bne.n	80815b6 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 80815ca:	b003      	add	sp, #12
 80815cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080815ce <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 80815ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815d0:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 80815d2:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 80815d4:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 80815d6:	7243      	strb	r3, [r0, #9]
 80815d8:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 80815da:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 80815dc:	4604      	mov	r4, r0
 80815de:	f000 fb67 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
 80815e2:	4606      	mov	r6, r0
 80815e4:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80815e6:	7961      	ldrb	r1, [r4, #5]
 80815e8:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80815ea:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80815ec:	681b      	ldr	r3, [r3, #0]
 80815ee:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 80815f0:	2180      	movs	r1, #128	; 0x80
 80815f2:	6820      	ldr	r0, [r4, #0]
 80815f4:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80815f6:	6803      	ldr	r3, [r0, #0]
 80815f8:	685b      	ldr	r3, [r3, #4]
 80815fa:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 80815fc:	21ff      	movs	r1, #255	; 0xff
 80815fe:	6820      	ldr	r0, [r4, #0]
 8081600:	3d01      	subs	r5, #1
 8081602:	f7ff ff41 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8081606:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 808160a:	d1f7      	bne.n	80815fc <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 808160c:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 808160e:	6803      	ldr	r3, [r0, #0]
 8081610:	689b      	ldr	r3, [r3, #8]
 8081612:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8081614:	2200      	movs	r2, #0
 8081616:	4611      	mov	r1, r2
 8081618:	4620      	mov	r0, r4
 808161a:	f7ff ffa2 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 808161e:	2801      	cmp	r0, #1
 8081620:	d007      	beq.n	8081632 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 8081622:	f000 fb45 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8081626:	1b80      	subs	r0, r0, r6
 8081628:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808162c:	d9f2      	bls.n	8081614 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808162e:	2301      	movs	r3, #1
 8081630:	e048      	b.n	80816c4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8081632:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8081636:	2108      	movs	r1, #8
 8081638:	4620      	mov	r0, r4
 808163a:	f7ff ff92 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 808163e:	2805      	cmp	r0, #5
 8081640:	d101      	bne.n	8081646 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8081642:	2301      	movs	r3, #1
 8081644:	e00b      	b.n	808165e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8081646:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8081648:	6820      	ldr	r0, [r4, #0]
 808164a:	f7ff ff20 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808164e:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8081650:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8081654:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8081656:	d1f7      	bne.n	8081648 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8081658:	28aa      	cmp	r0, #170	; 0xaa
 808165a:	d108      	bne.n	808166e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 808165c:	2302      	movs	r3, #2
 808165e:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8081660:	7a63      	ldrb	r3, [r4, #9]
 8081662:	2b02      	cmp	r3, #2
 8081664:	bf0c      	ite	eq
 8081666:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 808166a:	2500      	movne	r5, #0
 808166c:	e007      	b.n	808167e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 808166e:	f000 fb1f 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8081672:	1b80      	subs	r0, r0, r6
 8081674:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8081678:	d9db      	bls.n	8081632 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808167a:	2302      	movs	r3, #2
 808167c:	e022      	b.n	80816c4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 808167e:	2200      	movs	r2, #0
 8081680:	2137      	movs	r1, #55	; 0x37
 8081682:	4620      	mov	r0, r4
 8081684:	f7ff ff6d 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8081688:	462a      	mov	r2, r5
 808168a:	2129      	movs	r1, #41	; 0x29
 808168c:	4620      	mov	r0, r4
 808168e:	f7ff ff68 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8081692:	4602      	mov	r2, r0
 8081694:	b138      	cbz	r0, 80816a6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8081696:	f000 fb0b 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 808169a:	1b80      	subs	r0, r0, r6
 808169c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80816a0:	d9ed      	bls.n	808167e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80816a2:	230a      	movs	r3, #10
 80816a4:	e00e      	b.n	80816c4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 80816a6:	7a63      	ldrb	r3, [r4, #9]
 80816a8:	2b02      	cmp	r3, #2
 80816aa:	d005      	beq.n	80816b8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 80816ac:	4620      	mov	r0, r4
 80816ae:	f7ff fef1 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 80816b2:	71e7      	strb	r7, [r4, #7]
  return true;
 80816b4:	2001      	movs	r0, #1
 80816b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 80816b8:	213a      	movs	r1, #58	; 0x3a
 80816ba:	4620      	mov	r0, r4
 80816bc:	f7ff ff51 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 80816c0:	b130      	cbz	r0, 80816d0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 80816c2:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 80816c4:	4620      	mov	r0, r4
 80816c6:	71a3      	strb	r3, [r4, #6]
 80816c8:	f7ff fee4 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80816cc:	2000      	movs	r0, #0
}
 80816ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 80816d0:	6820      	ldr	r0, [r4, #0]
 80816d2:	f7ff fedc 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80816d6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80816da:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 80816dc:	bf04      	itt	eq
 80816de:	2303      	moveq	r3, #3
 80816e0:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 80816e2:	6820      	ldr	r0, [r4, #0]
 80816e4:	f7ff fed3 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80816e8:	6820      	ldr	r0, [r4, #0]
 80816ea:	f7ff fed0 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80816ee:	6820      	ldr	r0, [r4, #0]
 80816f0:	f7ff fecd 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80816f4:	e7da      	b.n	80816ac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

080816f6 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80816f6:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80816f8:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80816fa:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80816fc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80816fe:	bf18      	it	ne
 8081700:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081702:	460a      	mov	r2, r1
 8081704:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081706:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081708:	f7ff ff2b 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 808170c:	b110      	cbz	r0, 8081714 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808170e:	2304      	movs	r3, #4
 8081710:	71a3      	strb	r3, [r4, #6]
 8081712:	e00b      	b.n	808172c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8081714:	4629      	mov	r1, r5
 8081716:	f44f 7200 	mov.w	r2, #512	; 0x200
 808171a:	4620      	mov	r0, r4
 808171c:	f7ff fedd 	bl	80814da <_ZN9SdSpiCard8readDataEPhj>
 8081720:	4605      	mov	r5, r0
 8081722:	b118      	cbz	r0, 808172c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8081724:	4620      	mov	r0, r4
 8081726:	f7ff feb5 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808172a:	e003      	b.n	8081734 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 808172c:	4620      	mov	r0, r4
 808172e:	f7ff feb1 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081732:	2500      	movs	r5, #0
}
 8081734:	4628      	mov	r0, r5
 8081736:	bd38      	pop	{r3, r4, r5, pc}

08081738 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081738:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808173a:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808173c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808173e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081740:	bf18      	it	ne
 8081742:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081744:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8081746:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8081748:	f7ff ff0b 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 808174c:	b130      	cbz	r0, 808175c <_ZN9SdSpiCard9readStartEm+0x24>
 808174e:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8081750:	4620      	mov	r0, r4
 8081752:	71a3      	strb	r3, [r4, #6]
 8081754:	f7ff fe9e 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081758:	2000      	movs	r0, #0
 808175a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 808175c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808175e:	bd10      	pop	{r4, pc}

08081760 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081760:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8081762:	2200      	movs	r2, #0
 8081764:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8081766:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8081768:	f7ff fefb 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 808176c:	b130      	cbz	r0, 808177c <_ZN9SdSpiCard8readStopEv+0x1c>
 808176e:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8081770:	4620      	mov	r0, r4
 8081772:	71a3      	strb	r3, [r4, #6]
 8081774:	f7ff fe8e 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081778:	2000      	movs	r0, #0
 808177a:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 808177c:	4620      	mov	r0, r4
 808177e:	f7ff fe89 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081782:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8081784:	bd10      	pop	{r4, pc}

08081786 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8081786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081788:	4605      	mov	r5, r0
 808178a:	4616      	mov	r6, r2
 808178c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808178e:	f7ff ffd3 	bl	8081738 <_ZN9SdSpiCard9readStartEm>
 8081792:	b198      	cbz	r0, 80817bc <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8081794:	2400      	movs	r4, #0
 8081796:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8081798:	429f      	cmp	r7, r3
 808179a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 808179e:	d908      	bls.n	80817b2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80817a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80817a4:	4628      	mov	r0, r5
 80817a6:	f7ff fe98 	bl	80814da <_ZN9SdSpiCard8readDataEPhj>
 80817aa:	3401      	adds	r4, #1
 80817ac:	2800      	cmp	r0, #0
 80817ae:	d1f2      	bne.n	8081796 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80817b0:	e004      	b.n	80817bc <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 80817b2:	4628      	mov	r0, r5
}
 80817b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 80817b8:	f7ff bfd2 	b.w	8081760 <_ZN9SdSpiCard8readStopEv>
}
 80817bc:	2000      	movs	r0, #0
 80817be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080817c0 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80817c0:	b538      	push	{r3, r4, r5, lr}
 80817c2:	4604      	mov	r4, r0
 80817c4:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 80817c6:	6800      	ldr	r0, [r0, #0]
 80817c8:	f7ff fe5e 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80817cc:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 80817ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80817d2:	6803      	ldr	r3, [r0, #0]
 80817d4:	4629      	mov	r1, r5
 80817d6:	699b      	ldr	r3, [r3, #24]
 80817d8:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 80817da:	21ff      	movs	r1, #255	; 0xff
 80817dc:	6820      	ldr	r0, [r4, #0]
 80817de:	f7ff fe53 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 80817e2:	21ff      	movs	r1, #255	; 0xff
 80817e4:	6820      	ldr	r0, [r4, #0]
 80817e6:	f7ff fe4f 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 80817ea:	6820      	ldr	r0, [r4, #0]
 80817ec:	f7ff fe4f 	bl	808148e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80817f0:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80817f2:	f000 001f 	and.w	r0, r0, #31
 80817f6:	2805      	cmp	r0, #5
 80817f8:	d006      	beq.n	8081808 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80817fa:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80817fc:	4620      	mov	r0, r4
 80817fe:	71a3      	strb	r3, [r4, #6]
 8081800:	f7ff fe48 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081804:	2000      	movs	r0, #0
 8081806:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8081808:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808180a:	bd38      	pop	{r3, r4, r5, pc}

0808180c <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808180c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808180e:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8081810:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081812:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081814:	bf18      	it	ne
 8081816:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8081818:	460a      	mov	r2, r1
 808181a:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808181c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 808181e:	f7ff fea0 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 8081822:	b110      	cbz	r0, 808182a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8081824:	2306      	movs	r3, #6
 8081826:	71a3      	strb	r3, [r4, #6]
 8081828:	e00a      	b.n	8081840 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 808182a:	462a      	mov	r2, r5
 808182c:	21fe      	movs	r1, #254	; 0xfe
 808182e:	4620      	mov	r0, r4
 8081830:	f7ff ffc6 	bl	80817c0 <_ZN9SdSpiCard9writeDataEhPKh>
 8081834:	4605      	mov	r5, r0
 8081836:	b118      	cbz	r0, 8081840 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8081838:	4620      	mov	r0, r4
 808183a:	f7ff fe2b 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808183e:	e003      	b.n	8081848 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8081840:	4620      	mov	r0, r4
 8081842:	f7ff fe27 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081846:	2500      	movs	r5, #0
}
 8081848:	4628      	mov	r0, r5
 808184a:	bd38      	pop	{r3, r4, r5, pc}

0808184c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 808184c:	b570      	push	{r4, r5, r6, lr}
 808184e:	4604      	mov	r4, r0
 8081850:	460d      	mov	r5, r1
  bool selected = m_selected;
 8081852:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8081854:	f7ff fe31 	bl	80814ba <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081858:	f44f 7116 	mov.w	r1, #600	; 0x258
 808185c:	4620      	mov	r0, r4
 808185e:	f7ff fe6c 	bl	808153a <_ZN9SdSpiCard11waitNotBusyEt>
 8081862:	b910      	cbnz	r0, 808186a <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8081864:	2317      	movs	r3, #23
 8081866:	71a3      	strb	r3, [r4, #6]
 8081868:	e00b      	b.n	8081882 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808186a:	462a      	mov	r2, r5
 808186c:	21fc      	movs	r1, #252	; 0xfc
 808186e:	4620      	mov	r0, r4
 8081870:	f7ff ffa6 	bl	80817c0 <_ZN9SdSpiCard9writeDataEhPKh>
 8081874:	4605      	mov	r5, r0
 8081876:	b120      	cbz	r0, 8081882 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8081878:	b93e      	cbnz	r6, 808188a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 808187a:	4620      	mov	r0, r4
 808187c:	f7ff fe0a 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
 8081880:	e003      	b.n	808188a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8081882:	4620      	mov	r0, r4
 8081884:	f7ff fe06 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081888:	2500      	movs	r5, #0
}
 808188a:	4628      	mov	r0, r5
 808188c:	bd70      	pop	{r4, r5, r6, pc}

0808188e <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808188e:	b570      	push	{r4, r5, r6, lr}
 8081890:	4604      	mov	r4, r0
 8081892:	4616      	mov	r6, r2
 8081894:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8081896:	2200      	movs	r2, #0
 8081898:	2137      	movs	r1, #55	; 0x37
 808189a:	f7ff fe62 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808189e:	4632      	mov	r2, r6
 80818a0:	2117      	movs	r1, #23
 80818a2:	4620      	mov	r0, r4
 80818a4:	f7ff fe5d 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 80818a8:	b108      	cbz	r0, 80818ae <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80818aa:	2309      	movs	r3, #9
 80818ac:	e00a      	b.n	80818c4 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80818ae:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 80818b0:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80818b2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80818b4:	bf18      	it	ne
 80818b6:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80818b8:	462a      	mov	r2, r5
 80818ba:	4620      	mov	r0, r4
 80818bc:	f7ff fe51 	bl	8081562 <_ZN9SdSpiCard11cardCommandEhm>
 80818c0:	b130      	cbz	r0, 80818d0 <_ZN9SdSpiCard10writeStartEmm+0x42>
 80818c2:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80818c4:	4620      	mov	r0, r4
 80818c6:	71a3      	strb	r3, [r4, #6]
 80818c8:	f7ff fde4 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80818cc:	2000      	movs	r0, #0
 80818ce:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 80818d0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80818d2:	bd70      	pop	{r4, r5, r6, pc}

080818d4 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80818d4:	b538      	push	{r3, r4, r5, lr}
 80818d6:	4604      	mov	r4, r0
  chipSelectLow();
 80818d8:	f7ff fdef 	bl	80814ba <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80818dc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80818e0:	4620      	mov	r0, r4
 80818e2:	f7ff fe2a 	bl	808153a <_ZN9SdSpiCard11waitNotBusyEt>
 80818e6:	b170      	cbz	r0, 8081906 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 80818e8:	21fd      	movs	r1, #253	; 0xfd
 80818ea:	6820      	ldr	r0, [r4, #0]
 80818ec:	f7ff fdcc 	bl	8081488 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80818f0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80818f4:	4620      	mov	r0, r4
 80818f6:	f7ff fe20 	bl	808153a <_ZN9SdSpiCard11waitNotBusyEt>
 80818fa:	4605      	mov	r5, r0
 80818fc:	b118      	cbz	r0, 8081906 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 80818fe:	4620      	mov	r0, r4
 8081900:	f7ff fdc8 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081904:	e005      	b.n	8081912 <_ZN9SdSpiCard9writeStopEv+0x3e>
 8081906:	2312      	movs	r3, #18
 8081908:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 808190a:	4620      	mov	r0, r4
 808190c:	f7ff fdc2 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081910:	2500      	movs	r5, #0
}
 8081912:	4628      	mov	r0, r5
 8081914:	bd38      	pop	{r3, r4, r5, pc}

08081916 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8081916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081918:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808191a:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808191c:	4605      	mov	r5, r0
 808191e:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8081920:	f7ff ffb5 	bl	808188e <_ZN9SdSpiCard10writeStartEmm>
 8081924:	b170      	cbz	r0, 8081944 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8081926:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081928:	42b4      	cmp	r4, r6
 808192a:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808192e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081930:	d004      	beq.n	808193c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8081932:	f7ff ff8b 	bl	808184c <_ZN9SdSpiCard9writeDataEPKh>
 8081936:	b128      	cbz	r0, 8081944 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081938:	3401      	adds	r4, #1
 808193a:	e7f5      	b.n	8081928 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 808193c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8081940:	f7ff bfc8 	b.w	80818d4 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8081944:	4628      	mov	r0, r5
 8081946:	f7ff fda5 	bl	8081494 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 808194a:	2000      	movs	r0, #0
 808194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808194e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 808194e:	f000 b92f 	b.w	8081bb0 <HAL_Pin_Map>

08081952 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 8081952:	f000 b92d 	b.w	8081bb0 <HAL_Pin_Map>

08081956 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 8081956:	f000 b92b 	b.w	8081bb0 <HAL_Pin_Map>
	...

0808195c <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 808195c:	4b01      	ldr	r3, [pc, #4]	; (8081964 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 808195e:	2201      	movs	r2, #1
 8081960:	701a      	strb	r2, [r3, #0]
 8081962:	4770      	bx	lr
 8081964:	2000093c 	.word	0x2000093c

08081968 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8081968:	4770      	bx	lr
	...

0808196c <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 808196c:	7902      	ldrb	r2, [r0, #4]
 808196e:	4b02      	ldr	r3, [pc, #8]	; (8081978 <_ZN5SdSpi5beginEh+0xc>)
 8081970:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8081974:	f000 bb14 	b.w	8081fa0 <_ZN8SPIClass5beginEt>
 8081978:	08083c1c 	.word	0x08083c1c

0808197c <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 808197c:	b570      	push	{r4, r5, r6, lr}
 808197e:	4606      	mov	r6, r0
 8081980:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8081982:	7903      	ldrb	r3, [r0, #4]
 8081984:	4d1a      	ldr	r5, [pc, #104]	; (80819f0 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8081986:	2101      	movs	r1, #1
 8081988:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808198c:	f000 fb0e 	bl	8081fac <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8081990:	7933      	ldrb	r3, [r6, #4]
 8081992:	2100      	movs	r1, #0
 8081994:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8081998:	f000 fb0b 	bl	8081fb2 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 808199c:	2c02      	cmp	r4, #2
 808199e:	d90c      	bls.n	80819ba <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 80819a0:	2c04      	cmp	r4, #4
 80819a2:	d90c      	bls.n	80819be <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 80819a4:	2c08      	cmp	r4, #8
 80819a6:	d90c      	bls.n	80819c2 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 80819a8:	2c10      	cmp	r4, #16
 80819aa:	d90c      	bls.n	80819c6 <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 80819ac:	2c20      	cmp	r4, #32
 80819ae:	d90c      	bls.n	80819ca <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 80819b0:	2c41      	cmp	r4, #65	; 0x41
 80819b2:	bf34      	ite	cc
 80819b4:	2128      	movcc	r1, #40	; 0x28
 80819b6:	2130      	movcs	r1, #48	; 0x30
 80819b8:	e008      	b.n	80819cc <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 80819ba:	2100      	movs	r1, #0
 80819bc:	e006      	b.n	80819cc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 80819be:	2108      	movs	r1, #8
 80819c0:	e004      	b.n	80819cc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 80819c2:	2110      	movs	r1, #16
 80819c4:	e002      	b.n	80819cc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 80819c6:	2118      	movs	r1, #24
 80819c8:	e000      	b.n	80819cc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 80819ca:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 80819cc:	7933      	ldrb	r3, [r6, #4]
 80819ce:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80819d2:	f000 fb37 	bl	8082044 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 80819d6:	2318      	movs	r3, #24
 80819d8:	fb03 f104 	mul.w	r1, r3, r4
 80819dc:	7932      	ldrb	r2, [r6, #4]
 80819de:	233c      	movs	r3, #60	; 0x3c
 80819e0:	fb02 1101 	mla	r1, r2, r1, r1
 80819e4:	fb91 f1f3 	sdiv	r1, r1, r3
 80819e8:	4b02      	ldr	r3, [pc, #8]	; (80819f4 <_ZN5SdSpi16beginTransactionEh+0x78>)
 80819ea:	6019      	str	r1, [r3, #0]
 80819ec:	bd70      	pop	{r4, r5, r6, pc}
 80819ee:	bf00      	nop
 80819f0:	08083c1c 	.word	0x08083c1c
 80819f4:	20000940 	.word	0x20000940

080819f8 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 80819f8:	7902      	ldrb	r2, [r0, #4]
 80819fa:	4b03      	ldr	r3, [pc, #12]	; (8081a08 <_ZN5SdSpi7receiveEv+0x10>)
 80819fc:	21ff      	movs	r1, #255	; 0xff
 80819fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8081a02:	f000 bb33 	b.w	808206c <_ZN8SPIClass8transferEh>
 8081a06:	bf00      	nop
 8081a08:	08083c1c 	.word	0x08083c1c

08081a0c <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8081a0c:	7902      	ldrb	r2, [r0, #4]
 8081a0e:	4b02      	ldr	r3, [pc, #8]	; (8081a18 <_ZN5SdSpi4sendEh+0xc>)
 8081a10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8081a14:	f000 bb2a 	b.w	808206c <_ZN8SPIClass8transferEh>
 8081a18:	08083c1c 	.word	0x08083c1c

08081a1c <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8081a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081a1e:	4b0c      	ldr	r3, [pc, #48]	; (8081a50 <_ZN5SdSpi7receiveEPhj+0x34>)
 8081a20:	7906      	ldrb	r6, [r0, #4]
 8081a22:	480c      	ldr	r0, [pc, #48]	; (8081a54 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081a24:	2500      	movs	r5, #0
 8081a26:	4c0c      	ldr	r4, [pc, #48]	; (8081a58 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081a28:	9300      	str	r3, [sp, #0]
 8081a2a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8081a2e:	4613      	mov	r3, r2
 8081a30:	460a      	mov	r2, r1
 8081a32:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081a34:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081a36:	f000 fb1f 	bl	8082078 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8081a3a:	7823      	ldrb	r3, [r4, #0]
 8081a3c:	2b00      	cmp	r3, #0
 8081a3e:	d0fc      	beq.n	8081a3a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8081a40:	4b06      	ldr	r3, [pc, #24]	; (8081a5c <_ZN5SdSpi7receiveEPhj+0x40>)
 8081a42:	6818      	ldr	r0, [r3, #0]
 8081a44:	b108      	cbz	r0, 8081a4a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081a46:	f000 f92b 	bl	8081ca0 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8081a4a:	2000      	movs	r0, #0
 8081a4c:	b002      	add	sp, #8
 8081a4e:	bd70      	pop	{r4, r5, r6, pc}
 8081a50:	0808195d 	.word	0x0808195d
 8081a54:	08083c1c 	.word	0x08083c1c
 8081a58:	2000093c 	.word	0x2000093c
 8081a5c:	20000940 	.word	0x20000940

08081a60 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8081a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081a62:	4b0d      	ldr	r3, [pc, #52]	; (8081a98 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8081a64:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8081a66:	480d      	ldr	r0, [pc, #52]	; (8081a9c <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081a68:	2500      	movs	r5, #0
 8081a6a:	4c0d      	ldr	r4, [pc, #52]	; (8081aa0 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081a6c:	9300      	str	r3, [sp, #0]
 8081a6e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8081a72:	4613      	mov	r3, r2
 8081a74:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081a76:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8081a78:	f000 fafe 	bl	8082078 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8081a7c:	7823      	ldrb	r3, [r4, #0]
 8081a7e:	2b00      	cmp	r3, #0
 8081a80:	d0fc      	beq.n	8081a7c <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8081a82:	4b08      	ldr	r3, [pc, #32]	; (8081aa4 <_ZN5SdSpi4sendEPKhj+0x44>)
 8081a84:	6818      	ldr	r0, [r3, #0]
 8081a86:	b120      	cbz	r0, 8081a92 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8081a88:	b002      	add	sp, #8
 8081a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081a8e:	f000 b907 	b.w	8081ca0 <HAL_Delay_Microseconds>
 8081a92:	b002      	add	sp, #8
 8081a94:	bd70      	pop	{r4, r5, r6, pc}
 8081a96:	bf00      	nop
 8081a98:	0808195d 	.word	0x0808195d
 8081a9c:	08083c1c 	.word	0x08083c1c
 8081aa0:	2000093c 	.word	0x2000093c
 8081aa4:	20000940 	.word	0x20000940

08081aa8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8081aa8:	f000 b882 	b.w	8081bb0 <HAL_Pin_Map>

08081aac <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 8081aac:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081aae:	f000 f8ff 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081ab2:	4b01      	ldr	r3, [pc, #4]	; (8081ab8 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 8081ab4:	6018      	str	r0, [r3, #0]
 8081ab6:	bd08      	pop	{r3, pc}
 8081ab8:	20000e50 	.word	0x20000e50

08081abc <_ZN9SdFatBase10errorPrintEP5Print>:
void SdFatBase::errorHalt(Print* pr, char const* msg) {
  errorPrint(pr, msg);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr) {
 8081abc:	b538      	push	{r3, r4, r5, lr}
  if (!cardErrorCode()) {
 8081abe:	f890 346a 	ldrb.w	r3, [r0, #1130]	; 0x46a
void SdFatBase::errorHalt(Print* pr, char const* msg) {
  errorPrint(pr, msg);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr) {
 8081ac2:	4605      	mov	r5, r0
 8081ac4:	460c      	mov	r4, r1
  if (!cardErrorCode()) {
 8081ac6:	b1ab      	cbz	r3, 8081af4 <_ZN9SdFatBase10errorPrintEP5Print+0x38>
    return;
  }
  pr->print(F("SD errorCode: 0X"));
 8081ac8:	490b      	ldr	r1, [pc, #44]	; (8081af8 <_ZN9SdFatBase10errorPrintEP5Print+0x3c>)
 8081aca:	4620      	mov	r0, r4
 8081acc:	f000 fb20 	bl	8082110 <_ZN5Print5printEPKc>
  pr->print(cardErrorCode(), HEX);
 8081ad0:	2210      	movs	r2, #16
 8081ad2:	f895 146a 	ldrb.w	r1, [r5, #1130]	; 0x46a
 8081ad6:	4620      	mov	r0, r4
 8081ad8:	f000 fb61 	bl	808219e <_ZN5Print5printEhi>
  pr->print(F(",0X"));
 8081adc:	4907      	ldr	r1, [pc, #28]	; (8081afc <_ZN9SdFatBase10errorPrintEP5Print+0x40>)
 8081ade:	4620      	mov	r0, r4
 8081ae0:	f000 fb16 	bl	8082110 <_ZN5Print5printEPKc>
  pr->println(cardErrorData(), HEX);
 8081ae4:	f895 146c 	ldrb.w	r1, [r5, #1132]	; 0x46c
 8081ae8:	4620      	mov	r0, r4
}
 8081aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return;
  }
  pr->print(F("SD errorCode: 0X"));
  pr->print(cardErrorCode(), HEX);
  pr->print(F(",0X"));
  pr->println(cardErrorData(), HEX);
 8081aee:	2210      	movs	r2, #16
 8081af0:	f000 bb57 	b.w	80821a2 <_ZN5Print7printlnEhi>
 8081af4:	bd38      	pop	{r3, r4, r5, pc}
 8081af6:	bf00      	nop
 8081af8:	08083c4c 	.word	0x08083c4c
 8081afc:	08083c5d 	.word	0x08083c5d

08081b00 <_ZN9SdFatBase10errorPrintEP5PrintPKc>:
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr, char const* msg) {
 8081b00:	b570      	push	{r4, r5, r6, lr}
 8081b02:	460c      	mov	r4, r1
 8081b04:	4616      	mov	r6, r2
 8081b06:	4605      	mov	r5, r0
  pr->print(F("error: "));
 8081b08:	4906      	ldr	r1, [pc, #24]	; (8081b24 <_ZN9SdFatBase10errorPrintEP5PrintPKc+0x24>)
 8081b0a:	4620      	mov	r0, r4
 8081b0c:	f000 fb00 	bl	8082110 <_ZN5Print5printEPKc>
  pr->println(msg);
 8081b10:	4631      	mov	r1, r6
 8081b12:	4620      	mov	r0, r4
 8081b14:	f000 fb0f 	bl	8082136 <_ZN5Print7printlnEPKc>
  errorPrint(pr);
 8081b18:	4621      	mov	r1, r4
 8081b1a:	4628      	mov	r0, r5
}
 8081b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr, char const* msg) {
  pr->print(F("error: "));
  pr->println(msg);
  errorPrint(pr);
 8081b20:	f7ff bfcc 	b.w	8081abc <_ZN9SdFatBase10errorPrintEP5Print>
 8081b24:	08083c61 	.word	0x08083c61

08081b28 <_ZN9SdFatBase9errorHaltEP5PrintPKc>:
void SdFatBase::errorHalt(Print* pr) {
  errorPrint(pr);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorHalt(Print* pr, char const* msg) {
 8081b28:	b508      	push	{r3, lr}
  errorPrint(pr, msg);
 8081b2a:	f7ff ffe9 	bl	8081b00 <_ZN9SdFatBase10errorPrintEP5PrintPKc>
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8081b2e:	f7ff ffbd 	bl	8081aac <_ZN19ApplicationWatchdog7checkinEv>
 8081b32:	f000 f9e9 	bl	8081f08 <spark_process>
 8081b36:	e7fa      	b.n	8081b2e <_ZN9SdFatBase9errorHaltEP5PrintPKc+0x6>

08081b38 <_ZN9SdFatBase14initErrorPrintEP5Print>:
void SdFatBase::initErrorHalt(Print* pr, char const *msg) {
  pr->println(msg);
  initErrorHalt(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorPrint(Print* pr) {
 8081b38:	b538      	push	{r3, r4, r5, lr}
  if (cardErrorCode()) {
 8081b3a:	f890 346a 	ldrb.w	r3, [r0, #1130]	; 0x46a
void SdFatBase::initErrorHalt(Print* pr, char const *msg) {
  pr->println(msg);
  initErrorHalt(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorPrint(Print* pr) {
 8081b3e:	4605      	mov	r5, r0
 8081b40:	460c      	mov	r4, r1
  if (cardErrorCode()) {
 8081b42:	b18b      	cbz	r3, 8081b68 <_ZN9SdFatBase14initErrorPrintEP5Print+0x30>
    pr->println(F("Can't access SD card. Do not reformat."));
 8081b44:	4910      	ldr	r1, [pc, #64]	; (8081b88 <_ZN9SdFatBase14initErrorPrintEP5Print+0x50>)
 8081b46:	4620      	mov	r0, r4
 8081b48:	f000 faf5 	bl	8082136 <_ZN5Print7printlnEPKc>
    if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
 8081b4c:	f895 346a 	ldrb.w	r3, [r5, #1130]	; 0x46a
 8081b50:	2b01      	cmp	r3, #1
 8081b52:	d103      	bne.n	8081b5c <_ZN9SdFatBase14initErrorPrintEP5Print+0x24>
      pr->println(F("No card, wrong chip select pin, or SPI problem?"));
 8081b54:	490d      	ldr	r1, [pc, #52]	; (8081b8c <_ZN9SdFatBase14initErrorPrintEP5Print+0x54>)
 8081b56:	4620      	mov	r0, r4
 8081b58:	f000 faed 	bl	8082136 <_ZN5Print7printlnEPKc>
    }
    errorPrint(pr);
 8081b5c:	4621      	mov	r1, r4
 8081b5e:	4628      	mov	r0, r5
  } else if (!vwd()->isOpen()) {
    pr->println(F("Can't open root directory."));
  } else {
    pr->println(F("No error found."));
  }
}
 8081b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (cardErrorCode()) {
    pr->println(F("Can't access SD card. Do not reformat."));
    if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
      pr->println(F("No card, wrong chip select pin, or SPI problem?"));
    }
    errorPrint(pr);
 8081b64:	f7ff bfaa 	b.w	8081abc <_ZN9SdFatBase10errorPrintEP5Print>
  } else if (vol()->fatType() == 0) {
 8081b68:	79c3      	ldrb	r3, [r0, #7]
 8081b6a:	b90b      	cbnz	r3, 8081b70 <_ZN9SdFatBase14initErrorPrintEP5Print+0x38>
    pr->println(F("Invalid format, reformat SD."));
 8081b6c:	4908      	ldr	r1, [pc, #32]	; (8081b90 <_ZN9SdFatBase14initErrorPrintEP5Print+0x58>)
 8081b6e:	e005      	b.n	8081b7c <_ZN9SdFatBase14initErrorPrintEP5Print+0x44>
  } else if (!vwd()->isOpen()) {
 8081b70:	f890 3440 	ldrb.w	r3, [r0, #1088]	; 0x440
 8081b74:	b90b      	cbnz	r3, 8081b7a <_ZN9SdFatBase14initErrorPrintEP5Print+0x42>
    pr->println(F("Can't open root directory."));
 8081b76:	4907      	ldr	r1, [pc, #28]	; (8081b94 <_ZN9SdFatBase14initErrorPrintEP5Print+0x5c>)
 8081b78:	e000      	b.n	8081b7c <_ZN9SdFatBase14initErrorPrintEP5Print+0x44>
  } else {
    pr->println(F("No error found."));
 8081b7a:	4907      	ldr	r1, [pc, #28]	; (8081b98 <_ZN9SdFatBase14initErrorPrintEP5Print+0x60>)
 8081b7c:	4620      	mov	r0, r4
  }
}
 8081b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  } else if (vol()->fatType() == 0) {
    pr->println(F("Invalid format, reformat SD."));
  } else if (!vwd()->isOpen()) {
    pr->println(F("Can't open root directory."));
  } else {
    pr->println(F("No error found."));
 8081b82:	f000 bad8 	b.w	8082136 <_ZN5Print7printlnEPKc>
 8081b86:	bf00      	nop
 8081b88:	08083c69 	.word	0x08083c69
 8081b8c:	08083c90 	.word	0x08083c90
 8081b90:	08083cc0 	.word	0x08083cc0
 8081b94:	08083cdd 	.word	0x08083cdd
 8081b98:	08083cf8 	.word	0x08083cf8

08081b9c <_ZN9SdFatBase13initErrorHaltEP5Print>:
  pr->print(F("error: "));
  pr->println(msg);
  errorPrint(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorHalt(Print* pr) {
 8081b9c:	b508      	push	{r3, lr}
  initErrorPrint(pr);
 8081b9e:	f7ff ffcb 	bl	8081b38 <_ZN9SdFatBase14initErrorPrintEP5Print>
 8081ba2:	f7ff ff83 	bl	8081aac <_ZN19ApplicationWatchdog7checkinEv>
 8081ba6:	f000 f9af 	bl	8081f08 <spark_process>
 8081baa:	e7fa      	b.n	8081ba2 <_ZN9SdFatBase13initErrorHaltEP5Print+0x6>

08081bac <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8081bac:	f000 b800 	b.w	8081bb0 <HAL_Pin_Map>

08081bb0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081bb0:	b508      	push	{r3, lr}
 8081bb2:	4b02      	ldr	r3, [pc, #8]	; (8081bbc <HAL_Pin_Map+0xc>)
 8081bb4:	681b      	ldr	r3, [r3, #0]
 8081bb6:	681b      	ldr	r3, [r3, #0]
 8081bb8:	9301      	str	r3, [sp, #4]
 8081bba:	bd08      	pop	{r3, pc}
 8081bbc:	080401b0 	.word	0x080401b0

08081bc0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081bc0:	b508      	push	{r3, lr}
 8081bc2:	4b02      	ldr	r3, [pc, #8]	; (8081bcc <HAL_Pin_Mode+0xc>)
 8081bc4:	681b      	ldr	r3, [r3, #0]
 8081bc6:	689b      	ldr	r3, [r3, #8]
 8081bc8:	9301      	str	r3, [sp, #4]
 8081bca:	bd08      	pop	{r3, pc}
 8081bcc:	080401b0 	.word	0x080401b0

08081bd0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081bd0:	b508      	push	{r3, lr}
 8081bd2:	4b02      	ldr	r3, [pc, #8]	; (8081bdc <HAL_Get_Pin_Mode+0xc>)
 8081bd4:	681b      	ldr	r3, [r3, #0]
 8081bd6:	68db      	ldr	r3, [r3, #12]
 8081bd8:	9301      	str	r3, [sp, #4]
 8081bda:	bd08      	pop	{r3, pc}
 8081bdc:	080401b0 	.word	0x080401b0

08081be0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081be0:	b508      	push	{r3, lr}
 8081be2:	4b02      	ldr	r3, [pc, #8]	; (8081bec <HAL_GPIO_Write+0xc>)
 8081be4:	681b      	ldr	r3, [r3, #0]
 8081be6:	691b      	ldr	r3, [r3, #16]
 8081be8:	9301      	str	r3, [sp, #4]
 8081bea:	bd08      	pop	{r3, pc}
 8081bec:	080401b0 	.word	0x080401b0

08081bf0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8081bf0:	b508      	push	{r3, lr}
 8081bf2:	4b02      	ldr	r3, [pc, #8]	; (8081bfc <HAL_SPI_Begin+0xc>)
 8081bf4:	681b      	ldr	r3, [r3, #0]
 8081bf6:	681b      	ldr	r3, [r3, #0]
 8081bf8:	9301      	str	r3, [sp, #4]
 8081bfa:	bd08      	pop	{r3, pc}
 8081bfc:	080401b4 	.word	0x080401b4

08081c00 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8081c00:	b508      	push	{r3, lr}
 8081c02:	4b02      	ldr	r3, [pc, #8]	; (8081c0c <HAL_SPI_Set_Bit_Order+0xc>)
 8081c04:	681b      	ldr	r3, [r3, #0]
 8081c06:	689b      	ldr	r3, [r3, #8]
 8081c08:	9301      	str	r3, [sp, #4]
 8081c0a:	bd08      	pop	{r3, pc}
 8081c0c:	080401b4 	.word	0x080401b4

08081c10 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8081c10:	b508      	push	{r3, lr}
 8081c12:	4b02      	ldr	r3, [pc, #8]	; (8081c1c <HAL_SPI_Set_Data_Mode+0xc>)
 8081c14:	681b      	ldr	r3, [r3, #0]
 8081c16:	68db      	ldr	r3, [r3, #12]
 8081c18:	9301      	str	r3, [sp, #4]
 8081c1a:	bd08      	pop	{r3, pc}
 8081c1c:	080401b4 	.word	0x080401b4

08081c20 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8081c20:	b508      	push	{r3, lr}
 8081c22:	4b02      	ldr	r3, [pc, #8]	; (8081c2c <HAL_SPI_Set_Clock_Divider+0xc>)
 8081c24:	681b      	ldr	r3, [r3, #0]
 8081c26:	691b      	ldr	r3, [r3, #16]
 8081c28:	9301      	str	r3, [sp, #4]
 8081c2a:	bd08      	pop	{r3, pc}
 8081c2c:	080401b4 	.word	0x080401b4

08081c30 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8081c30:	b508      	push	{r3, lr}
 8081c32:	4b02      	ldr	r3, [pc, #8]	; (8081c3c <HAL_SPI_Send_Receive_Data+0xc>)
 8081c34:	681b      	ldr	r3, [r3, #0]
 8081c36:	695b      	ldr	r3, [r3, #20]
 8081c38:	9301      	str	r3, [sp, #4]
 8081c3a:	bd08      	pop	{r3, pc}
 8081c3c:	080401b4 	.word	0x080401b4

08081c40 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081c40:	b508      	push	{r3, lr}
 8081c42:	4b02      	ldr	r3, [pc, #8]	; (8081c4c <HAL_SPI_Init+0xc>)
 8081c44:	681b      	ldr	r3, [r3, #0]
 8081c46:	69db      	ldr	r3, [r3, #28]
 8081c48:	9301      	str	r3, [sp, #4]
 8081c4a:	bd08      	pop	{r3, pc}
 8081c4c:	080401b4 	.word	0x080401b4

08081c50 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081c50:	b508      	push	{r3, lr}
 8081c52:	4b02      	ldr	r3, [pc, #8]	; (8081c5c <HAL_SPI_Is_Enabled+0xc>)
 8081c54:	681b      	ldr	r3, [r3, #0]
 8081c56:	6a1b      	ldr	r3, [r3, #32]
 8081c58:	9301      	str	r3, [sp, #4]
 8081c5a:	bd08      	pop	{r3, pc}
 8081c5c:	080401b4 	.word	0x080401b4

08081c60 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8081c60:	b508      	push	{r3, lr}
 8081c62:	4b02      	ldr	r3, [pc, #8]	; (8081c6c <HAL_SPI_Info+0xc>)
 8081c64:	681b      	ldr	r3, [r3, #0]
 8081c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081c68:	9301      	str	r3, [sp, #4]
 8081c6a:	bd08      	pop	{r3, pc}
 8081c6c:	080401b4 	.word	0x080401b4

08081c70 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8081c70:	b508      	push	{r3, lr}
 8081c72:	4b02      	ldr	r3, [pc, #8]	; (8081c7c <HAL_SPI_DMA_Transfer+0xc>)
 8081c74:	681b      	ldr	r3, [r3, #0]
 8081c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081c78:	9301      	str	r3, [sp, #4]
 8081c7a:	bd08      	pop	{r3, pc}
 8081c7c:	080401b4 	.word	0x080401b4

08081c80 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8081c80:	b508      	push	{r3, lr}
 8081c82:	4b02      	ldr	r3, [pc, #8]	; (8081c8c <HAL_SPI_DMA_Transfer_Status+0xc>)
 8081c84:	681b      	ldr	r3, [r3, #0]
 8081c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081c88:	9301      	str	r3, [sp, #4]
 8081c8a:	bd08      	pop	{r3, pc}
 8081c8c:	080401b4 	.word	0x080401b4

08081c90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081c90:	b508      	push	{r3, lr}
 8081c92:	4b02      	ldr	r3, [pc, #8]	; (8081c9c <HAL_RNG_GetRandomNumber+0xc>)
 8081c94:	681b      	ldr	r3, [r3, #0]
 8081c96:	685b      	ldr	r3, [r3, #4]
 8081c98:	9301      	str	r3, [sp, #4]
 8081c9a:	bd08      	pop	{r3, pc}
 8081c9c:	0804019c 	.word	0x0804019c

08081ca0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081ca0:	b508      	push	{r3, lr}
 8081ca2:	4b02      	ldr	r3, [pc, #8]	; (8081cac <HAL_Delay_Microseconds+0xc>)
 8081ca4:	681b      	ldr	r3, [r3, #0]
 8081ca6:	68db      	ldr	r3, [r3, #12]
 8081ca8:	9301      	str	r3, [sp, #4]
 8081caa:	bd08      	pop	{r3, pc}
 8081cac:	0804019c 	.word	0x0804019c

08081cb0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081cb0:	b508      	push	{r3, lr}
 8081cb2:	4b02      	ldr	r3, [pc, #8]	; (8081cbc <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081cb4:	681b      	ldr	r3, [r3, #0]
 8081cb6:	695b      	ldr	r3, [r3, #20]
 8081cb8:	9301      	str	r3, [sp, #4]
 8081cba:	bd08      	pop	{r3, pc}
 8081cbc:	0804019c 	.word	0x0804019c

08081cc0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081cc0:	b508      	push	{r3, lr}
 8081cc2:	4b02      	ldr	r3, [pc, #8]	; (8081ccc <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081cc4:	681b      	ldr	r3, [r3, #0]
 8081cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081cc8:	9301      	str	r3, [sp, #4]
 8081cca:	bd08      	pop	{r3, pc}
 8081ccc:	080401b8 	.word	0x080401b8

08081cd0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081cd0:	b508      	push	{r3, lr}
 8081cd2:	4b02      	ldr	r3, [pc, #8]	; (8081cdc <os_mutex_create+0xc>)
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cd8:	9301      	str	r3, [sp, #4]
 8081cda:	bd08      	pop	{r3, pc}
 8081cdc:	080401d0 	.word	0x080401d0

08081ce0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081ce0:	b508      	push	{r3, lr}
 8081ce2:	4b02      	ldr	r3, [pc, #8]	; (8081cec <HAL_USART_Init+0xc>)
 8081ce4:	681b      	ldr	r3, [r3, #0]
 8081ce6:	699b      	ldr	r3, [r3, #24]
 8081ce8:	9301      	str	r3, [sp, #4]
 8081cea:	bd08      	pop	{r3, pc}
 8081cec:	080401c4 	.word	0x080401c4

08081cf0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081cf0:	b508      	push	{r3, lr}
 8081cf2:	4b02      	ldr	r3, [pc, #8]	; (8081cfc <HAL_USART_Write_Data+0xc>)
 8081cf4:	681b      	ldr	r3, [r3, #0]
 8081cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081cf8:	9301      	str	r3, [sp, #4]
 8081cfa:	bd08      	pop	{r3, pc}
 8081cfc:	080401c4 	.word	0x080401c4

08081d00 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081d00:	b508      	push	{r3, lr}
 8081d02:	4b02      	ldr	r3, [pc, #8]	; (8081d0c <HAL_USART_Available_Data+0xc>)
 8081d04:	681b      	ldr	r3, [r3, #0]
 8081d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081d08:	9301      	str	r3, [sp, #4]
 8081d0a:	bd08      	pop	{r3, pc}
 8081d0c:	080401c4 	.word	0x080401c4

08081d10 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081d10:	b508      	push	{r3, lr}
 8081d12:	4b02      	ldr	r3, [pc, #8]	; (8081d1c <HAL_USART_Read_Data+0xc>)
 8081d14:	681b      	ldr	r3, [r3, #0]
 8081d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081d18:	9301      	str	r3, [sp, #4]
 8081d1a:	bd08      	pop	{r3, pc}
 8081d1c:	080401c4 	.word	0x080401c4

08081d20 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081d20:	b508      	push	{r3, lr}
 8081d22:	4b02      	ldr	r3, [pc, #8]	; (8081d2c <HAL_USART_Peek_Data+0xc>)
 8081d24:	681b      	ldr	r3, [r3, #0]
 8081d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081d28:	9301      	str	r3, [sp, #4]
 8081d2a:	bd08      	pop	{r3, pc}
 8081d2c:	080401c4 	.word	0x080401c4

08081d30 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081d30:	b508      	push	{r3, lr}
 8081d32:	4b02      	ldr	r3, [pc, #8]	; (8081d3c <HAL_USART_Flush_Data+0xc>)
 8081d34:	681b      	ldr	r3, [r3, #0]
 8081d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081d38:	9301      	str	r3, [sp, #4]
 8081d3a:	bd08      	pop	{r3, pc}
 8081d3c:	080401c4 	.word	0x080401c4

08081d40 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081d40:	b508      	push	{r3, lr}
 8081d42:	4b02      	ldr	r3, [pc, #8]	; (8081d4c <HAL_USART_Is_Enabled+0xc>)
 8081d44:	681b      	ldr	r3, [r3, #0]
 8081d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081d48:	9301      	str	r3, [sp, #4]
 8081d4a:	bd08      	pop	{r3, pc}
 8081d4c:	080401c4 	.word	0x080401c4

08081d50 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081d50:	b508      	push	{r3, lr}
 8081d52:	4b02      	ldr	r3, [pc, #8]	; (8081d5c <HAL_USART_Available_Data_For_Write+0xc>)
 8081d54:	681b      	ldr	r3, [r3, #0]
 8081d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d58:	9301      	str	r3, [sp, #4]
 8081d5a:	bd08      	pop	{r3, pc}
 8081d5c:	080401c4 	.word	0x080401c4

08081d60 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081d60:	b508      	push	{r3, lr}
 8081d62:	4b02      	ldr	r3, [pc, #8]	; (8081d6c <HAL_I2C_Request_Data+0xc>)
 8081d64:	681b      	ldr	r3, [r3, #0]
 8081d66:	695b      	ldr	r3, [r3, #20]
 8081d68:	9301      	str	r3, [sp, #4]
 8081d6a:	bd08      	pop	{r3, pc}
 8081d6c:	080401ac 	.word	0x080401ac

08081d70 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081d70:	b508      	push	{r3, lr}
 8081d72:	4b02      	ldr	r3, [pc, #8]	; (8081d7c <HAL_I2C_Begin_Transmission+0xc>)
 8081d74:	681b      	ldr	r3, [r3, #0]
 8081d76:	699b      	ldr	r3, [r3, #24]
 8081d78:	9301      	str	r3, [sp, #4]
 8081d7a:	bd08      	pop	{r3, pc}
 8081d7c:	080401ac 	.word	0x080401ac

08081d80 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081d80:	b508      	push	{r3, lr}
 8081d82:	4b02      	ldr	r3, [pc, #8]	; (8081d8c <HAL_I2C_End_Transmission+0xc>)
 8081d84:	681b      	ldr	r3, [r3, #0]
 8081d86:	69db      	ldr	r3, [r3, #28]
 8081d88:	9301      	str	r3, [sp, #4]
 8081d8a:	bd08      	pop	{r3, pc}
 8081d8c:	080401ac 	.word	0x080401ac

08081d90 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081d90:	b508      	push	{r3, lr}
 8081d92:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <HAL_I2C_Write_Data+0xc>)
 8081d94:	681b      	ldr	r3, [r3, #0]
 8081d96:	6a1b      	ldr	r3, [r3, #32]
 8081d98:	9301      	str	r3, [sp, #4]
 8081d9a:	bd08      	pop	{r3, pc}
 8081d9c:	080401ac 	.word	0x080401ac

08081da0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081da0:	b508      	push	{r3, lr}
 8081da2:	4b02      	ldr	r3, [pc, #8]	; (8081dac <HAL_I2C_Available_Data+0xc>)
 8081da4:	681b      	ldr	r3, [r3, #0]
 8081da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081da8:	9301      	str	r3, [sp, #4]
 8081daa:	bd08      	pop	{r3, pc}
 8081dac:	080401ac 	.word	0x080401ac

08081db0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081db0:	b508      	push	{r3, lr}
 8081db2:	4b02      	ldr	r3, [pc, #8]	; (8081dbc <HAL_I2C_Read_Data+0xc>)
 8081db4:	681b      	ldr	r3, [r3, #0]
 8081db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081db8:	9301      	str	r3, [sp, #4]
 8081dba:	bd08      	pop	{r3, pc}
 8081dbc:	080401ac 	.word	0x080401ac

08081dc0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081dc0:	b508      	push	{r3, lr}
 8081dc2:	4b02      	ldr	r3, [pc, #8]	; (8081dcc <HAL_I2C_Peek_Data+0xc>)
 8081dc4:	681b      	ldr	r3, [r3, #0]
 8081dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081dc8:	9301      	str	r3, [sp, #4]
 8081dca:	bd08      	pop	{r3, pc}
 8081dcc:	080401ac 	.word	0x080401ac

08081dd0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081dd0:	b508      	push	{r3, lr}
 8081dd2:	4b02      	ldr	r3, [pc, #8]	; (8081ddc <HAL_I2C_Flush_Data+0xc>)
 8081dd4:	681b      	ldr	r3, [r3, #0]
 8081dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081dd8:	9301      	str	r3, [sp, #4]
 8081dda:	bd08      	pop	{r3, pc}
 8081ddc:	080401ac 	.word	0x080401ac

08081de0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <HAL_I2C_Is_Enabled+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401ac 	.word	0x080401ac

08081df0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <HAL_I2C_Init+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401ac 	.word	0x080401ac

08081e00 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <HAL_I2C_Acquire+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401ac 	.word	0x080401ac

08081e10 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b02      	ldr	r3, [pc, #8]	; (8081e1c <HAL_I2C_Release+0xc>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081e18:	9301      	str	r3, [sp, #4]
 8081e1a:	bd08      	pop	{r3, pc}
 8081e1c:	080401ac 	.word	0x080401ac

08081e20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b02      	ldr	r3, [pc, #8]	; (8081e2c <HAL_USB_USART_Init+0xc>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	681b      	ldr	r3, [r3, #0]
 8081e28:	9301      	str	r3, [sp, #4]
 8081e2a:	bd08      	pop	{r3, pc}
 8081e2c:	0806001c 	.word	0x0806001c

08081e30 <HAL_USB_USART_End>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 8081e30:	b508      	push	{r3, lr}
 8081e32:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <HAL_USB_USART_End+0xc>)
 8081e34:	681b      	ldr	r3, [r3, #0]
 8081e36:	689b      	ldr	r3, [r3, #8]
 8081e38:	9301      	str	r3, [sp, #4]
 8081e3a:	bd08      	pop	{r3, pc}
 8081e3c:	0806001c 	.word	0x0806001c

08081e40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081e40:	b508      	push	{r3, lr}
 8081e42:	4b02      	ldr	r3, [pc, #8]	; (8081e4c <HAL_USB_USART_Available_Data+0xc>)
 8081e44:	681b      	ldr	r3, [r3, #0]
 8081e46:	691b      	ldr	r3, [r3, #16]
 8081e48:	9301      	str	r3, [sp, #4]
 8081e4a:	bd08      	pop	{r3, pc}
 8081e4c:	0806001c 	.word	0x0806001c

08081e50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	695b      	ldr	r3, [r3, #20]
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	0806001c 	.word	0x0806001c

08081e60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <HAL_USB_USART_Receive_Data+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	699b      	ldr	r3, [r3, #24]
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	0806001c 	.word	0x0806001c

08081e70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <HAL_USB_USART_Send_Data+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	69db      	ldr	r3, [r3, #28]
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	0806001c 	.word	0x0806001c

08081e80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <HAL_USB_USART_Flush_Data+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	6a1b      	ldr	r3, [r3, #32]
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	0806001c 	.word	0x0806001c

08081e90 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <HAL_USB_USART_Is_Enabled+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	0806001c 	.word	0x0806001c

08081ea0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <set_system_mode+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	685b      	ldr	r3, [r3, #4]
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	080401a4 	.word	0x080401a4

08081eb0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <system_delay_ms+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	695b      	ldr	r3, [r3, #20]
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080401a4 	.word	0x080401a4

08081ec0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b03      	ldr	r3, [pc, #12]	; (8081ed0 <system_ctrl_set_app_request_handler+0x10>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081eca:	9301      	str	r3, [sp, #4]
 8081ecc:	bd08      	pop	{r3, pc}
 8081ece:	0000      	.short	0x0000
 8081ed0:	080401a4 	.word	0x080401a4

08081ed4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081ed4:	b508      	push	{r3, lr}
 8081ed6:	4b03      	ldr	r3, [pc, #12]	; (8081ee4 <system_ctrl_set_result+0x10>)
 8081ed8:	681b      	ldr	r3, [r3, #0]
 8081eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081ede:	9301      	str	r3, [sp, #4]
 8081ee0:	bd08      	pop	{r3, pc}
 8081ee2:	0000      	.short	0x0000
 8081ee4:	080401a4 	.word	0x080401a4

08081ee8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081ee8:	b508      	push	{r3, lr}
 8081eea:	4b02      	ldr	r3, [pc, #8]	; (8081ef4 <network_ready+0xc>)
 8081eec:	681b      	ldr	r3, [r3, #0]
 8081eee:	691b      	ldr	r3, [r3, #16]
 8081ef0:	9301      	str	r3, [sp, #4]
 8081ef2:	bd08      	pop	{r3, pc}
 8081ef4:	080401c8 	.word	0x080401c8

08081ef8 <network_off>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ef8:	b508      	push	{r3, lr}
 8081efa:	4b02      	ldr	r3, [pc, #8]	; (8081f04 <network_off+0xc>)
 8081efc:	681b      	ldr	r3, [r3, #0]
 8081efe:	699b      	ldr	r3, [r3, #24]
 8081f00:	9301      	str	r3, [sp, #4]
 8081f02:	bd08      	pop	{r3, pc}
 8081f04:	080401c8 	.word	0x080401c8

08081f08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081f08:	b508      	push	{r3, lr}
 8081f0a:	4b02      	ldr	r3, [pc, #8]	; (8081f14 <spark_process+0xc>)
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	689b      	ldr	r3, [r3, #8]
 8081f10:	9301      	str	r3, [sp, #4]
 8081f12:	bd08      	pop	{r3, pc}
 8081f14:	080401cc 	.word	0x080401cc

08081f18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081f18:	b508      	push	{r3, lr}
 8081f1a:	4b02      	ldr	r3, [pc, #8]	; (8081f24 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081f1c:	681b      	ldr	r3, [r3, #0]
 8081f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081f20:	9301      	str	r3, [sp, #4]
 8081f22:	bd08      	pop	{r3, pc}
 8081f24:	080401cc 	.word	0x080401cc

08081f28 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081f28:	b508      	push	{r3, lr}
 8081f2a:	4b02      	ldr	r3, [pc, #8]	; (8081f34 <malloc+0xc>)
 8081f2c:	681b      	ldr	r3, [r3, #0]
 8081f2e:	681b      	ldr	r3, [r3, #0]
 8081f30:	9301      	str	r3, [sp, #4]
 8081f32:	bd08      	pop	{r3, pc}
 8081f34:	080401a0 	.word	0x080401a0

08081f38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081f38:	b508      	push	{r3, lr}
 8081f3a:	4b02      	ldr	r3, [pc, #8]	; (8081f44 <free+0xc>)
 8081f3c:	681b      	ldr	r3, [r3, #0]
 8081f3e:	685b      	ldr	r3, [r3, #4]
 8081f40:	9301      	str	r3, [sp, #4]
 8081f42:	bd08      	pop	{r3, pc}
 8081f44:	080401a0 	.word	0x080401a0

08081f48 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081f48:	b508      	push	{r3, lr}
 8081f4a:	4b02      	ldr	r3, [pc, #8]	; (8081f54 <snprintf+0xc>)
 8081f4c:	681b      	ldr	r3, [r3, #0]
 8081f4e:	69db      	ldr	r3, [r3, #28]
 8081f50:	9301      	str	r3, [sp, #4]
 8081f52:	bd08      	pop	{r3, pc}
 8081f54:	080401a0 	.word	0x080401a0

08081f58 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8081f58:	b508      	push	{r3, lr}
 8081f5a:	4b02      	ldr	r3, [pc, #8]	; (8081f64 <vsnprintf+0xc>)
 8081f5c:	681b      	ldr	r3, [r3, #0]
 8081f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f60:	9301      	str	r3, [sp, #4]
 8081f62:	bd08      	pop	{r3, pc}
 8081f64:	080401a0 	.word	0x080401a0

08081f68 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081f68:	4770      	bx	lr

08081f6a <_ZN8SPIClassD0Ev>:
 8081f6a:	b510      	push	{r4, lr}
 8081f6c:	4604      	mov	r4, r0
 8081f6e:	f7fe f894 	bl	808009a <_ZdlPv>
 8081f72:	4620      	mov	r0, r4
 8081f74:	bd10      	pop	{r4, pc}
	...

08081f78 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081f78:	b570      	push	{r4, r5, r6, lr}
 8081f7a:	4604      	mov	r4, r0
 8081f7c:	460e      	mov	r6, r1
 8081f7e:	4b07      	ldr	r3, [pc, #28]	; (8081f9c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081f80:	2500      	movs	r5, #0
 8081f82:	6003      	str	r3, [r0, #0]
 8081f84:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081f88:	f7ff fea2 	bl	8081cd0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081f8c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8081f8e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081f90:	f7ff fe56 	bl	8081c40 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081f94:	60a5      	str	r5, [r4, #8]
}
 8081f96:	4620      	mov	r0, r4
 8081f98:	bd70      	pop	{r4, r5, r6, pc}
 8081f9a:	bf00      	nop
 8081f9c:	08083d10 	.word	0x08083d10

08081fa0 <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8081fa0:	292e      	cmp	r1, #46	; 0x2e
 8081fa2:	d802      	bhi.n	8081faa <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8081fa4:	7900      	ldrb	r0, [r0, #4]
 8081fa6:	f7ff be23 	b.w	8081bf0 <HAL_SPI_Begin>
 8081faa:	4770      	bx	lr

08081fac <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8081fac:	7900      	ldrb	r0, [r0, #4]
 8081fae:	f7ff be27 	b.w	8081c00 <HAL_SPI_Set_Bit_Order>

08081fb2 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8081fb2:	7900      	ldrb	r0, [r0, #4]
 8081fb4:	f7ff be2c 	b.w	8081c10 <HAL_SPI_Set_Data_Mode>

08081fb8 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8081fb8:	4a05      	ldr	r2, [pc, #20]	; (8081fd0 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8081fba:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8081fbc:	5c99      	ldrb	r1, [r3, r2]
 8081fbe:	4281      	cmp	r1, r0
 8081fc0:	d002      	beq.n	8081fc8 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8081fc2:	3301      	adds	r3, #1
 8081fc4:	2b08      	cmp	r3, #8
 8081fc6:	d1f9      	bne.n	8081fbc <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8081fc8:	1c58      	adds	r0, r3, #1
}
 8081fca:	b2c0      	uxtb	r0, r0
 8081fcc:	4770      	bx	lr
 8081fce:	bf00      	nop
 8081fd0:	08083d18 	.word	0x08083d18

08081fd4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8081fd4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8081fd6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8081fd8:	6018      	str	r0, [r3, #0]
 8081fda:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8081fdc:	6818      	ldr	r0, [r3, #0]
 8081fde:	b2e5      	uxtb	r5, r4
 8081fe0:	4288      	cmp	r0, r1
 8081fe2:	d906      	bls.n	8081ff2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8081fe4:	3401      	adds	r4, #1
 8081fe6:	2c08      	cmp	r4, #8
 8081fe8:	d002      	beq.n	8081ff0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8081fea:	0840      	lsrs	r0, r0, #1
 8081fec:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8081fee:	e7f5      	b.n	8081fdc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8081ff0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8081ff2:	4b02      	ldr	r3, [pc, #8]	; (8081ffc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8081ff4:	5d5b      	ldrb	r3, [r3, r5]
 8081ff6:	7013      	strb	r3, [r2, #0]
 8081ff8:	bd30      	pop	{r4, r5, pc}
 8081ffa:	bf00      	nop
 8081ffc:	08083d18 	.word	0x08083d18

08082000 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8082000:	b570      	push	{r4, r5, r6, lr}
 8082002:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8082004:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8082008:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 808200a:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 808200c:	2214      	movs	r2, #20
 808200e:	2100      	movs	r1, #0
 8082010:	a803      	add	r0, sp, #12
 8082012:	f001 fd2b 	bl	8083a6c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8082016:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8082018:	a903      	add	r1, sp, #12
 808201a:	4630      	mov	r0, r6
 808201c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 808201e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8082022:	f7ff fe1d 	bl	8081c60 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8082026:	ab02      	add	r3, sp, #8
 8082028:	f10d 0207 	add.w	r2, sp, #7
 808202c:	4629      	mov	r1, r5
 808202e:	9804      	ldr	r0, [sp, #16]
 8082030:	f7ff ffd0 	bl	8081fd4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8082034:	7920      	ldrb	r0, [r4, #4]
 8082036:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808203a:	f7ff fdf1 	bl	8081c20 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 808203e:	9802      	ldr	r0, [sp, #8]
 8082040:	b008      	add	sp, #32
 8082042:	bd70      	pop	{r4, r5, r6, pc}

08082044 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8082044:	b538      	push	{r3, r4, r5, lr}
 8082046:	4604      	mov	r4, r0
    if (dividerReference)
 8082048:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808204a:	4608      	mov	r0, r1
    if (dividerReference)
 808204c:	b14d      	cbz	r5, 8082062 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 808204e:	f7ff ffb3 	bl	8081fb8 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8082052:	2201      	movs	r2, #1
 8082054:	fa25 f100 	lsr.w	r1, r5, r0
 8082058:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 808205a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808205e:	f7ff bfcf 	b.w	8082000 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8082062:	7920      	ldrb	r0, [r4, #4]
    }
}
 8082064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8082068:	f7ff bdda 	b.w	8081c20 <HAL_SPI_Set_Clock_Divider>

0808206c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808206c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 808206e:	7900      	ldrb	r0, [r0, #4]
 8082070:	f7ff fdde 	bl	8081c30 <HAL_SPI_Send_Receive_Data>
}
 8082074:	b2c0      	uxtb	r0, r0
 8082076:	bd08      	pop	{r3, pc}

08082078 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8082078:	b530      	push	{r4, r5, lr}
 808207a:	b087      	sub	sp, #28
 808207c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808207e:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8082080:	7900      	ldrb	r0, [r0, #4]
 8082082:	9500      	str	r5, [sp, #0]
 8082084:	f7ff fdf4 	bl	8081c70 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8082088:	b93d      	cbnz	r5, 808209a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 808208a:	a902      	add	r1, sp, #8
 808208c:	7920      	ldrb	r0, [r4, #4]
 808208e:	f7ff fdf7 	bl	8081c80 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8082092:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8082096:	07db      	lsls	r3, r3, #31
 8082098:	d4f7      	bmi.n	808208a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 808209a:	b007      	add	sp, #28
 808209c:	bd30      	pop	{r4, r5, pc}

0808209e <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808209e:	7900      	ldrb	r0, [r0, #4]
 80820a0:	f7ff bdd6 	b.w	8081c50 <HAL_SPI_Is_Enabled>

080820a4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80820a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80820a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80820aa:	4c0d      	ldr	r4, [pc, #52]	; (80820e0 <_GLOBAL__sub_I_System+0x3c>)
 80820ac:	2500      	movs	r5, #0
 80820ae:	8063      	strh	r3, [r4, #2]
 80820b0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820b4:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80820b6:	80a3      	strh	r3, [r4, #4]
 80820b8:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820ba:	f7ff fef1 	bl	8081ea0 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80820be:	a802      	add	r0, sp, #8
 80820c0:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80820c4:	462a      	mov	r2, r5
 80820c6:	4629      	mov	r1, r5
 80820c8:	f7ff fdfa 	bl	8081cc0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80820cc:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80820ce:	2b1e      	cmp	r3, #30
 80820d0:	d104      	bne.n	80820dc <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80820d2:	2303      	movs	r3, #3
 80820d4:	7023      	strb	r3, [r4, #0]
 80820d6:	2311      	movs	r3, #17
 80820d8:	8065      	strh	r5, [r4, #2]
 80820da:	80a3      	strh	r3, [r4, #4]
 80820dc:	b003      	add	sp, #12
 80820de:	bd30      	pop	{r4, r5, pc}
 80820e0:	20000944 	.word	0x20000944

080820e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80820e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80820e6:	4606      	mov	r6, r0
 80820e8:	460d      	mov	r5, r1
 80820ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80820ec:	2400      	movs	r4, #0
  while (size--) {
 80820ee:	42bd      	cmp	r5, r7
 80820f0:	d00c      	beq.n	808210c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80820f2:	6833      	ldr	r3, [r6, #0]
 80820f4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80820f8:	689b      	ldr	r3, [r3, #8]
 80820fa:	4630      	mov	r0, r6
 80820fc:	4798      	blx	r3
     if (chunk>=0)
 80820fe:	2800      	cmp	r0, #0
 8082100:	db01      	blt.n	8082106 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082102:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082104:	e7f3      	b.n	80820ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082106:	2c00      	cmp	r4, #0
 8082108:	bf08      	it	eq
 808210a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808210c:	4620      	mov	r0, r4
 808210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082110 <_ZN5Print5printEPKc>:
 8082110:	b508      	push	{r3, lr}
 8082112:	f7ff f815 	bl	8081140 <_ZN5Print5writeEPKc>
 8082116:	bd08      	pop	{r3, pc}

08082118 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082118:	6803      	ldr	r3, [r0, #0]
 808211a:	689b      	ldr	r3, [r3, #8]
 808211c:	4718      	bx	r3

0808211e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808211e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082120:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082122:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082124:	f7ff fff8 	bl	8082118 <_ZN5Print5printEc>
  n += print('\n');
 8082128:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808212a:	4604      	mov	r4, r0
  n += print('\n');
 808212c:	4628      	mov	r0, r5
 808212e:	f7ff fff3 	bl	8082118 <_ZN5Print5printEc>
  return n;
}
 8082132:	4420      	add	r0, r4
 8082134:	bd38      	pop	{r3, r4, r5, pc}

08082136 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082136:	b538      	push	{r3, r4, r5, lr}
 8082138:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808213a:	f7ff f801 	bl	8081140 <_ZN5Print5writeEPKc>
 808213e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082140:	4628      	mov	r0, r5
 8082142:	f7ff ffec 	bl	808211e <_ZN5Print7printlnEv>
  return n;
}
 8082146:	4420      	add	r0, r4
 8082148:	bd38      	pop	{r3, r4, r5, pc}

0808214a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808214a:	2a01      	cmp	r2, #1
 808214c:	bf98      	it	ls
 808214e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082150:	b530      	push	{r4, r5, lr}
 8082152:	460b      	mov	r3, r1
 8082154:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082156:	2100      	movs	r1, #0
 8082158:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808215c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082160:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082164:	fb05 3312 	mls	r3, r5, r2, r3
 8082168:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808216a:	2b09      	cmp	r3, #9
 808216c:	bf94      	ite	ls
 808216e:	3330      	addls	r3, #48	; 0x30
 8082170:	3337      	addhi	r3, #55	; 0x37
 8082172:	b2db      	uxtb	r3, r3
 8082174:	4621      	mov	r1, r4
 8082176:	f804 3901 	strb.w	r3, [r4], #-1
 808217a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808217c:	2d00      	cmp	r5, #0
 808217e:	d1ef      	bne.n	8082160 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082180:	f7fe ffde 	bl	8081140 <_ZN5Print5writeEPKc>
}
 8082184:	b00b      	add	sp, #44	; 0x2c
 8082186:	bd30      	pop	{r4, r5, pc}

08082188 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082188:	b410      	push	{r4}
  if (base == 0) return write(n);
 808218a:	b922      	cbnz	r2, 8082196 <_ZN5Print5printEmi+0xe>
 808218c:	6803      	ldr	r3, [r0, #0]
 808218e:	b2c9      	uxtb	r1, r1
 8082190:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082192:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082194:	4718      	bx	r3
  else return printNumber(n, base);
 8082196:	b2d2      	uxtb	r2, r2
}
 8082198:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808219a:	f7ff bfd6 	b.w	808214a <_ZN5Print11printNumberEmh>

0808219e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808219e:	f7ff bff3 	b.w	8082188 <_ZN5Print5printEmi>

080821a2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80821a2:	b538      	push	{r3, r4, r5, lr}
 80821a4:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80821a6:	f7ff ffef 	bl	8082188 <_ZN5Print5printEmi>
 80821aa:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80821ac:	4628      	mov	r0, r5
 80821ae:	f7ff ffb6 	bl	808211e <_ZN5Print7printlnEv>
  return n;
}
 80821b2:	4420      	add	r0, r4
 80821b4:	bd38      	pop	{r3, r4, r5, pc}

080821b6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80821b6:	b40c      	push	{r2, r3}
 80821b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80821bc:	b087      	sub	sp, #28
 80821be:	af00      	add	r7, sp, #0
 80821c0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80821c4:	f854 9b04 	ldr.w	r9, [r4], #4
 80821c8:	4605      	mov	r5, r0
 80821ca:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80821cc:	4623      	mov	r3, r4
 80821ce:	464a      	mov	r2, r9
 80821d0:	2114      	movs	r1, #20
 80821d2:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80821d4:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80821d6:	f7ff febf 	bl	8081f58 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80821da:	2813      	cmp	r0, #19
 80821dc:	d805      	bhi.n	80821ea <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80821de:	1d39      	adds	r1, r7, #4
 80821e0:	4628      	mov	r0, r5
 80821e2:	f7fe ffad 	bl	8081140 <_ZN5Print5writeEPKc>
 80821e6:	4604      	mov	r4, r0
 80821e8:	e013      	b.n	8082212 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80821ea:	f100 0308 	add.w	r3, r0, #8
 80821ee:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80821f2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80821f4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80821f8:	1c41      	adds	r1, r0, #1
 80821fa:	4623      	mov	r3, r4
 80821fc:	464a      	mov	r2, r9
 80821fe:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8082200:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8082202:	f7ff fea9 	bl	8081f58 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082206:	4669      	mov	r1, sp
 8082208:	4628      	mov	r0, r5
 808220a:	f7fe ff99 	bl	8081140 <_ZN5Print5writeEPKc>
 808220e:	4604      	mov	r4, r0
 8082210:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8082212:	b11e      	cbz	r6, 808221c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8082214:	4628      	mov	r0, r5
 8082216:	f7ff ff82 	bl	808211e <_ZN5Print7printlnEv>
 808221a:	4404      	add	r4, r0
    return n;
}
 808221c:	4620      	mov	r0, r4
 808221e:	371c      	adds	r7, #28
 8082220:	46bd      	mov	sp, r7
 8082222:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082226:	b002      	add	sp, #8
 8082228:	4770      	bx	lr
	...

0808222c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808222c:	4a01      	ldr	r2, [pc, #4]	; (8082234 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808222e:	4b02      	ldr	r3, [pc, #8]	; (8082238 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082230:	601a      	str	r2, [r3, #0]
 8082232:	4770      	bx	lr
 8082234:	08083dd9 	.word	0x08083dd9
 8082238:	2000094c 	.word	0x2000094c

0808223c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808223c:	4b02      	ldr	r3, [pc, #8]	; (8082248 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808223e:	681a      	ldr	r2, [r3, #0]
 8082240:	4b02      	ldr	r3, [pc, #8]	; (808224c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082242:	601a      	str	r2, [r3, #0]
 8082244:	4770      	bx	lr
 8082246:	bf00      	nop
 8082248:	20000400 	.word	0x20000400
 808224c:	20000950 	.word	0x20000950

08082250 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082250:	2100      	movs	r1, #0
 8082252:	f7ff be2d 	b.w	8081eb0 <system_delay_ms>

08082256 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082256:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082258:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808225a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808225c:	b113      	cbz	r3, 8082264 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808225e:	2203      	movs	r2, #3
 8082260:	4601      	mov	r1, r0
 8082262:	4798      	blx	r3
    }
 8082264:	4620      	mov	r0, r4
 8082266:	bd10      	pop	{r4, pc}

08082268 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082268:	b510      	push	{r4, lr}
 808226a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808226c:	f7ff fff3 	bl	8082256 <_ZNSt14_Function_baseD1Ev>
 8082270:	4620      	mov	r0, r4
 8082272:	bd10      	pop	{r4, pc}

08082274 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082274:	4803      	ldr	r0, [pc, #12]	; (8082284 <_GLOBAL__sub_I_RGB+0x10>)
 8082276:	2300      	movs	r3, #0
 8082278:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808227a:	4a03      	ldr	r2, [pc, #12]	; (8082288 <_GLOBAL__sub_I_RGB+0x14>)
 808227c:	4903      	ldr	r1, [pc, #12]	; (808228c <_GLOBAL__sub_I_RGB+0x18>)
 808227e:	f000 bc07 	b.w	8082a90 <__aeabi_atexit>
 8082282:	bf00      	nop
 8082284:	20000954 	.word	0x20000954
 8082288:	20000468 	.word	0x20000468
 808228c:	08082269 	.word	0x08082269

08082290 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8082290:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 8082292:	0909      	lsrs	r1, r1, #4
 8082294:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8082298:	f001 fa1c 	bl	80836d4 <__aeabi_i2f>
 808229c:	4901      	ldr	r1, [pc, #4]	; (80822a4 <_ZN6detail9_getVCellEhh+0x14>)
 808229e:	f001 fb21 	bl	80838e4 <__aeabi_fdiv>
	}
 80822a2:	bd08      	pop	{r3, pc}
 80822a4:	44480000 	.word	0x44480000

080822a8 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80822a8:	6800      	ldr	r0, [r0, #0]
 80822aa:	f000 bb0a 	b.w	80828c2 <_ZN7TwoWire4lockEv>

080822ae <_ZN9FuelGaugeC1ER7TwoWireb>:
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80822ae:	b510      	push	{r4, lr}
 80822b0:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80822b2:	6001      	str	r1, [r0, #0]
 80822b4:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 80822b6:	b10a      	cbz	r2, 80822bc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80822b8:	f7ff fff6 	bl	80822a8 <_ZN9FuelGauge4lockEv>
    }
}
 80822bc:	4620      	mov	r0, r4
 80822be:	bd10      	pop	{r4, pc}

080822c0 <_ZN9FuelGaugeC1Eb>:

#include "spark_wiring_fuel.h"
#include <mutex>
#include "spark_wiring_power.h"

FuelGauge::FuelGauge(bool _lock) :
 80822c0:	b538      	push	{r3, r4, r5, lr}
 80822c2:	4604      	mov	r4, r0
 80822c4:	460d      	mov	r5, r1
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
    FuelGauge(Wire3, _lock)
 80822c6:	f000 fbc3 	bl	8082a50 <_Z20__fetch_global_Wire3v>
 80822ca:	462a      	mov	r2, r5
 80822cc:	4601      	mov	r1, r0
 80822ce:	4620      	mov	r0, r4
 80822d0:	f7ff ffed 	bl	80822ae <_ZN9FuelGaugeC1ER7TwoWireb>
#else
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}
 80822d4:	4620      	mov	r0, r4
 80822d6:	bd38      	pop	{r3, r4, r5, pc}

080822d8 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80822d8:	6800      	ldr	r0, [r0, #0]
 80822da:	f000 bafb 	b.w	80828d4 <_ZN7TwoWire6unlockEv>

080822de <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80822de:	b510      	push	{r4, lr}
{
    if (lock_) {
 80822e0:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80822e2:	4604      	mov	r4, r0
{
    if (lock_) {
 80822e4:	b10b      	cbz	r3, 80822ea <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80822e6:	f7ff fff7 	bl	80822d8 <_ZN9FuelGauge6unlockEv>
    }
}
 80822ea:	4620      	mov	r0, r4
 80822ec:	bd10      	pop	{r4, pc}

080822ee <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80822ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80822f0:	4604      	mov	r4, r0
 80822f2:	460f      	mov	r7, r1
 80822f4:	4616      	mov	r6, r2
 80822f6:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80822f8:	f7ff ffd6 	bl	80822a8 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80822fc:	6820      	ldr	r0, [r4, #0]
 80822fe:	2136      	movs	r1, #54	; 0x36
 8082300:	f000 fad4 	bl	80828ac <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8082304:	6820      	ldr	r0, [r4, #0]
 8082306:	4639      	mov	r1, r7
 8082308:	6803      	ldr	r3, [r0, #0]
 808230a:	689b      	ldr	r3, [r3, #8]
 808230c:	4798      	blx	r3
    i2c_.endTransmission(true);
 808230e:	2101      	movs	r1, #1
 8082310:	6820      	ldr	r0, [r4, #0]
 8082312:	f000 face 	bl	80828b2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8082316:	2202      	movs	r2, #2
 8082318:	2136      	movs	r1, #54	; 0x36
 808231a:	2301      	movs	r3, #1
 808231c:	6820      	ldr	r0, [r4, #0]
 808231e:	f000 fabc 	bl	808289a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8082322:	6820      	ldr	r0, [r4, #0]
 8082324:	6803      	ldr	r3, [r0, #0]
 8082326:	695b      	ldr	r3, [r3, #20]
 8082328:	4798      	blx	r3
 808232a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808232c:	6820      	ldr	r0, [r4, #0]
 808232e:	6803      	ldr	r3, [r0, #0]
 8082330:	695b      	ldr	r3, [r3, #20]
 8082332:	4798      	blx	r3
 8082334:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8082336:	4620      	mov	r0, r4
}
 8082338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808233c:	f7ff bfcc 	b.w	80822d8 <_ZN9FuelGauge6unlockEv>

08082340 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 8082340:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 8082342:	2200      	movs	r2, #0
	byte LSB = 0;
 8082344:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 8082346:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 808234a:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 808234e:	2102      	movs	r1, #2
 8082350:	f10d 0206 	add.w	r2, sp, #6
 8082354:	f7ff ffcb 	bl	80822ee <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 8082358:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808235c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8082360:	b003      	add	sp, #12
 8082362:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 8082366:	f7ff bf93 	b.w	8082290 <_ZN6detail9_getVCellEhh>
	...

0808236c <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808236c:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808236e:	2200      	movs	r2, #0
	byte LSB = 0;
 8082370:	ab02      	add	r3, sp, #8
 8082372:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8082376:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808237a:	2104      	movs	r1, #4
 808237c:	f10d 0206 	add.w	r2, sp, #6
 8082380:	f7ff ffb5 	bl	80822ee <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8082384:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082388:	f000 fe22 	bl	8082fd0 <__aeabi_i2d>
 808238c:	2200      	movs	r2, #0
 808238e:	4b08      	ldr	r3, [pc, #32]	; (80823b0 <_ZN9FuelGauge6getSoCEv+0x44>)
 8082390:	f000 fe84 	bl	808309c <__aeabi_dmul>
 8082394:	f001 f894 	bl	80834c0 <__aeabi_d2f>
 8082398:	4604      	mov	r4, r0
 808239a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808239e:	f001 f999 	bl	80836d4 <__aeabi_i2f>
 80823a2:	4601      	mov	r1, r0
 80823a4:	4620      	mov	r0, r4
 80823a6:	f001 f8e1 	bl	808356c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80823aa:	b002      	add	sp, #8
 80823ac:	bd10      	pop	{r4, pc}
 80823ae:	bf00      	nop
 80823b0:	3f700000 	.word	0x3f700000

080823b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80823b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80823b6:	4b18      	ldr	r3, [pc, #96]	; (8082418 <serialEventRun+0x64>)
 80823b8:	b133      	cbz	r3, 80823c8 <serialEventRun+0x14>
 80823ba:	f000 f937 	bl	808262c <_Z16_fetch_usbserialv>
 80823be:	6803      	ldr	r3, [r0, #0]
 80823c0:	691b      	ldr	r3, [r3, #16]
 80823c2:	4798      	blx	r3
 80823c4:	2800      	cmp	r0, #0
 80823c6:	dc1e      	bgt.n	8082406 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80823c8:	4b14      	ldr	r3, [pc, #80]	; (808241c <serialEventRun+0x68>)
 80823ca:	b133      	cbz	r3, 80823da <serialEventRun+0x26>
 80823cc:	f000 f9f8 	bl	80827c0 <_Z22__fetch_global_Serial1v>
 80823d0:	6803      	ldr	r3, [r0, #0]
 80823d2:	691b      	ldr	r3, [r3, #16]
 80823d4:	4798      	blx	r3
 80823d6:	2800      	cmp	r0, #0
 80823d8:	dc18      	bgt.n	808240c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80823da:	4b11      	ldr	r3, [pc, #68]	; (8082420 <serialEventRun+0x6c>)
 80823dc:	b10b      	cbz	r3, 80823e2 <serialEventRun+0x2e>
 80823de:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80823e2:	4b10      	ldr	r3, [pc, #64]	; (8082424 <serialEventRun+0x70>)
 80823e4:	b10b      	cbz	r3, 80823ea <serialEventRun+0x36>
 80823e6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80823ea:	4b0f      	ldr	r3, [pc, #60]	; (8082428 <serialEventRun+0x74>)
 80823ec:	b10b      	cbz	r3, 80823f2 <serialEventRun+0x3e>
 80823ee:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80823f2:	4b0e      	ldr	r3, [pc, #56]	; (808242c <serialEventRun+0x78>)
 80823f4:	b17b      	cbz	r3, 8082416 <serialEventRun+0x62>
 80823f6:	f000 f955 	bl	80826a4 <_Z17_fetch_usbserial1v>
 80823fa:	6803      	ldr	r3, [r0, #0]
 80823fc:	691b      	ldr	r3, [r3, #16]
 80823fe:	4798      	blx	r3
 8082400:	2800      	cmp	r0, #0
 8082402:	dc06      	bgt.n	8082412 <serialEventRun+0x5e>
 8082404:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082406:	f3af 8000 	nop.w
 808240a:	e7dd      	b.n	80823c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808240c:	f3af 8000 	nop.w
 8082410:	e7e3      	b.n	80823da <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082412:	f3af 8000 	nop.w
 8082416:	bd08      	pop	{r3, pc}
	...

08082430 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082430:	b508      	push	{r3, lr}
	serialEventRun();
 8082432:	f7ff ffbf 	bl	80823b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082436:	f7ff fc3b 	bl	8081cb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808243a:	4b01      	ldr	r3, [pc, #4]	; (8082440 <_post_loop+0x10>)
 808243c:	6018      	str	r0, [r3, #0]
 808243e:	bd08      	pop	{r3, pc}
 8082440:	20000e50 	.word	0x20000e50

08082444 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082444:	4802      	ldr	r0, [pc, #8]	; (8082450 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082446:	4a03      	ldr	r2, [pc, #12]	; (8082454 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082448:	4903      	ldr	r1, [pc, #12]	; (8082458 <_Z33system_initialize_user_backup_ramv+0x14>)
 808244a:	1a12      	subs	r2, r2, r0
 808244c:	f001 bb03 	b.w	8083a56 <memcpy>
 8082450:	40024000 	.word	0x40024000
 8082454:	40024004 	.word	0x40024004
 8082458:	08083fb0 	.word	0x08083fb0

0808245c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808245c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808245e:	2300      	movs	r3, #0
 8082460:	9300      	str	r3, [sp, #0]
 8082462:	461a      	mov	r2, r3
 8082464:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082468:	f7ff fd34 	bl	8081ed4 <system_ctrl_set_result>
}
 808246c:	b003      	add	sp, #12
 808246e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082474 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082474:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082476:	8843      	ldrh	r3, [r0, #2]
 8082478:	2b0a      	cmp	r3, #10
 808247a:	d008      	beq.n	808248e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808247c:	2b50      	cmp	r3, #80	; 0x50
 808247e:	d109      	bne.n	8082494 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082480:	4b09      	ldr	r3, [pc, #36]	; (80824a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082482:	681b      	ldr	r3, [r3, #0]
 8082484:	b13b      	cbz	r3, 8082496 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082486:	b003      	add	sp, #12
 8082488:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808248c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808248e:	f7ff ffe5 	bl	808245c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082492:	e006      	b.n	80824a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082494:	2300      	movs	r3, #0
 8082496:	9300      	str	r3, [sp, #0]
 8082498:	461a      	mov	r2, r3
 808249a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808249e:	f7ff fd19 	bl	8081ed4 <system_ctrl_set_result>
        break;
    }
}
 80824a2:	b003      	add	sp, #12
 80824a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80824a8:	20000964 	.word	0x20000964

080824ac <module_user_init_hook>:

void module_user_init_hook()
{
 80824ac:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80824ae:	4c10      	ldr	r4, [pc, #64]	; (80824f0 <module_user_init_hook+0x44>)
 80824b0:	4d10      	ldr	r5, [pc, #64]	; (80824f4 <module_user_init_hook+0x48>)
 80824b2:	6823      	ldr	r3, [r4, #0]
 80824b4:	42ab      	cmp	r3, r5
 80824b6:	4b10      	ldr	r3, [pc, #64]	; (80824f8 <module_user_init_hook+0x4c>)
 80824b8:	bf0c      	ite	eq
 80824ba:	2201      	moveq	r2, #1
 80824bc:	2200      	movne	r2, #0
 80824be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80824c0:	d002      	beq.n	80824c8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80824c2:	f7ff ffbf 	bl	8082444 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80824c6:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80824c8:	f7ff fbe2 	bl	8081c90 <HAL_RNG_GetRandomNumber>
 80824cc:	f001 fad6 	bl	8083a7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80824d0:	4b0a      	ldr	r3, [pc, #40]	; (80824fc <module_user_init_hook+0x50>)
 80824d2:	b11b      	cbz	r3, 80824dc <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80824d4:	f7ff fbdc 	bl	8081c90 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80824d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80824dc:	2100      	movs	r1, #0
 80824de:	4807      	ldr	r0, [pc, #28]	; (80824fc <module_user_init_hook+0x50>)
 80824e0:	f7ff fd1a 	bl	8081f18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80824e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80824e8:	2100      	movs	r1, #0
 80824ea:	4805      	ldr	r0, [pc, #20]	; (8082500 <module_user_init_hook+0x54>)
 80824ec:	f7ff bce8 	b.w	8081ec0 <system_ctrl_set_app_request_handler>
 80824f0:	40024000 	.word	0x40024000
 80824f4:	9a271c1e 	.word	0x9a271c1e
 80824f8:	20000968 	.word	0x20000968
 80824fc:	00000000 	.word	0x00000000
 8082500:	08082475 	.word	0x08082475

08082504 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082504:	4770      	bx	lr

08082506 <_ZN9IPAddressD0Ev>:
 8082506:	b510      	push	{r4, lr}
 8082508:	4604      	mov	r4, r0
 808250a:	f7fd fdc6 	bl	808009a <_ZdlPv>
 808250e:	4620      	mov	r0, r4
 8082510:	bd10      	pop	{r4, pc}

08082512 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082514:	460f      	mov	r7, r1
 8082516:	f100 0608 	add.w	r6, r0, #8
 808251a:	1d05      	adds	r5, r0, #4
 808251c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808251e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082522:	220a      	movs	r2, #10
 8082524:	4638      	mov	r0, r7
 8082526:	f7ff fe3a 	bl	808219e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808252a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808252c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808252e:	d007      	beq.n	8082540 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082530:	2c00      	cmp	r4, #0
 8082532:	d0f4      	beq.n	808251e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082534:	212e      	movs	r1, #46	; 0x2e
 8082536:	4638      	mov	r0, r7
 8082538:	f7ff fdee 	bl	8082118 <_ZN5Print5printEc>
 808253c:	4404      	add	r4, r0
 808253e:	e7ee      	b.n	808251e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082540:	4620      	mov	r0, r4
 8082542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082544 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082544:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082546:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808254a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808254e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082552:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082556:	6041      	str	r1, [r0, #4]
 8082558:	bd10      	pop	{r4, pc}
	...

0808255c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808255c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808255e:	4d04      	ldr	r5, [pc, #16]	; (8082570 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082560:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082562:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082566:	9500      	str	r5, [sp, #0]
 8082568:	f7ff ffec 	bl	8082544 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808256c:	b003      	add	sp, #12
 808256e:	bd30      	pop	{r4, r5, pc}
 8082570:	08083e34 	.word	0x08083e34

08082574 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082574:	7441      	strb	r1, [r0, #17]
 8082576:	4770      	bx	lr

08082578 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8082578:	4770      	bx	lr

0808257a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808257a:	2100      	movs	r1, #0
 808257c:	7c00      	ldrb	r0, [r0, #16]
 808257e:	f7ff bc6f 	b.w	8081e60 <HAL_USB_USART_Receive_Data>

08082582 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8082582:	2101      	movs	r1, #1
 8082584:	7c00      	ldrb	r0, [r0, #16]
 8082586:	f7ff bc6b 	b.w	8081e60 <HAL_USB_USART_Receive_Data>

0808258a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808258a:	7c00      	ldrb	r0, [r0, #16]
 808258c:	f7ff bc60 	b.w	8081e50 <HAL_USB_USART_Available_Data_For_Write>

08082590 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8082590:	7c00      	ldrb	r0, [r0, #16]
 8082592:	f7ff bc55 	b.w	8081e40 <HAL_USB_USART_Available_Data>

08082596 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8082596:	b538      	push	{r3, r4, r5, lr}
 8082598:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808259a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808259c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808259e:	f7ff fc57 	bl	8081e50 <HAL_USB_USART_Available_Data_For_Write>
 80825a2:	2800      	cmp	r0, #0
 80825a4:	dc01      	bgt.n	80825aa <_ZN9USBSerial5writeEh+0x14>
 80825a6:	7c60      	ldrb	r0, [r4, #17]
 80825a8:	b120      	cbz	r0, 80825b4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80825aa:	4629      	mov	r1, r5
 80825ac:	7c20      	ldrb	r0, [r4, #16]
 80825ae:	f7ff fc5f 	bl	8081e70 <HAL_USB_USART_Send_Data>
    return 1;
 80825b2:	2001      	movs	r0, #1
  }
  return 0;
}
 80825b4:	bd38      	pop	{r3, r4, r5, pc}

080825b6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80825b6:	7c00      	ldrb	r0, [r0, #16]
 80825b8:	f7ff bc62 	b.w	8081e80 <HAL_USB_USART_Flush_Data>

080825bc <_ZN9USBSerialD0Ev>:
 80825bc:	b510      	push	{r4, lr}
 80825be:	4604      	mov	r4, r0
 80825c0:	f7fd fd6b 	bl	808009a <_ZdlPv>
 80825c4:	4620      	mov	r0, r4
 80825c6:	bd10      	pop	{r4, pc}

080825c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80825c8:	b510      	push	{r4, lr}
 80825ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80825cc:	2300      	movs	r3, #0
 80825ce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80825d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80825d4:	60a3      	str	r3, [r4, #8]
 80825d6:	4b05      	ldr	r3, [pc, #20]	; (80825ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80825d8:	4608      	mov	r0, r1
 80825da:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80825dc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80825de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80825e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80825e2:	4611      	mov	r1, r2
 80825e4:	f7ff fc1c 	bl	8081e20 <HAL_USB_USART_Init>
}
 80825e8:	4620      	mov	r0, r4
 80825ea:	bd10      	pop	{r4, pc}
 80825ec:	08083e48 	.word	0x08083e48

080825f0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80825f0:	7c00      	ldrb	r0, [r0, #16]
 80825f2:	f7ff bc1d 	b.w	8081e30 <HAL_USB_USART_End>

080825f6 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80825f6:	7c00      	ldrb	r0, [r0, #16]
 80825f8:	f7ff bc4a 	b.w	8081e90 <HAL_USB_USART_Is_Enabled>

080825fc <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 80825fc:	f7ff bffb 	b.w	80825f6 <_ZN9USBSerial9isEnabledEv>

08082600 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082600:	b510      	push	{r4, lr}
 8082602:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082604:	2214      	movs	r2, #20
 8082606:	2100      	movs	r1, #0
 8082608:	f001 fa30 	bl	8083a6c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808260c:	4b05      	ldr	r3, [pc, #20]	; (8082624 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808260e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082610:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082612:	4b05      	ldr	r3, [pc, #20]	; (8082628 <_Z19acquireSerialBufferv+0x28>)
 8082614:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082616:	f240 1301 	movw	r3, #257	; 0x101
 808261a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808261c:	2381      	movs	r3, #129	; 0x81
 808261e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082620:	bd10      	pop	{r4, pc}
 8082622:	bf00      	nop
 8082624:	200009f1 	.word	0x200009f1
 8082628:	20000970 	.word	0x20000970

0808262c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808262c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808262e:	4d0e      	ldr	r5, [pc, #56]	; (8082668 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082630:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082632:	a801      	add	r0, sp, #4
 8082634:	f7ff ffe4 	bl	8082600 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082638:	6829      	ldr	r1, [r5, #0]
 808263a:	f011 0401 	ands.w	r4, r1, #1
 808263e:	d110      	bne.n	8082662 <_Z16_fetch_usbserialv+0x36>
 8082640:	4628      	mov	r0, r5
 8082642:	f7fd fd2c 	bl	808009e <__cxa_guard_acquire>
 8082646:	b160      	cbz	r0, 8082662 <_Z16_fetch_usbserialv+0x36>
 8082648:	aa01      	add	r2, sp, #4
 808264a:	4621      	mov	r1, r4
 808264c:	4807      	ldr	r0, [pc, #28]	; (808266c <_Z16_fetch_usbserialv+0x40>)
 808264e:	f7ff ffbb 	bl	80825c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082652:	4628      	mov	r0, r5
 8082654:	f7fd fd28 	bl	80800a8 <__cxa_guard_release>
 8082658:	4a05      	ldr	r2, [pc, #20]	; (8082670 <_Z16_fetch_usbserialv+0x44>)
 808265a:	4906      	ldr	r1, [pc, #24]	; (8082674 <_Z16_fetch_usbserialv+0x48>)
 808265c:	4803      	ldr	r0, [pc, #12]	; (808266c <_Z16_fetch_usbserialv+0x40>)
 808265e:	f000 fa17 	bl	8082a90 <__aeabi_atexit>
	return _usbserial;
}
 8082662:	4802      	ldr	r0, [pc, #8]	; (808266c <_Z16_fetch_usbserialv+0x40>)
 8082664:	b007      	add	sp, #28
 8082666:	bd30      	pop	{r4, r5, pc}
 8082668:	2000096c 	.word	0x2000096c
 808266c:	20000af4 	.word	0x20000af4
 8082670:	20000468 	.word	0x20000468
 8082674:	08082579 	.word	0x08082579

08082678 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082678:	b510      	push	{r4, lr}
 808267a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808267c:	2214      	movs	r2, #20
 808267e:	2100      	movs	r1, #0
 8082680:	f001 f9f4 	bl	8083a6c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082684:	4b05      	ldr	r3, [pc, #20]	; (808269c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082686:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082688:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808268a:	4b05      	ldr	r3, [pc, #20]	; (80826a0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808268c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808268e:	f240 1301 	movw	r3, #257	; 0x101
 8082692:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082694:	2381      	movs	r3, #129	; 0x81
 8082696:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082698:	bd10      	pop	{r4, pc}
 808269a:	bf00      	nop
 808269c:	20000ba4 	.word	0x20000ba4
 80826a0:	20000b0c 	.word	0x20000b0c

080826a4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80826a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80826a6:	4c0e      	ldr	r4, [pc, #56]	; (80826e0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80826a8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80826aa:	a801      	add	r0, sp, #4
 80826ac:	f7ff ffe4 	bl	8082678 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80826b0:	6823      	ldr	r3, [r4, #0]
 80826b2:	07db      	lsls	r3, r3, #31
 80826b4:	d410      	bmi.n	80826d8 <_Z17_fetch_usbserial1v+0x34>
 80826b6:	4620      	mov	r0, r4
 80826b8:	f7fd fcf1 	bl	808009e <__cxa_guard_acquire>
 80826bc:	b160      	cbz	r0, 80826d8 <_Z17_fetch_usbserial1v+0x34>
 80826be:	aa01      	add	r2, sp, #4
 80826c0:	2101      	movs	r1, #1
 80826c2:	4808      	ldr	r0, [pc, #32]	; (80826e4 <_Z17_fetch_usbserial1v+0x40>)
 80826c4:	f7ff ff80 	bl	80825c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80826c8:	4620      	mov	r0, r4
 80826ca:	f7fd fced 	bl	80800a8 <__cxa_guard_release>
 80826ce:	4a06      	ldr	r2, [pc, #24]	; (80826e8 <_Z17_fetch_usbserial1v+0x44>)
 80826d0:	4906      	ldr	r1, [pc, #24]	; (80826ec <_Z17_fetch_usbserial1v+0x48>)
 80826d2:	4804      	ldr	r0, [pc, #16]	; (80826e4 <_Z17_fetch_usbserial1v+0x40>)
 80826d4:	f000 f9dc 	bl	8082a90 <__aeabi_atexit>
  return _usbserial1;
}
 80826d8:	4802      	ldr	r0, [pc, #8]	; (80826e4 <_Z17_fetch_usbserial1v+0x40>)
 80826da:	b006      	add	sp, #24
 80826dc:	bd10      	pop	{r4, pc}
 80826de:	bf00      	nop
 80826e0:	20000b08 	.word	0x20000b08
 80826e4:	20000b90 	.word	0x20000b90
 80826e8:	20000468 	.word	0x20000468
 80826ec:	08082579 	.word	0x08082579

080826f0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80826f0:	2200      	movs	r2, #0
 80826f2:	4611      	mov	r1, r2
 80826f4:	4610      	mov	r0, r2
 80826f6:	f7ff bbf7 	b.w	8081ee8 <network_ready>
	...

080826fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80826fc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80826fe:	4c0b      	ldr	r4, [pc, #44]	; (808272c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8082700:	2528      	movs	r5, #40	; 0x28
 8082702:	462a      	mov	r2, r5
 8082704:	2100      	movs	r1, #0
 8082706:	4620      	mov	r0, r4
 8082708:	f001 f9b0 	bl	8083a6c <memset>
        cid = -1;
 808270c:	f04f 33ff 	mov.w	r3, #4294967295
 8082710:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8082712:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8082714:	4c06      	ldr	r4, [pc, #24]	; (8082730 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8082716:	4b07      	ldr	r3, [pc, #28]	; (8082734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8082718:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 808271a:	252c      	movs	r5, #44	; 0x2c
 808271c:	f840 3b04 	str.w	r3, [r0], #4
 8082720:	462a      	mov	r2, r5
 8082722:	2100      	movs	r1, #0
 8082724:	f001 f9a2 	bl	8083a6c <memset>
        size = sizeof(*this);
 8082728:	80a5      	strh	r5, [r4, #4]
 808272a:	bd38      	pop	{r3, r4, r5, pc}
 808272c:	20000cd8 	.word	0x20000cd8
 8082730:	20000ca8 	.word	0x20000ca8
 8082734:	08083e78 	.word	0x08083e78

08082738 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082738:	4770      	bx	lr

0808273a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808273a:	7441      	strb	r1, [r0, #17]
 808273c:	4770      	bx	lr

0808273e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808273e:	7c00      	ldrb	r0, [r0, #16]
 8082740:	f7ff bb06 	b.w	8081d50 <HAL_USART_Available_Data_For_Write>

08082744 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8082744:	7c00      	ldrb	r0, [r0, #16]
 8082746:	f7ff badb 	b.w	8081d00 <HAL_USART_Available_Data>

0808274a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808274a:	7c00      	ldrb	r0, [r0, #16]
 808274c:	f7ff bae8 	b.w	8081d20 <HAL_USART_Peek_Data>

08082750 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8082750:	7c00      	ldrb	r0, [r0, #16]
 8082752:	f7ff badd 	b.w	8081d10 <HAL_USART_Read_Data>

08082756 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082756:	7c00      	ldrb	r0, [r0, #16]
 8082758:	f7ff baea 	b.w	8081d30 <HAL_USART_Flush_Data>

0808275c <_ZN11USARTSerialD0Ev>:
 808275c:	b510      	push	{r4, lr}
 808275e:	4604      	mov	r4, r0
 8082760:	f7fd fc9b 	bl	808009a <_ZdlPv>
 8082764:	4620      	mov	r0, r4
 8082766:	bd10      	pop	{r4, pc}

08082768 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082768:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808276a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808276c:	4604      	mov	r4, r0
 808276e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082770:	b925      	cbnz	r5, 808277c <_ZN11USARTSerial5writeEh+0x14>
 8082772:	7c00      	ldrb	r0, [r0, #16]
 8082774:	f7ff faec 	bl	8081d50 <HAL_USART_Available_Data_For_Write>
 8082778:	2800      	cmp	r0, #0
 808277a:	dd05      	ble.n	8082788 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808277c:	4631      	mov	r1, r6
 808277e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082784:	f7ff bab4 	b.w	8081cf0 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082788:	4628      	mov	r0, r5
 808278a:	bd70      	pop	{r4, r5, r6, pc}

0808278c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808278c:	b510      	push	{r4, lr}
 808278e:	4604      	mov	r4, r0
 8082790:	4608      	mov	r0, r1
 8082792:	4611      	mov	r1, r2
 8082794:	2200      	movs	r2, #0
 8082796:	6062      	str	r2, [r4, #4]
 8082798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808279c:	60a2      	str	r2, [r4, #8]
 808279e:	4a05      	ldr	r2, [pc, #20]	; (80827b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80827a0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80827a2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80827a4:	2201      	movs	r2, #1
 80827a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80827a8:	461a      	mov	r2, r3
 80827aa:	f7ff fa99 	bl	8081ce0 <HAL_USART_Init>
}
 80827ae:	4620      	mov	r0, r4
 80827b0:	bd10      	pop	{r4, pc}
 80827b2:	bf00      	nop
 80827b4:	08083e84 	.word	0x08083e84

080827b8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80827b8:	7c00      	ldrb	r0, [r0, #16]
 80827ba:	f7ff bac1 	b.w	8081d40 <HAL_USART_Is_Enabled>
	...

080827c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80827c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80827c2:	4d0c      	ldr	r5, [pc, #48]	; (80827f4 <_Z22__fetch_global_Serial1v+0x34>)
 80827c4:	6829      	ldr	r1, [r5, #0]
 80827c6:	f011 0401 	ands.w	r4, r1, #1
 80827ca:	d111      	bne.n	80827f0 <_Z22__fetch_global_Serial1v+0x30>
 80827cc:	4628      	mov	r0, r5
 80827ce:	f7fd fc66 	bl	808009e <__cxa_guard_acquire>
 80827d2:	b168      	cbz	r0, 80827f0 <_Z22__fetch_global_Serial1v+0x30>
 80827d4:	4a08      	ldr	r2, [pc, #32]	; (80827f8 <_Z22__fetch_global_Serial1v+0x38>)
 80827d6:	4621      	mov	r1, r4
 80827d8:	4b08      	ldr	r3, [pc, #32]	; (80827fc <_Z22__fetch_global_Serial1v+0x3c>)
 80827da:	4809      	ldr	r0, [pc, #36]	; (8082800 <_Z22__fetch_global_Serial1v+0x40>)
 80827dc:	f7ff ffd6 	bl	808278c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80827e0:	4628      	mov	r0, r5
 80827e2:	f7fd fc61 	bl	80800a8 <__cxa_guard_release>
 80827e6:	4a07      	ldr	r2, [pc, #28]	; (8082804 <_Z22__fetch_global_Serial1v+0x44>)
 80827e8:	4907      	ldr	r1, [pc, #28]	; (8082808 <_Z22__fetch_global_Serial1v+0x48>)
 80827ea:	4805      	ldr	r0, [pc, #20]	; (8082800 <_Z22__fetch_global_Serial1v+0x40>)
 80827ec:	f000 f950 	bl	8082a90 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80827f0:	4803      	ldr	r0, [pc, #12]	; (8082800 <_Z22__fetch_global_Serial1v+0x40>)
 80827f2:	bd38      	pop	{r3, r4, r5, pc}
 80827f4:	20000d98 	.word	0x20000d98
 80827f8:	20000d9c 	.word	0x20000d9c
 80827fc:	20000d14 	.word	0x20000d14
 8082800:	20000d00 	.word	0x20000d00
 8082804:	20000468 	.word	0x20000468
 8082808:	08082739 	.word	0x08082739

0808280c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808280c:	4770      	bx	lr

0808280e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808280e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082810:	4606      	mov	r6, r0
 8082812:	4615      	mov	r5, r2
 8082814:	460c      	mov	r4, r1
 8082816:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082818:	42bc      	cmp	r4, r7
 808281a:	d006      	beq.n	808282a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808281c:	6833      	ldr	r3, [r6, #0]
 808281e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082822:	689b      	ldr	r3, [r3, #8]
 8082824:	4630      	mov	r0, r6
 8082826:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082828:	e7f6      	b.n	8082818 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808282a:	4628      	mov	r0, r5
 808282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808282e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808282e:	2200      	movs	r2, #0
 8082830:	7c00      	ldrb	r0, [r0, #16]
 8082832:	f7ff baad 	b.w	8081d90 <HAL_I2C_Write_Data>

08082836 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082836:	2100      	movs	r1, #0
 8082838:	7c00      	ldrb	r0, [r0, #16]
 808283a:	f7ff bab1 	b.w	8081da0 <HAL_I2C_Available_Data>

0808283e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808283e:	2100      	movs	r1, #0
 8082840:	7c00      	ldrb	r0, [r0, #16]
 8082842:	f7ff bab5 	b.w	8081db0 <HAL_I2C_Read_Data>

08082846 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082846:	2100      	movs	r1, #0
 8082848:	7c00      	ldrb	r0, [r0, #16]
 808284a:	f7ff bab9 	b.w	8081dc0 <HAL_I2C_Peek_Data>

0808284e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808284e:	2100      	movs	r1, #0
 8082850:	7c00      	ldrb	r0, [r0, #16]
 8082852:	f7ff babd 	b.w	8081dd0 <HAL_I2C_Flush_Data>

08082856 <_ZN7TwoWireD0Ev>:
 8082856:	b510      	push	{r4, lr}
 8082858:	4604      	mov	r4, r0
 808285a:	f7fd fc1e 	bl	808009a <_ZdlPv>
 808285e:	4620      	mov	r0, r4
 8082860:	bd10      	pop	{r4, pc}
	...

08082864 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082864:	b510      	push	{r4, lr}
 8082866:	4604      	mov	r4, r0
 8082868:	4608      	mov	r0, r1
 808286a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808286e:	60a3      	str	r3, [r4, #8]
 8082870:	4b04      	ldr	r3, [pc, #16]	; (8082884 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8082872:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082874:	7420      	strb	r0, [r4, #16]
 8082876:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082878:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808287a:	f7ff fab9 	bl	8081df0 <HAL_I2C_Init>

}
 808287e:	4620      	mov	r0, r4
 8082880:	bd10      	pop	{r4, pc}
 8082882:	bf00      	nop
 8082884:	08083eb4 	.word	0x08083eb4

08082888 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082888:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808288a:	2400      	movs	r4, #0
 808288c:	7c00      	ldrb	r0, [r0, #16]
 808288e:	9400      	str	r4, [sp, #0]
 8082890:	f7ff fa66 	bl	8081d60 <HAL_I2C_Request_Data>
  return result;
}
 8082894:	b2c0      	uxtb	r0, r0
 8082896:	b002      	add	sp, #8
 8082898:	bd10      	pop	{r4, pc}

0808289a <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808289a:	b2db      	uxtb	r3, r3
 808289c:	b2d2      	uxtb	r2, r2
 808289e:	b2c9      	uxtb	r1, r1
 80828a0:	f7ff bff2 	b.w	8082888 <_ZN7TwoWire11requestFromEhhh>

080828a4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80828a4:	2200      	movs	r2, #0
 80828a6:	7c00      	ldrb	r0, [r0, #16]
 80828a8:	f7ff ba62 	b.w	8081d70 <HAL_I2C_Begin_Transmission>

080828ac <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80828ac:	b2c9      	uxtb	r1, r1
 80828ae:	f7ff bff9 	b.w	80828a4 <_ZN7TwoWire17beginTransmissionEh>

080828b2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80828b2:	2200      	movs	r2, #0
 80828b4:	7c00      	ldrb	r0, [r0, #16]
 80828b6:	f7ff ba63 	b.w	8081d80 <HAL_I2C_End_Transmission>

080828ba <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80828ba:	2100      	movs	r1, #0
 80828bc:	7c00      	ldrb	r0, [r0, #16]
 80828be:	f7ff ba8f 	b.w	8081de0 <HAL_I2C_Is_Enabled>

080828c2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80828c2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80828c4:	2100      	movs	r1, #0
 80828c6:	7c00      	ldrb	r0, [r0, #16]
 80828c8:	f7ff fa9a 	bl	8081e00 <HAL_I2C_Acquire>
}
 80828cc:	fab0 f080 	clz	r0, r0
 80828d0:	0940      	lsrs	r0, r0, #5
 80828d2:	bd08      	pop	{r3, pc}

080828d4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80828d4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80828d6:	2100      	movs	r1, #0
 80828d8:	7c00      	ldrb	r0, [r0, #16]
 80828da:	f7ff fa99 	bl	8081e10 <HAL_I2C_Release>
}
 80828de:	fab0 f080 	clz	r0, r0
 80828e2:	0940      	lsrs	r0, r0, #5
 80828e4:	bd08      	pop	{r3, pc}
	...

080828e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80828e8:	b510      	push	{r4, lr}
 80828ea:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80828ec:	480f      	ldr	r0, [pc, #60]	; (808292c <pinAvailable+0x44>)
 80828ee:	f7ff fbd6 	bl	808209e <_ZN8SPIClass9isEnabledEv>
 80828f2:	b128      	cbz	r0, 8082900 <pinAvailable+0x18>
 80828f4:	f1a4 030d 	sub.w	r3, r4, #13
 80828f8:	2b02      	cmp	r3, #2
 80828fa:	d801      	bhi.n	8082900 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80828fc:	2000      	movs	r0, #0
 80828fe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082900:	f000 f886 	bl	8082a10 <_Z19__fetch_global_Wirev>
 8082904:	f7ff ffd9 	bl	80828ba <_ZN7TwoWire9isEnabledEv>
 8082908:	b108      	cbz	r0, 808290e <pinAvailable+0x26>
 808290a:	2c01      	cmp	r4, #1
 808290c:	d9f6      	bls.n	80828fc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808290e:	f7ff ff57 	bl	80827c0 <_Z22__fetch_global_Serial1v>
 8082912:	f7ff ff51 	bl	80827b8 <_ZN11USARTSerial9isEnabledEv>
 8082916:	b118      	cbz	r0, 8082920 <pinAvailable+0x38>
 8082918:	f1a4 0312 	sub.w	r3, r4, #18
 808291c:	2b01      	cmp	r3, #1
 808291e:	d9ed      	bls.n	80828fc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082920:	2c2e      	cmp	r4, #46	; 0x2e
 8082922:	bf8c      	ite	hi
 8082924:	2000      	movhi	r0, #0
 8082926:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082928:	bd10      	pop	{r4, pc}
 808292a:	bf00      	nop
 808292c:	20000e20 	.word	0x20000e20

08082930 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082930:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082932:	b538      	push	{r3, r4, r5, lr}
 8082934:	4604      	mov	r4, r0
 8082936:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082938:	d80a      	bhi.n	8082950 <pinMode+0x20>
 808293a:	29ff      	cmp	r1, #255	; 0xff
 808293c:	d008      	beq.n	8082950 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808293e:	f7ff ffd3 	bl	80828e8 <pinAvailable>
 8082942:	b128      	cbz	r0, 8082950 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082944:	4629      	mov	r1, r5
 8082946:	4620      	mov	r0, r4
}
 8082948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808294c:	f7ff b938 	b.w	8081bc0 <HAL_Pin_Mode>
 8082950:	bd38      	pop	{r3, r4, r5, pc}

08082952 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082952:	b538      	push	{r3, r4, r5, lr}
 8082954:	4604      	mov	r4, r0
 8082956:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082958:	f7ff f93a 	bl	8081bd0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808295c:	28ff      	cmp	r0, #255	; 0xff
 808295e:	d010      	beq.n	8082982 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082960:	2806      	cmp	r0, #6
 8082962:	d804      	bhi.n	808296e <digitalWrite+0x1c>
 8082964:	234d      	movs	r3, #77	; 0x4d
 8082966:	fa23 f000 	lsr.w	r0, r3, r0
 808296a:	07c3      	lsls	r3, r0, #31
 808296c:	d409      	bmi.n	8082982 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808296e:	4620      	mov	r0, r4
 8082970:	f7ff ffba 	bl	80828e8 <pinAvailable>
 8082974:	b128      	cbz	r0, 8082982 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082976:	4629      	mov	r1, r5
 8082978:	4620      	mov	r0, r4
}
 808297a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808297e:	f7ff b92f 	b.w	8081be0 <HAL_GPIO_Write>
 8082982:	bd38      	pop	{r3, r4, r5, pc}

08082984 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082984:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082986:	4e11      	ldr	r6, [pc, #68]	; (80829cc <_GLOBAL__sub_I_SPI+0x48>)
 8082988:	4d11      	ldr	r5, [pc, #68]	; (80829d0 <_GLOBAL__sub_I_SPI+0x4c>)
 808298a:	4c12      	ldr	r4, [pc, #72]	; (80829d4 <_GLOBAL__sub_I_SPI+0x50>)
 808298c:	2100      	movs	r1, #0
 808298e:	4630      	mov	r0, r6
 8082990:	f7ff faf2 	bl	8081f78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082994:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082996:	4e10      	ldr	r6, [pc, #64]	; (80829d8 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082998:	462a      	mov	r2, r5
 808299a:	4621      	mov	r1, r4
 808299c:	f000 f878 	bl	8082a90 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80829a0:	2101      	movs	r1, #1
 80829a2:	4630      	mov	r0, r6
 80829a4:	f7ff fae8 	bl	8081f78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80829a8:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80829aa:	4e0c      	ldr	r6, [pc, #48]	; (80829dc <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80829ac:	462a      	mov	r2, r5
 80829ae:	4621      	mov	r1, r4
 80829b0:	f000 f86e 	bl	8082a90 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80829b4:	2102      	movs	r1, #2
 80829b6:	4630      	mov	r0, r6
 80829b8:	f7ff fade 	bl	8081f78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80829bc:	462a      	mov	r2, r5
 80829be:	4621      	mov	r1, r4
 80829c0:	4630      	mov	r0, r6
 80829c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80829c6:	f000 b863 	b.w	8082a90 <__aeabi_atexit>
 80829ca:	bf00      	nop
 80829cc:	20000e20 	.word	0x20000e20
 80829d0:	20000468 	.word	0x20000468
 80829d4:	08081f69 	.word	0x08081f69
 80829d8:	20000e30 	.word	0x20000e30
 80829dc:	20000e40 	.word	0x20000e40

080829e0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80829e0:	b513      	push	{r0, r1, r4, lr}
 80829e2:	4c08      	ldr	r4, [pc, #32]	; (8082a04 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80829e4:	2300      	movs	r3, #0
 80829e6:	461a      	mov	r2, r3
 80829e8:	4619      	mov	r1, r3
 80829ea:	9300      	str	r3, [sp, #0]
 80829ec:	4620      	mov	r0, r4
 80829ee:	f7ff fdb5 	bl	808255c <_ZN9IPAddressC1Ehhhh>
 80829f2:	4620      	mov	r0, r4
 80829f4:	4a04      	ldr	r2, [pc, #16]	; (8082a08 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80829f6:	4905      	ldr	r1, [pc, #20]	; (8082a0c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80829f8:	b002      	add	sp, #8
 80829fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80829fe:	f000 b847 	b.w	8082a90 <__aeabi_atexit>
 8082a02:	bf00      	nop
 8082a04:	20000e54 	.word	0x20000e54
 8082a08:	20000468 	.word	0x20000468
 8082a0c:	08082505 	.word	0x08082505

08082a10 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8082a10:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8082a12:	4d0b      	ldr	r5, [pc, #44]	; (8082a40 <_Z19__fetch_global_Wirev+0x30>)
 8082a14:	6829      	ldr	r1, [r5, #0]
 8082a16:	f011 0401 	ands.w	r4, r1, #1
 8082a1a:	d10f      	bne.n	8082a3c <_Z19__fetch_global_Wirev+0x2c>
 8082a1c:	4628      	mov	r0, r5
 8082a1e:	f7fd fb3e 	bl	808009e <__cxa_guard_acquire>
 8082a22:	b158      	cbz	r0, 8082a3c <_Z19__fetch_global_Wirev+0x2c>
 8082a24:	4621      	mov	r1, r4
 8082a26:	4807      	ldr	r0, [pc, #28]	; (8082a44 <_Z19__fetch_global_Wirev+0x34>)
 8082a28:	f7ff ff1c 	bl	8082864 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082a2c:	4628      	mov	r0, r5
 8082a2e:	f7fd fb3b 	bl	80800a8 <__cxa_guard_release>
 8082a32:	4a05      	ldr	r2, [pc, #20]	; (8082a48 <_Z19__fetch_global_Wirev+0x38>)
 8082a34:	4905      	ldr	r1, [pc, #20]	; (8082a4c <_Z19__fetch_global_Wirev+0x3c>)
 8082a36:	4803      	ldr	r0, [pc, #12]	; (8082a44 <_Z19__fetch_global_Wirev+0x34>)
 8082a38:	f000 f82a 	bl	8082a90 <__aeabi_atexit>
	return wire;
}
 8082a3c:	4801      	ldr	r0, [pc, #4]	; (8082a44 <_Z19__fetch_global_Wirev+0x34>)
 8082a3e:	bd38      	pop	{r3, r4, r5, pc}
 8082a40:	20000e5c 	.word	0x20000e5c
 8082a44:	20000e74 	.word	0x20000e74
 8082a48:	20000468 	.word	0x20000468
 8082a4c:	0808280d 	.word	0x0808280d

08082a50 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8082a50:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8082a52:	4c0b      	ldr	r4, [pc, #44]	; (8082a80 <_Z20__fetch_global_Wire3v+0x30>)
 8082a54:	6823      	ldr	r3, [r4, #0]
 8082a56:	07db      	lsls	r3, r3, #31
 8082a58:	d40f      	bmi.n	8082a7a <_Z20__fetch_global_Wire3v+0x2a>
 8082a5a:	4620      	mov	r0, r4
 8082a5c:	f7fd fb1f 	bl	808009e <__cxa_guard_acquire>
 8082a60:	b158      	cbz	r0, 8082a7a <_Z20__fetch_global_Wire3v+0x2a>
 8082a62:	2102      	movs	r1, #2
 8082a64:	4807      	ldr	r0, [pc, #28]	; (8082a84 <_Z20__fetch_global_Wire3v+0x34>)
 8082a66:	f7ff fefd 	bl	8082864 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082a6a:	4620      	mov	r0, r4
 8082a6c:	f7fd fb1c 	bl	80800a8 <__cxa_guard_release>
 8082a70:	4a05      	ldr	r2, [pc, #20]	; (8082a88 <_Z20__fetch_global_Wire3v+0x38>)
 8082a72:	4906      	ldr	r1, [pc, #24]	; (8082a8c <_Z20__fetch_global_Wire3v+0x3c>)
 8082a74:	4803      	ldr	r0, [pc, #12]	; (8082a84 <_Z20__fetch_global_Wire3v+0x34>)
 8082a76:	f000 f80b 	bl	8082a90 <__aeabi_atexit>
	return wire;
}
 8082a7a:	4802      	ldr	r0, [pc, #8]	; (8082a84 <_Z20__fetch_global_Wire3v+0x34>)
 8082a7c:	bd10      	pop	{r4, pc}
 8082a7e:	bf00      	nop
 8082a80:	20000e88 	.word	0x20000e88
 8082a84:	20000e60 	.word	0x20000e60
 8082a88:	20000468 	.word	0x20000468
 8082a8c:	0808280d 	.word	0x0808280d

08082a90 <__aeabi_atexit>:
 8082a90:	460b      	mov	r3, r1
 8082a92:	4601      	mov	r1, r0
 8082a94:	4618      	mov	r0, r3
 8082a96:	f000 bfc1 	b.w	8083a1c <__cxa_atexit>
	...

08082a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082a9c:	4b18      	ldr	r3, [pc, #96]	; (8082b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082a9e:	681a      	ldr	r2, [r3, #0]
 8082aa0:	07d1      	lsls	r1, r2, #31
 8082aa2:	bf5c      	itt	pl
 8082aa4:	2201      	movpl	r2, #1
 8082aa6:	601a      	strpl	r2, [r3, #0]
 8082aa8:	4b16      	ldr	r3, [pc, #88]	; (8082b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082aaa:	681a      	ldr	r2, [r3, #0]
 8082aac:	07d2      	lsls	r2, r2, #31
 8082aae:	bf5c      	itt	pl
 8082ab0:	2201      	movpl	r2, #1
 8082ab2:	601a      	strpl	r2, [r3, #0]
 8082ab4:	4b14      	ldr	r3, [pc, #80]	; (8082b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082ab6:	681a      	ldr	r2, [r3, #0]
 8082ab8:	07d0      	lsls	r0, r2, #31
 8082aba:	bf5c      	itt	pl
 8082abc:	2201      	movpl	r2, #1
 8082abe:	601a      	strpl	r2, [r3, #0]
 8082ac0:	4b12      	ldr	r3, [pc, #72]	; (8082b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082ac2:	681a      	ldr	r2, [r3, #0]
 8082ac4:	07d1      	lsls	r1, r2, #31
 8082ac6:	bf5c      	itt	pl
 8082ac8:	2201      	movpl	r2, #1
 8082aca:	601a      	strpl	r2, [r3, #0]
 8082acc:	4b10      	ldr	r3, [pc, #64]	; (8082b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082ace:	681a      	ldr	r2, [r3, #0]
 8082ad0:	07d2      	lsls	r2, r2, #31
 8082ad2:	bf5c      	itt	pl
 8082ad4:	2201      	movpl	r2, #1
 8082ad6:	601a      	strpl	r2, [r3, #0]
 8082ad8:	4b0e      	ldr	r3, [pc, #56]	; (8082b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082ada:	681a      	ldr	r2, [r3, #0]
 8082adc:	07d0      	lsls	r0, r2, #31
 8082ade:	bf5c      	itt	pl
 8082ae0:	2201      	movpl	r2, #1
 8082ae2:	601a      	strpl	r2, [r3, #0]
 8082ae4:	4b0c      	ldr	r3, [pc, #48]	; (8082b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082ae6:	681a      	ldr	r2, [r3, #0]
 8082ae8:	07d1      	lsls	r1, r2, #31
 8082aea:	bf5c      	itt	pl
 8082aec:	2201      	movpl	r2, #1
 8082aee:	601a      	strpl	r2, [r3, #0]
 8082af0:	4b0a      	ldr	r3, [pc, #40]	; (8082b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082af2:	681a      	ldr	r2, [r3, #0]
 8082af4:	07d2      	lsls	r2, r2, #31
 8082af6:	bf5c      	itt	pl
 8082af8:	2201      	movpl	r2, #1
 8082afa:	601a      	strpl	r2, [r3, #0]
 8082afc:	4770      	bx	lr
 8082afe:	bf00      	nop
 8082b00:	20000ea8 	.word	0x20000ea8
 8082b04:	20000ea4 	.word	0x20000ea4
 8082b08:	20000ea0 	.word	0x20000ea0
 8082b0c:	20000e9c 	.word	0x20000e9c
 8082b10:	20000e98 	.word	0x20000e98
 8082b14:	20000e94 	.word	0x20000e94
 8082b18:	20000e90 	.word	0x20000e90
 8082b1c:	20000e8c 	.word	0x20000e8c

08082b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082b20:	4b24      	ldr	r3, [pc, #144]	; (8082bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8082b22:	681a      	ldr	r2, [r3, #0]
 8082b24:	07d0      	lsls	r0, r2, #31
 8082b26:	bf5c      	itt	pl
 8082b28:	2201      	movpl	r2, #1
 8082b2a:	601a      	strpl	r2, [r3, #0]
 8082b2c:	4b22      	ldr	r3, [pc, #136]	; (8082bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082b2e:	681a      	ldr	r2, [r3, #0]
 8082b30:	07d1      	lsls	r1, r2, #31
 8082b32:	bf5c      	itt	pl
 8082b34:	2201      	movpl	r2, #1
 8082b36:	601a      	strpl	r2, [r3, #0]
 8082b38:	4b20      	ldr	r3, [pc, #128]	; (8082bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082b3a:	681a      	ldr	r2, [r3, #0]
 8082b3c:	07d2      	lsls	r2, r2, #31
 8082b3e:	bf5c      	itt	pl
 8082b40:	2201      	movpl	r2, #1
 8082b42:	601a      	strpl	r2, [r3, #0]
 8082b44:	4b1e      	ldr	r3, [pc, #120]	; (8082bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082b46:	681a      	ldr	r2, [r3, #0]
 8082b48:	07d0      	lsls	r0, r2, #31
 8082b4a:	bf5c      	itt	pl
 8082b4c:	2201      	movpl	r2, #1
 8082b4e:	601a      	strpl	r2, [r3, #0]
 8082b50:	4b1c      	ldr	r3, [pc, #112]	; (8082bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082b52:	681a      	ldr	r2, [r3, #0]
 8082b54:	07d1      	lsls	r1, r2, #31
 8082b56:	bf5c      	itt	pl
 8082b58:	2201      	movpl	r2, #1
 8082b5a:	601a      	strpl	r2, [r3, #0]
 8082b5c:	4b1a      	ldr	r3, [pc, #104]	; (8082bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8082b5e:	681a      	ldr	r2, [r3, #0]
 8082b60:	07d2      	lsls	r2, r2, #31
 8082b62:	bf5c      	itt	pl
 8082b64:	2201      	movpl	r2, #1
 8082b66:	601a      	strpl	r2, [r3, #0]
 8082b68:	4b18      	ldr	r3, [pc, #96]	; (8082bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8082b6a:	681a      	ldr	r2, [r3, #0]
 8082b6c:	07d0      	lsls	r0, r2, #31
 8082b6e:	bf5c      	itt	pl
 8082b70:	2201      	movpl	r2, #1
 8082b72:	601a      	strpl	r2, [r3, #0]
 8082b74:	4b16      	ldr	r3, [pc, #88]	; (8082bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082b76:	681a      	ldr	r2, [r3, #0]
 8082b78:	07d1      	lsls	r1, r2, #31
 8082b7a:	bf5c      	itt	pl
 8082b7c:	2201      	movpl	r2, #1
 8082b7e:	601a      	strpl	r2, [r3, #0]
 8082b80:	4b14      	ldr	r3, [pc, #80]	; (8082bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082b82:	681a      	ldr	r2, [r3, #0]
 8082b84:	07d2      	lsls	r2, r2, #31
 8082b86:	bf5c      	itt	pl
 8082b88:	2201      	movpl	r2, #1
 8082b8a:	601a      	strpl	r2, [r3, #0]
 8082b8c:	4b12      	ldr	r3, [pc, #72]	; (8082bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082b8e:	681a      	ldr	r2, [r3, #0]
 8082b90:	07d0      	lsls	r0, r2, #31
 8082b92:	bf5c      	itt	pl
 8082b94:	2201      	movpl	r2, #1
 8082b96:	601a      	strpl	r2, [r3, #0]
 8082b98:	4b10      	ldr	r3, [pc, #64]	; (8082bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082b9a:	681a      	ldr	r2, [r3, #0]
 8082b9c:	07d1      	lsls	r1, r2, #31
 8082b9e:	bf5c      	itt	pl
 8082ba0:	2201      	movpl	r2, #1
 8082ba2:	601a      	strpl	r2, [r3, #0]
 8082ba4:	4b0e      	ldr	r3, [pc, #56]	; (8082be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082ba6:	681a      	ldr	r2, [r3, #0]
 8082ba8:	07d2      	lsls	r2, r2, #31
 8082baa:	bf5c      	itt	pl
 8082bac:	2201      	movpl	r2, #1
 8082bae:	601a      	strpl	r2, [r3, #0]
 8082bb0:	4770      	bx	lr
 8082bb2:	bf00      	nop
 8082bb4:	20000ed8 	.word	0x20000ed8
 8082bb8:	20000ed4 	.word	0x20000ed4
 8082bbc:	20000ed0 	.word	0x20000ed0
 8082bc0:	20000ecc 	.word	0x20000ecc
 8082bc4:	20000ec8 	.word	0x20000ec8
 8082bc8:	20000ec4 	.word	0x20000ec4
 8082bcc:	20000ec0 	.word	0x20000ec0
 8082bd0:	20000ebc 	.word	0x20000ebc
 8082bd4:	20000eb8 	.word	0x20000eb8
 8082bd8:	20000eb4 	.word	0x20000eb4
 8082bdc:	20000eb0 	.word	0x20000eb0
 8082be0:	20000eac 	.word	0x20000eac

08082be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082be4:	4b24      	ldr	r3, [pc, #144]	; (8082c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082be6:	681a      	ldr	r2, [r3, #0]
 8082be8:	07d0      	lsls	r0, r2, #31
 8082bea:	bf5c      	itt	pl
 8082bec:	2201      	movpl	r2, #1
 8082bee:	601a      	strpl	r2, [r3, #0]
 8082bf0:	4b22      	ldr	r3, [pc, #136]	; (8082c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082bf2:	681a      	ldr	r2, [r3, #0]
 8082bf4:	07d1      	lsls	r1, r2, #31
 8082bf6:	bf5c      	itt	pl
 8082bf8:	2201      	movpl	r2, #1
 8082bfa:	601a      	strpl	r2, [r3, #0]
 8082bfc:	4b20      	ldr	r3, [pc, #128]	; (8082c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8082bfe:	681a      	ldr	r2, [r3, #0]
 8082c00:	07d2      	lsls	r2, r2, #31
 8082c02:	bf5c      	itt	pl
 8082c04:	2201      	movpl	r2, #1
 8082c06:	601a      	strpl	r2, [r3, #0]
 8082c08:	4b1e      	ldr	r3, [pc, #120]	; (8082c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082c0a:	681a      	ldr	r2, [r3, #0]
 8082c0c:	07d0      	lsls	r0, r2, #31
 8082c0e:	bf5c      	itt	pl
 8082c10:	2201      	movpl	r2, #1
 8082c12:	601a      	strpl	r2, [r3, #0]
 8082c14:	4b1c      	ldr	r3, [pc, #112]	; (8082c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082c16:	681a      	ldr	r2, [r3, #0]
 8082c18:	07d1      	lsls	r1, r2, #31
 8082c1a:	bf5c      	itt	pl
 8082c1c:	2201      	movpl	r2, #1
 8082c1e:	601a      	strpl	r2, [r3, #0]
 8082c20:	4b1a      	ldr	r3, [pc, #104]	; (8082c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8082c22:	681a      	ldr	r2, [r3, #0]
 8082c24:	07d2      	lsls	r2, r2, #31
 8082c26:	bf5c      	itt	pl
 8082c28:	2201      	movpl	r2, #1
 8082c2a:	601a      	strpl	r2, [r3, #0]
 8082c2c:	4b18      	ldr	r3, [pc, #96]	; (8082c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082c2e:	681a      	ldr	r2, [r3, #0]
 8082c30:	07d0      	lsls	r0, r2, #31
 8082c32:	bf5c      	itt	pl
 8082c34:	2201      	movpl	r2, #1
 8082c36:	601a      	strpl	r2, [r3, #0]
 8082c38:	4b16      	ldr	r3, [pc, #88]	; (8082c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082c3a:	681a      	ldr	r2, [r3, #0]
 8082c3c:	07d1      	lsls	r1, r2, #31
 8082c3e:	bf5c      	itt	pl
 8082c40:	2201      	movpl	r2, #1
 8082c42:	601a      	strpl	r2, [r3, #0]
 8082c44:	4b14      	ldr	r3, [pc, #80]	; (8082c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8082c46:	681a      	ldr	r2, [r3, #0]
 8082c48:	07d2      	lsls	r2, r2, #31
 8082c4a:	bf5c      	itt	pl
 8082c4c:	2201      	movpl	r2, #1
 8082c4e:	601a      	strpl	r2, [r3, #0]
 8082c50:	4b12      	ldr	r3, [pc, #72]	; (8082c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8082c52:	681a      	ldr	r2, [r3, #0]
 8082c54:	07d0      	lsls	r0, r2, #31
 8082c56:	bf5c      	itt	pl
 8082c58:	2201      	movpl	r2, #1
 8082c5a:	601a      	strpl	r2, [r3, #0]
 8082c5c:	4b10      	ldr	r3, [pc, #64]	; (8082ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8082c5e:	681a      	ldr	r2, [r3, #0]
 8082c60:	07d1      	lsls	r1, r2, #31
 8082c62:	bf5c      	itt	pl
 8082c64:	2201      	movpl	r2, #1
 8082c66:	601a      	strpl	r2, [r3, #0]
 8082c68:	4b0e      	ldr	r3, [pc, #56]	; (8082ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082c6a:	681a      	ldr	r2, [r3, #0]
 8082c6c:	07d2      	lsls	r2, r2, #31
 8082c6e:	bf5c      	itt	pl
 8082c70:	2201      	movpl	r2, #1
 8082c72:	601a      	strpl	r2, [r3, #0]
 8082c74:	4770      	bx	lr
 8082c76:	bf00      	nop
 8082c78:	20000f08 	.word	0x20000f08
 8082c7c:	20000f04 	.word	0x20000f04
 8082c80:	20000f00 	.word	0x20000f00
 8082c84:	20000efc 	.word	0x20000efc
 8082c88:	20000ef8 	.word	0x20000ef8
 8082c8c:	20000ef4 	.word	0x20000ef4
 8082c90:	20000ef0 	.word	0x20000ef0
 8082c94:	20000eec 	.word	0x20000eec
 8082c98:	20000ee8 	.word	0x20000ee8
 8082c9c:	20000ee4 	.word	0x20000ee4
 8082ca0:	20000ee0 	.word	0x20000ee0
 8082ca4:	20000edc 	.word	0x20000edc

08082ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082ca8:	4b18      	ldr	r3, [pc, #96]	; (8082d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082caa:	681a      	ldr	r2, [r3, #0]
 8082cac:	07d1      	lsls	r1, r2, #31
 8082cae:	bf5c      	itt	pl
 8082cb0:	2201      	movpl	r2, #1
 8082cb2:	601a      	strpl	r2, [r3, #0]
 8082cb4:	4b16      	ldr	r3, [pc, #88]	; (8082d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082cb6:	681a      	ldr	r2, [r3, #0]
 8082cb8:	07d2      	lsls	r2, r2, #31
 8082cba:	bf5c      	itt	pl
 8082cbc:	2201      	movpl	r2, #1
 8082cbe:	601a      	strpl	r2, [r3, #0]
 8082cc0:	4b14      	ldr	r3, [pc, #80]	; (8082d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082cc2:	681a      	ldr	r2, [r3, #0]
 8082cc4:	07d0      	lsls	r0, r2, #31
 8082cc6:	bf5c      	itt	pl
 8082cc8:	2201      	movpl	r2, #1
 8082cca:	601a      	strpl	r2, [r3, #0]
 8082ccc:	4b12      	ldr	r3, [pc, #72]	; (8082d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082cce:	681a      	ldr	r2, [r3, #0]
 8082cd0:	07d1      	lsls	r1, r2, #31
 8082cd2:	bf5c      	itt	pl
 8082cd4:	2201      	movpl	r2, #1
 8082cd6:	601a      	strpl	r2, [r3, #0]
 8082cd8:	4b10      	ldr	r3, [pc, #64]	; (8082d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082cda:	681a      	ldr	r2, [r3, #0]
 8082cdc:	07d2      	lsls	r2, r2, #31
 8082cde:	bf5c      	itt	pl
 8082ce0:	2201      	movpl	r2, #1
 8082ce2:	601a      	strpl	r2, [r3, #0]
 8082ce4:	4b0e      	ldr	r3, [pc, #56]	; (8082d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082ce6:	681a      	ldr	r2, [r3, #0]
 8082ce8:	07d0      	lsls	r0, r2, #31
 8082cea:	bf5c      	itt	pl
 8082cec:	2201      	movpl	r2, #1
 8082cee:	601a      	strpl	r2, [r3, #0]
 8082cf0:	4b0c      	ldr	r3, [pc, #48]	; (8082d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082cf2:	681a      	ldr	r2, [r3, #0]
 8082cf4:	07d1      	lsls	r1, r2, #31
 8082cf6:	bf5c      	itt	pl
 8082cf8:	2201      	movpl	r2, #1
 8082cfa:	601a      	strpl	r2, [r3, #0]
 8082cfc:	4b0a      	ldr	r3, [pc, #40]	; (8082d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082cfe:	681a      	ldr	r2, [r3, #0]
 8082d00:	07d2      	lsls	r2, r2, #31
 8082d02:	bf5c      	itt	pl
 8082d04:	2201      	movpl	r2, #1
 8082d06:	601a      	strpl	r2, [r3, #0]
 8082d08:	4770      	bx	lr
 8082d0a:	bf00      	nop
 8082d0c:	20000f28 	.word	0x20000f28
 8082d10:	20000f24 	.word	0x20000f24
 8082d14:	20000f20 	.word	0x20000f20
 8082d18:	20000f1c 	.word	0x20000f1c
 8082d1c:	20000f18 	.word	0x20000f18
 8082d20:	20000f14 	.word	0x20000f14
 8082d24:	20000f10 	.word	0x20000f10
 8082d28:	20000f0c 	.word	0x20000f0c

08082d2c <__aeabi_drsub>:
 8082d2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082d30:	e002      	b.n	8082d38 <__adddf3>
 8082d32:	bf00      	nop

08082d34 <__aeabi_dsub>:
 8082d34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082d38 <__adddf3>:
 8082d38:	b530      	push	{r4, r5, lr}
 8082d3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082d3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8082d42:	ea94 0f05 	teq	r4, r5
 8082d46:	bf08      	it	eq
 8082d48:	ea90 0f02 	teqeq	r0, r2
 8082d4c:	bf1f      	itttt	ne
 8082d4e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8082d52:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082d56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082d5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082d5e:	f000 80e2 	beq.w	8082f26 <__adddf3+0x1ee>
 8082d62:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082d66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082d6a:	bfb8      	it	lt
 8082d6c:	426d      	neglt	r5, r5
 8082d6e:	dd0c      	ble.n	8082d8a <__adddf3+0x52>
 8082d70:	442c      	add	r4, r5
 8082d72:	ea80 0202 	eor.w	r2, r0, r2
 8082d76:	ea81 0303 	eor.w	r3, r1, r3
 8082d7a:	ea82 0000 	eor.w	r0, r2, r0
 8082d7e:	ea83 0101 	eor.w	r1, r3, r1
 8082d82:	ea80 0202 	eor.w	r2, r0, r2
 8082d86:	ea81 0303 	eor.w	r3, r1, r3
 8082d8a:	2d36      	cmp	r5, #54	; 0x36
 8082d8c:	bf88      	it	hi
 8082d8e:	bd30      	pophi	{r4, r5, pc}
 8082d90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082d94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082d98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082d9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8082da0:	d002      	beq.n	8082da8 <__adddf3+0x70>
 8082da2:	4240      	negs	r0, r0
 8082da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082da8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082dac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082db0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8082db4:	d002      	beq.n	8082dbc <__adddf3+0x84>
 8082db6:	4252      	negs	r2, r2
 8082db8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082dbc:	ea94 0f05 	teq	r4, r5
 8082dc0:	f000 80a7 	beq.w	8082f12 <__adddf3+0x1da>
 8082dc4:	f1a4 0401 	sub.w	r4, r4, #1
 8082dc8:	f1d5 0e20 	rsbs	lr, r5, #32
 8082dcc:	db0d      	blt.n	8082dea <__adddf3+0xb2>
 8082dce:	fa02 fc0e 	lsl.w	ip, r2, lr
 8082dd2:	fa22 f205 	lsr.w	r2, r2, r5
 8082dd6:	1880      	adds	r0, r0, r2
 8082dd8:	f141 0100 	adc.w	r1, r1, #0
 8082ddc:	fa03 f20e 	lsl.w	r2, r3, lr
 8082de0:	1880      	adds	r0, r0, r2
 8082de2:	fa43 f305 	asr.w	r3, r3, r5
 8082de6:	4159      	adcs	r1, r3
 8082de8:	e00e      	b.n	8082e08 <__adddf3+0xd0>
 8082dea:	f1a5 0520 	sub.w	r5, r5, #32
 8082dee:	f10e 0e20 	add.w	lr, lr, #32
 8082df2:	2a01      	cmp	r2, #1
 8082df4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082df8:	bf28      	it	cs
 8082dfa:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082dfe:	fa43 f305 	asr.w	r3, r3, r5
 8082e02:	18c0      	adds	r0, r0, r3
 8082e04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082e0c:	d507      	bpl.n	8082e1e <__adddf3+0xe6>
 8082e0e:	f04f 0e00 	mov.w	lr, #0
 8082e12:	f1dc 0c00 	rsbs	ip, ip, #0
 8082e16:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082e1a:	eb6e 0101 	sbc.w	r1, lr, r1
 8082e1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8082e22:	d31b      	bcc.n	8082e5c <__adddf3+0x124>
 8082e24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082e28:	d30c      	bcc.n	8082e44 <__adddf3+0x10c>
 8082e2a:	0849      	lsrs	r1, r1, #1
 8082e2c:	ea5f 0030 	movs.w	r0, r0, rrx
 8082e30:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082e34:	f104 0401 	add.w	r4, r4, #1
 8082e38:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082e3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082e40:	f080 809a 	bcs.w	8082f78 <__adddf3+0x240>
 8082e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082e48:	bf08      	it	eq
 8082e4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082e4e:	f150 0000 	adcs.w	r0, r0, #0
 8082e52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082e56:	ea41 0105 	orr.w	r1, r1, r5
 8082e5a:	bd30      	pop	{r4, r5, pc}
 8082e5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082e60:	4140      	adcs	r0, r0
 8082e62:	eb41 0101 	adc.w	r1, r1, r1
 8082e66:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082e6a:	f1a4 0401 	sub.w	r4, r4, #1
 8082e6e:	d1e9      	bne.n	8082e44 <__adddf3+0x10c>
 8082e70:	f091 0f00 	teq	r1, #0
 8082e74:	bf04      	itt	eq
 8082e76:	4601      	moveq	r1, r0
 8082e78:	2000      	moveq	r0, #0
 8082e7a:	fab1 f381 	clz	r3, r1
 8082e7e:	bf08      	it	eq
 8082e80:	3320      	addeq	r3, #32
 8082e82:	f1a3 030b 	sub.w	r3, r3, #11
 8082e86:	f1b3 0220 	subs.w	r2, r3, #32
 8082e8a:	da0c      	bge.n	8082ea6 <__adddf3+0x16e>
 8082e8c:	320c      	adds	r2, #12
 8082e8e:	dd08      	ble.n	8082ea2 <__adddf3+0x16a>
 8082e90:	f102 0c14 	add.w	ip, r2, #20
 8082e94:	f1c2 020c 	rsb	r2, r2, #12
 8082e98:	fa01 f00c 	lsl.w	r0, r1, ip
 8082e9c:	fa21 f102 	lsr.w	r1, r1, r2
 8082ea0:	e00c      	b.n	8082ebc <__adddf3+0x184>
 8082ea2:	f102 0214 	add.w	r2, r2, #20
 8082ea6:	bfd8      	it	le
 8082ea8:	f1c2 0c20 	rsble	ip, r2, #32
 8082eac:	fa01 f102 	lsl.w	r1, r1, r2
 8082eb0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082eb4:	bfdc      	itt	le
 8082eb6:	ea41 010c 	orrle.w	r1, r1, ip
 8082eba:	4090      	lslle	r0, r2
 8082ebc:	1ae4      	subs	r4, r4, r3
 8082ebe:	bfa2      	ittt	ge
 8082ec0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8082ec4:	4329      	orrge	r1, r5
 8082ec6:	bd30      	popge	{r4, r5, pc}
 8082ec8:	ea6f 0404 	mvn.w	r4, r4
 8082ecc:	3c1f      	subs	r4, #31
 8082ece:	da1c      	bge.n	8082f0a <__adddf3+0x1d2>
 8082ed0:	340c      	adds	r4, #12
 8082ed2:	dc0e      	bgt.n	8082ef2 <__adddf3+0x1ba>
 8082ed4:	f104 0414 	add.w	r4, r4, #20
 8082ed8:	f1c4 0220 	rsb	r2, r4, #32
 8082edc:	fa20 f004 	lsr.w	r0, r0, r4
 8082ee0:	fa01 f302 	lsl.w	r3, r1, r2
 8082ee4:	ea40 0003 	orr.w	r0, r0, r3
 8082ee8:	fa21 f304 	lsr.w	r3, r1, r4
 8082eec:	ea45 0103 	orr.w	r1, r5, r3
 8082ef0:	bd30      	pop	{r4, r5, pc}
 8082ef2:	f1c4 040c 	rsb	r4, r4, #12
 8082ef6:	f1c4 0220 	rsb	r2, r4, #32
 8082efa:	fa20 f002 	lsr.w	r0, r0, r2
 8082efe:	fa01 f304 	lsl.w	r3, r1, r4
 8082f02:	ea40 0003 	orr.w	r0, r0, r3
 8082f06:	4629      	mov	r1, r5
 8082f08:	bd30      	pop	{r4, r5, pc}
 8082f0a:	fa21 f004 	lsr.w	r0, r1, r4
 8082f0e:	4629      	mov	r1, r5
 8082f10:	bd30      	pop	{r4, r5, pc}
 8082f12:	f094 0f00 	teq	r4, #0
 8082f16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082f1a:	bf06      	itte	eq
 8082f1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082f20:	3401      	addeq	r4, #1
 8082f22:	3d01      	subne	r5, #1
 8082f24:	e74e      	b.n	8082dc4 <__adddf3+0x8c>
 8082f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082f2a:	bf18      	it	ne
 8082f2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082f30:	d029      	beq.n	8082f86 <__adddf3+0x24e>
 8082f32:	ea94 0f05 	teq	r4, r5
 8082f36:	bf08      	it	eq
 8082f38:	ea90 0f02 	teqeq	r0, r2
 8082f3c:	d005      	beq.n	8082f4a <__adddf3+0x212>
 8082f3e:	ea54 0c00 	orrs.w	ip, r4, r0
 8082f42:	bf04      	itt	eq
 8082f44:	4619      	moveq	r1, r3
 8082f46:	4610      	moveq	r0, r2
 8082f48:	bd30      	pop	{r4, r5, pc}
 8082f4a:	ea91 0f03 	teq	r1, r3
 8082f4e:	bf1e      	ittt	ne
 8082f50:	2100      	movne	r1, #0
 8082f52:	2000      	movne	r0, #0
 8082f54:	bd30      	popne	{r4, r5, pc}
 8082f56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082f5a:	d105      	bne.n	8082f68 <__adddf3+0x230>
 8082f5c:	0040      	lsls	r0, r0, #1
 8082f5e:	4149      	adcs	r1, r1
 8082f60:	bf28      	it	cs
 8082f62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082f66:	bd30      	pop	{r4, r5, pc}
 8082f68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082f6c:	bf3c      	itt	cc
 8082f6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8082f72:	bd30      	popcc	{r4, r5, pc}
 8082f74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082f78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082f7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082f80:	f04f 0000 	mov.w	r0, #0
 8082f84:	bd30      	pop	{r4, r5, pc}
 8082f86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082f8a:	bf1a      	itte	ne
 8082f8c:	4619      	movne	r1, r3
 8082f8e:	4610      	movne	r0, r2
 8082f90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8082f94:	bf1c      	itt	ne
 8082f96:	460b      	movne	r3, r1
 8082f98:	4602      	movne	r2, r0
 8082f9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082f9e:	bf06      	itte	eq
 8082fa0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8082fa4:	ea91 0f03 	teqeq	r1, r3
 8082fa8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082fac:	bd30      	pop	{r4, r5, pc}
 8082fae:	bf00      	nop

08082fb0 <__aeabi_ui2d>:
 8082fb0:	f090 0f00 	teq	r0, #0
 8082fb4:	bf04      	itt	eq
 8082fb6:	2100      	moveq	r1, #0
 8082fb8:	4770      	bxeq	lr
 8082fba:	b530      	push	{r4, r5, lr}
 8082fbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082fc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082fc4:	f04f 0500 	mov.w	r5, #0
 8082fc8:	f04f 0100 	mov.w	r1, #0
 8082fcc:	e750      	b.n	8082e70 <__adddf3+0x138>
 8082fce:	bf00      	nop

08082fd0 <__aeabi_i2d>:
 8082fd0:	f090 0f00 	teq	r0, #0
 8082fd4:	bf04      	itt	eq
 8082fd6:	2100      	moveq	r1, #0
 8082fd8:	4770      	bxeq	lr
 8082fda:	b530      	push	{r4, r5, lr}
 8082fdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082fe0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082fe4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8082fe8:	bf48      	it	mi
 8082fea:	4240      	negmi	r0, r0
 8082fec:	f04f 0100 	mov.w	r1, #0
 8082ff0:	e73e      	b.n	8082e70 <__adddf3+0x138>
 8082ff2:	bf00      	nop

08082ff4 <__aeabi_f2d>:
 8082ff4:	0042      	lsls	r2, r0, #1
 8082ff6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082ffa:	ea4f 0131 	mov.w	r1, r1, rrx
 8082ffe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083002:	bf1f      	itttt	ne
 8083004:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083008:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808300c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083010:	4770      	bxne	lr
 8083012:	f092 0f00 	teq	r2, #0
 8083016:	bf14      	ite	ne
 8083018:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808301c:	4770      	bxeq	lr
 808301e:	b530      	push	{r4, r5, lr}
 8083020:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083028:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808302c:	e720      	b.n	8082e70 <__adddf3+0x138>
 808302e:	bf00      	nop

08083030 <__aeabi_ul2d>:
 8083030:	ea50 0201 	orrs.w	r2, r0, r1
 8083034:	bf08      	it	eq
 8083036:	4770      	bxeq	lr
 8083038:	b530      	push	{r4, r5, lr}
 808303a:	f04f 0500 	mov.w	r5, #0
 808303e:	e00a      	b.n	8083056 <__aeabi_l2d+0x16>

08083040 <__aeabi_l2d>:
 8083040:	ea50 0201 	orrs.w	r2, r0, r1
 8083044:	bf08      	it	eq
 8083046:	4770      	bxeq	lr
 8083048:	b530      	push	{r4, r5, lr}
 808304a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808304e:	d502      	bpl.n	8083056 <__aeabi_l2d+0x16>
 8083050:	4240      	negs	r0, r0
 8083052:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083056:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808305a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808305e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083062:	f43f aedc 	beq.w	8082e1e <__adddf3+0xe6>
 8083066:	f04f 0203 	mov.w	r2, #3
 808306a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808306e:	bf18      	it	ne
 8083070:	3203      	addne	r2, #3
 8083072:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083076:	bf18      	it	ne
 8083078:	3203      	addne	r2, #3
 808307a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808307e:	f1c2 0320 	rsb	r3, r2, #32
 8083082:	fa00 fc03 	lsl.w	ip, r0, r3
 8083086:	fa20 f002 	lsr.w	r0, r0, r2
 808308a:	fa01 fe03 	lsl.w	lr, r1, r3
 808308e:	ea40 000e 	orr.w	r0, r0, lr
 8083092:	fa21 f102 	lsr.w	r1, r1, r2
 8083096:	4414      	add	r4, r2
 8083098:	e6c1      	b.n	8082e1e <__adddf3+0xe6>
 808309a:	bf00      	nop

0808309c <__aeabi_dmul>:
 808309c:	b570      	push	{r4, r5, r6, lr}
 808309e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80830a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80830a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80830aa:	bf1d      	ittte	ne
 80830ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80830b0:	ea94 0f0c 	teqne	r4, ip
 80830b4:	ea95 0f0c 	teqne	r5, ip
 80830b8:	f000 f8de 	bleq	8083278 <__aeabi_dmul+0x1dc>
 80830bc:	442c      	add	r4, r5
 80830be:	ea81 0603 	eor.w	r6, r1, r3
 80830c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80830c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80830ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80830ce:	bf18      	it	ne
 80830d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80830d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80830d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80830dc:	d038      	beq.n	8083150 <__aeabi_dmul+0xb4>
 80830de:	fba0 ce02 	umull	ip, lr, r0, r2
 80830e2:	f04f 0500 	mov.w	r5, #0
 80830e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80830ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80830ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80830f2:	f04f 0600 	mov.w	r6, #0
 80830f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80830fa:	f09c 0f00 	teq	ip, #0
 80830fe:	bf18      	it	ne
 8083100:	f04e 0e01 	orrne.w	lr, lr, #1
 8083104:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083108:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808310c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083110:	d204      	bcs.n	808311c <__aeabi_dmul+0x80>
 8083112:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083116:	416d      	adcs	r5, r5
 8083118:	eb46 0606 	adc.w	r6, r6, r6
 808311c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083120:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083124:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083128:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808312c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083130:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083134:	bf88      	it	hi
 8083136:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808313a:	d81e      	bhi.n	808317a <__aeabi_dmul+0xde>
 808313c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083140:	bf08      	it	eq
 8083142:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083146:	f150 0000 	adcs.w	r0, r0, #0
 808314a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808314e:	bd70      	pop	{r4, r5, r6, pc}
 8083150:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083154:	ea46 0101 	orr.w	r1, r6, r1
 8083158:	ea40 0002 	orr.w	r0, r0, r2
 808315c:	ea81 0103 	eor.w	r1, r1, r3
 8083160:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083164:	bfc2      	ittt	gt
 8083166:	ebd4 050c 	rsbsgt	r5, r4, ip
 808316a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808316e:	bd70      	popgt	{r4, r5, r6, pc}
 8083170:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083174:	f04f 0e00 	mov.w	lr, #0
 8083178:	3c01      	subs	r4, #1
 808317a:	f300 80ab 	bgt.w	80832d4 <__aeabi_dmul+0x238>
 808317e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083182:	bfde      	ittt	le
 8083184:	2000      	movle	r0, #0
 8083186:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808318a:	bd70      	pople	{r4, r5, r6, pc}
 808318c:	f1c4 0400 	rsb	r4, r4, #0
 8083190:	3c20      	subs	r4, #32
 8083192:	da35      	bge.n	8083200 <__aeabi_dmul+0x164>
 8083194:	340c      	adds	r4, #12
 8083196:	dc1b      	bgt.n	80831d0 <__aeabi_dmul+0x134>
 8083198:	f104 0414 	add.w	r4, r4, #20
 808319c:	f1c4 0520 	rsb	r5, r4, #32
 80831a0:	fa00 f305 	lsl.w	r3, r0, r5
 80831a4:	fa20 f004 	lsr.w	r0, r0, r4
 80831a8:	fa01 f205 	lsl.w	r2, r1, r5
 80831ac:	ea40 0002 	orr.w	r0, r0, r2
 80831b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80831b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80831b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80831bc:	fa21 f604 	lsr.w	r6, r1, r4
 80831c0:	eb42 0106 	adc.w	r1, r2, r6
 80831c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80831c8:	bf08      	it	eq
 80831ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80831ce:	bd70      	pop	{r4, r5, r6, pc}
 80831d0:	f1c4 040c 	rsb	r4, r4, #12
 80831d4:	f1c4 0520 	rsb	r5, r4, #32
 80831d8:	fa00 f304 	lsl.w	r3, r0, r4
 80831dc:	fa20 f005 	lsr.w	r0, r0, r5
 80831e0:	fa01 f204 	lsl.w	r2, r1, r4
 80831e4:	ea40 0002 	orr.w	r0, r0, r2
 80831e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80831ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80831f0:	f141 0100 	adc.w	r1, r1, #0
 80831f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80831f8:	bf08      	it	eq
 80831fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80831fe:	bd70      	pop	{r4, r5, r6, pc}
 8083200:	f1c4 0520 	rsb	r5, r4, #32
 8083204:	fa00 f205 	lsl.w	r2, r0, r5
 8083208:	ea4e 0e02 	orr.w	lr, lr, r2
 808320c:	fa20 f304 	lsr.w	r3, r0, r4
 8083210:	fa01 f205 	lsl.w	r2, r1, r5
 8083214:	ea43 0302 	orr.w	r3, r3, r2
 8083218:	fa21 f004 	lsr.w	r0, r1, r4
 808321c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083220:	fa21 f204 	lsr.w	r2, r1, r4
 8083224:	ea20 0002 	bic.w	r0, r0, r2
 8083228:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808322c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083230:	bf08      	it	eq
 8083232:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083236:	bd70      	pop	{r4, r5, r6, pc}
 8083238:	f094 0f00 	teq	r4, #0
 808323c:	d10f      	bne.n	808325e <__aeabi_dmul+0x1c2>
 808323e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083242:	0040      	lsls	r0, r0, #1
 8083244:	eb41 0101 	adc.w	r1, r1, r1
 8083248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808324c:	bf08      	it	eq
 808324e:	3c01      	subeq	r4, #1
 8083250:	d0f7      	beq.n	8083242 <__aeabi_dmul+0x1a6>
 8083252:	ea41 0106 	orr.w	r1, r1, r6
 8083256:	f095 0f00 	teq	r5, #0
 808325a:	bf18      	it	ne
 808325c:	4770      	bxne	lr
 808325e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083262:	0052      	lsls	r2, r2, #1
 8083264:	eb43 0303 	adc.w	r3, r3, r3
 8083268:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808326c:	bf08      	it	eq
 808326e:	3d01      	subeq	r5, #1
 8083270:	d0f7      	beq.n	8083262 <__aeabi_dmul+0x1c6>
 8083272:	ea43 0306 	orr.w	r3, r3, r6
 8083276:	4770      	bx	lr
 8083278:	ea94 0f0c 	teq	r4, ip
 808327c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083280:	bf18      	it	ne
 8083282:	ea95 0f0c 	teqne	r5, ip
 8083286:	d00c      	beq.n	80832a2 <__aeabi_dmul+0x206>
 8083288:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808328c:	bf18      	it	ne
 808328e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083292:	d1d1      	bne.n	8083238 <__aeabi_dmul+0x19c>
 8083294:	ea81 0103 	eor.w	r1, r1, r3
 8083298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808329c:	f04f 0000 	mov.w	r0, #0
 80832a0:	bd70      	pop	{r4, r5, r6, pc}
 80832a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80832a6:	bf06      	itte	eq
 80832a8:	4610      	moveq	r0, r2
 80832aa:	4619      	moveq	r1, r3
 80832ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80832b0:	d019      	beq.n	80832e6 <__aeabi_dmul+0x24a>
 80832b2:	ea94 0f0c 	teq	r4, ip
 80832b6:	d102      	bne.n	80832be <__aeabi_dmul+0x222>
 80832b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80832bc:	d113      	bne.n	80832e6 <__aeabi_dmul+0x24a>
 80832be:	ea95 0f0c 	teq	r5, ip
 80832c2:	d105      	bne.n	80832d0 <__aeabi_dmul+0x234>
 80832c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80832c8:	bf1c      	itt	ne
 80832ca:	4610      	movne	r0, r2
 80832cc:	4619      	movne	r1, r3
 80832ce:	d10a      	bne.n	80832e6 <__aeabi_dmul+0x24a>
 80832d0:	ea81 0103 	eor.w	r1, r1, r3
 80832d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80832d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80832dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80832e0:	f04f 0000 	mov.w	r0, #0
 80832e4:	bd70      	pop	{r4, r5, r6, pc}
 80832e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80832ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80832ee:	bd70      	pop	{r4, r5, r6, pc}

080832f0 <__aeabi_ddiv>:
 80832f0:	b570      	push	{r4, r5, r6, lr}
 80832f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80832f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80832fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80832fe:	bf1d      	ittte	ne
 8083300:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083304:	ea94 0f0c 	teqne	r4, ip
 8083308:	ea95 0f0c 	teqne	r5, ip
 808330c:	f000 f8a7 	bleq	808345e <__aeabi_ddiv+0x16e>
 8083310:	eba4 0405 	sub.w	r4, r4, r5
 8083314:	ea81 0e03 	eor.w	lr, r1, r3
 8083318:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808331c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083320:	f000 8088 	beq.w	8083434 <__aeabi_ddiv+0x144>
 8083324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083328:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808332c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083330:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083334:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083338:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808333c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083340:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083344:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083348:	429d      	cmp	r5, r3
 808334a:	bf08      	it	eq
 808334c:	4296      	cmpeq	r6, r2
 808334e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083352:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083356:	d202      	bcs.n	808335e <__aeabi_ddiv+0x6e>
 8083358:	085b      	lsrs	r3, r3, #1
 808335a:	ea4f 0232 	mov.w	r2, r2, rrx
 808335e:	1ab6      	subs	r6, r6, r2
 8083360:	eb65 0503 	sbc.w	r5, r5, r3
 8083364:	085b      	lsrs	r3, r3, #1
 8083366:	ea4f 0232 	mov.w	r2, r2, rrx
 808336a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808336e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083372:	ebb6 0e02 	subs.w	lr, r6, r2
 8083376:	eb75 0e03 	sbcs.w	lr, r5, r3
 808337a:	bf22      	ittt	cs
 808337c:	1ab6      	subcs	r6, r6, r2
 808337e:	4675      	movcs	r5, lr
 8083380:	ea40 000c 	orrcs.w	r0, r0, ip
 8083384:	085b      	lsrs	r3, r3, #1
 8083386:	ea4f 0232 	mov.w	r2, r2, rrx
 808338a:	ebb6 0e02 	subs.w	lr, r6, r2
 808338e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083392:	bf22      	ittt	cs
 8083394:	1ab6      	subcs	r6, r6, r2
 8083396:	4675      	movcs	r5, lr
 8083398:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808339c:	085b      	lsrs	r3, r3, #1
 808339e:	ea4f 0232 	mov.w	r2, r2, rrx
 80833a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80833a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80833aa:	bf22      	ittt	cs
 80833ac:	1ab6      	subcs	r6, r6, r2
 80833ae:	4675      	movcs	r5, lr
 80833b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80833b4:	085b      	lsrs	r3, r3, #1
 80833b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80833ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80833be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80833c2:	bf22      	ittt	cs
 80833c4:	1ab6      	subcs	r6, r6, r2
 80833c6:	4675      	movcs	r5, lr
 80833c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80833cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80833d0:	d018      	beq.n	8083404 <__aeabi_ddiv+0x114>
 80833d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80833d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80833da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80833de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80833e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80833e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80833ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80833ee:	d1c0      	bne.n	8083372 <__aeabi_ddiv+0x82>
 80833f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80833f4:	d10b      	bne.n	808340e <__aeabi_ddiv+0x11e>
 80833f6:	ea41 0100 	orr.w	r1, r1, r0
 80833fa:	f04f 0000 	mov.w	r0, #0
 80833fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083402:	e7b6      	b.n	8083372 <__aeabi_ddiv+0x82>
 8083404:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083408:	bf04      	itt	eq
 808340a:	4301      	orreq	r1, r0
 808340c:	2000      	moveq	r0, #0
 808340e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083412:	bf88      	it	hi
 8083414:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083418:	f63f aeaf 	bhi.w	808317a <__aeabi_dmul+0xde>
 808341c:	ebb5 0c03 	subs.w	ip, r5, r3
 8083420:	bf04      	itt	eq
 8083422:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083426:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808342a:	f150 0000 	adcs.w	r0, r0, #0
 808342e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083432:	bd70      	pop	{r4, r5, r6, pc}
 8083434:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083438:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808343c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083440:	bfc2      	ittt	gt
 8083442:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808344a:	bd70      	popgt	{r4, r5, r6, pc}
 808344c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083450:	f04f 0e00 	mov.w	lr, #0
 8083454:	3c01      	subs	r4, #1
 8083456:	e690      	b.n	808317a <__aeabi_dmul+0xde>
 8083458:	ea45 0e06 	orr.w	lr, r5, r6
 808345c:	e68d      	b.n	808317a <__aeabi_dmul+0xde>
 808345e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083462:	ea94 0f0c 	teq	r4, ip
 8083466:	bf08      	it	eq
 8083468:	ea95 0f0c 	teqeq	r5, ip
 808346c:	f43f af3b 	beq.w	80832e6 <__aeabi_dmul+0x24a>
 8083470:	ea94 0f0c 	teq	r4, ip
 8083474:	d10a      	bne.n	808348c <__aeabi_ddiv+0x19c>
 8083476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808347a:	f47f af34 	bne.w	80832e6 <__aeabi_dmul+0x24a>
 808347e:	ea95 0f0c 	teq	r5, ip
 8083482:	f47f af25 	bne.w	80832d0 <__aeabi_dmul+0x234>
 8083486:	4610      	mov	r0, r2
 8083488:	4619      	mov	r1, r3
 808348a:	e72c      	b.n	80832e6 <__aeabi_dmul+0x24a>
 808348c:	ea95 0f0c 	teq	r5, ip
 8083490:	d106      	bne.n	80834a0 <__aeabi_ddiv+0x1b0>
 8083492:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083496:	f43f aefd 	beq.w	8083294 <__aeabi_dmul+0x1f8>
 808349a:	4610      	mov	r0, r2
 808349c:	4619      	mov	r1, r3
 808349e:	e722      	b.n	80832e6 <__aeabi_dmul+0x24a>
 80834a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80834a4:	bf18      	it	ne
 80834a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80834aa:	f47f aec5 	bne.w	8083238 <__aeabi_dmul+0x19c>
 80834ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80834b2:	f47f af0d 	bne.w	80832d0 <__aeabi_dmul+0x234>
 80834b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80834ba:	f47f aeeb 	bne.w	8083294 <__aeabi_dmul+0x1f8>
 80834be:	e712      	b.n	80832e6 <__aeabi_dmul+0x24a>

080834c0 <__aeabi_d2f>:
 80834c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80834c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80834c8:	bf24      	itt	cs
 80834ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80834ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80834d2:	d90d      	bls.n	80834f0 <__aeabi_d2f+0x30>
 80834d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80834d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80834dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80834e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80834e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80834e8:	bf08      	it	eq
 80834ea:	f020 0001 	biceq.w	r0, r0, #1
 80834ee:	4770      	bx	lr
 80834f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80834f4:	d121      	bne.n	808353a <__aeabi_d2f+0x7a>
 80834f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80834fa:	bfbc      	itt	lt
 80834fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083500:	4770      	bxlt	lr
 8083502:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083506:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808350a:	f1c2 0218 	rsb	r2, r2, #24
 808350e:	f1c2 0c20 	rsb	ip, r2, #32
 8083512:	fa10 f30c 	lsls.w	r3, r0, ip
 8083516:	fa20 f002 	lsr.w	r0, r0, r2
 808351a:	bf18      	it	ne
 808351c:	f040 0001 	orrne.w	r0, r0, #1
 8083520:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083524:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083528:	fa03 fc0c 	lsl.w	ip, r3, ip
 808352c:	ea40 000c 	orr.w	r0, r0, ip
 8083530:	fa23 f302 	lsr.w	r3, r3, r2
 8083534:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083538:	e7cc      	b.n	80834d4 <__aeabi_d2f+0x14>
 808353a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808353e:	d107      	bne.n	8083550 <__aeabi_d2f+0x90>
 8083540:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083544:	bf1e      	ittt	ne
 8083546:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808354a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808354e:	4770      	bxne	lr
 8083550:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083554:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083558:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808355c:	4770      	bx	lr
 808355e:	bf00      	nop

08083560 <__aeabi_frsub>:
 8083560:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083564:	e002      	b.n	808356c <__addsf3>
 8083566:	bf00      	nop

08083568 <__aeabi_fsub>:
 8083568:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808356c <__addsf3>:
 808356c:	0042      	lsls	r2, r0, #1
 808356e:	bf1f      	itttt	ne
 8083570:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083574:	ea92 0f03 	teqne	r2, r3
 8083578:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808357c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083580:	d06a      	beq.n	8083658 <__addsf3+0xec>
 8083582:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083586:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808358a:	bfc1      	itttt	gt
 808358c:	18d2      	addgt	r2, r2, r3
 808358e:	4041      	eorgt	r1, r0
 8083590:	4048      	eorgt	r0, r1
 8083592:	4041      	eorgt	r1, r0
 8083594:	bfb8      	it	lt
 8083596:	425b      	neglt	r3, r3
 8083598:	2b19      	cmp	r3, #25
 808359a:	bf88      	it	hi
 808359c:	4770      	bxhi	lr
 808359e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80835a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80835a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80835aa:	bf18      	it	ne
 80835ac:	4240      	negne	r0, r0
 80835ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80835b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80835b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80835ba:	bf18      	it	ne
 80835bc:	4249      	negne	r1, r1
 80835be:	ea92 0f03 	teq	r2, r3
 80835c2:	d03f      	beq.n	8083644 <__addsf3+0xd8>
 80835c4:	f1a2 0201 	sub.w	r2, r2, #1
 80835c8:	fa41 fc03 	asr.w	ip, r1, r3
 80835cc:	eb10 000c 	adds.w	r0, r0, ip
 80835d0:	f1c3 0320 	rsb	r3, r3, #32
 80835d4:	fa01 f103 	lsl.w	r1, r1, r3
 80835d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80835dc:	d502      	bpl.n	80835e4 <__addsf3+0x78>
 80835de:	4249      	negs	r1, r1
 80835e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80835e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80835e8:	d313      	bcc.n	8083612 <__addsf3+0xa6>
 80835ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80835ee:	d306      	bcc.n	80835fe <__addsf3+0x92>
 80835f0:	0840      	lsrs	r0, r0, #1
 80835f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80835f6:	f102 0201 	add.w	r2, r2, #1
 80835fa:	2afe      	cmp	r2, #254	; 0xfe
 80835fc:	d251      	bcs.n	80836a2 <__addsf3+0x136>
 80835fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083602:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083606:	bf08      	it	eq
 8083608:	f020 0001 	biceq.w	r0, r0, #1
 808360c:	ea40 0003 	orr.w	r0, r0, r3
 8083610:	4770      	bx	lr
 8083612:	0049      	lsls	r1, r1, #1
 8083614:	eb40 0000 	adc.w	r0, r0, r0
 8083618:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808361c:	f1a2 0201 	sub.w	r2, r2, #1
 8083620:	d1ed      	bne.n	80835fe <__addsf3+0x92>
 8083622:	fab0 fc80 	clz	ip, r0
 8083626:	f1ac 0c08 	sub.w	ip, ip, #8
 808362a:	ebb2 020c 	subs.w	r2, r2, ip
 808362e:	fa00 f00c 	lsl.w	r0, r0, ip
 8083632:	bfaa      	itet	ge
 8083634:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083638:	4252      	neglt	r2, r2
 808363a:	4318      	orrge	r0, r3
 808363c:	bfbc      	itt	lt
 808363e:	40d0      	lsrlt	r0, r2
 8083640:	4318      	orrlt	r0, r3
 8083642:	4770      	bx	lr
 8083644:	f092 0f00 	teq	r2, #0
 8083648:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808364c:	bf06      	itte	eq
 808364e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083652:	3201      	addeq	r2, #1
 8083654:	3b01      	subne	r3, #1
 8083656:	e7b5      	b.n	80835c4 <__addsf3+0x58>
 8083658:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808365c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083660:	bf18      	it	ne
 8083662:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083666:	d021      	beq.n	80836ac <__addsf3+0x140>
 8083668:	ea92 0f03 	teq	r2, r3
 808366c:	d004      	beq.n	8083678 <__addsf3+0x10c>
 808366e:	f092 0f00 	teq	r2, #0
 8083672:	bf08      	it	eq
 8083674:	4608      	moveq	r0, r1
 8083676:	4770      	bx	lr
 8083678:	ea90 0f01 	teq	r0, r1
 808367c:	bf1c      	itt	ne
 808367e:	2000      	movne	r0, #0
 8083680:	4770      	bxne	lr
 8083682:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083686:	d104      	bne.n	8083692 <__addsf3+0x126>
 8083688:	0040      	lsls	r0, r0, #1
 808368a:	bf28      	it	cs
 808368c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083690:	4770      	bx	lr
 8083692:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083696:	bf3c      	itt	cc
 8083698:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808369c:	4770      	bxcc	lr
 808369e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80836a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80836a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80836aa:	4770      	bx	lr
 80836ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80836b0:	bf16      	itet	ne
 80836b2:	4608      	movne	r0, r1
 80836b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80836b8:	4601      	movne	r1, r0
 80836ba:	0242      	lsls	r2, r0, #9
 80836bc:	bf06      	itte	eq
 80836be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80836c2:	ea90 0f01 	teqeq	r0, r1
 80836c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80836ca:	4770      	bx	lr

080836cc <__aeabi_ui2f>:
 80836cc:	f04f 0300 	mov.w	r3, #0
 80836d0:	e004      	b.n	80836dc <__aeabi_i2f+0x8>
 80836d2:	bf00      	nop

080836d4 <__aeabi_i2f>:
 80836d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80836d8:	bf48      	it	mi
 80836da:	4240      	negmi	r0, r0
 80836dc:	ea5f 0c00 	movs.w	ip, r0
 80836e0:	bf08      	it	eq
 80836e2:	4770      	bxeq	lr
 80836e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80836e8:	4601      	mov	r1, r0
 80836ea:	f04f 0000 	mov.w	r0, #0
 80836ee:	e01c      	b.n	808372a <__aeabi_l2f+0x2a>

080836f0 <__aeabi_ul2f>:
 80836f0:	ea50 0201 	orrs.w	r2, r0, r1
 80836f4:	bf08      	it	eq
 80836f6:	4770      	bxeq	lr
 80836f8:	f04f 0300 	mov.w	r3, #0
 80836fc:	e00a      	b.n	8083714 <__aeabi_l2f+0x14>
 80836fe:	bf00      	nop

08083700 <__aeabi_l2f>:
 8083700:	ea50 0201 	orrs.w	r2, r0, r1
 8083704:	bf08      	it	eq
 8083706:	4770      	bxeq	lr
 8083708:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808370c:	d502      	bpl.n	8083714 <__aeabi_l2f+0x14>
 808370e:	4240      	negs	r0, r0
 8083710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083714:	ea5f 0c01 	movs.w	ip, r1
 8083718:	bf02      	ittt	eq
 808371a:	4684      	moveq	ip, r0
 808371c:	4601      	moveq	r1, r0
 808371e:	2000      	moveq	r0, #0
 8083720:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083724:	bf08      	it	eq
 8083726:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808372a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808372e:	fabc f28c 	clz	r2, ip
 8083732:	3a08      	subs	r2, #8
 8083734:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083738:	db10      	blt.n	808375c <__aeabi_l2f+0x5c>
 808373a:	fa01 fc02 	lsl.w	ip, r1, r2
 808373e:	4463      	add	r3, ip
 8083740:	fa00 fc02 	lsl.w	ip, r0, r2
 8083744:	f1c2 0220 	rsb	r2, r2, #32
 8083748:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808374c:	fa20 f202 	lsr.w	r2, r0, r2
 8083750:	eb43 0002 	adc.w	r0, r3, r2
 8083754:	bf08      	it	eq
 8083756:	f020 0001 	biceq.w	r0, r0, #1
 808375a:	4770      	bx	lr
 808375c:	f102 0220 	add.w	r2, r2, #32
 8083760:	fa01 fc02 	lsl.w	ip, r1, r2
 8083764:	f1c2 0220 	rsb	r2, r2, #32
 8083768:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808376c:	fa21 f202 	lsr.w	r2, r1, r2
 8083770:	eb43 0002 	adc.w	r0, r3, r2
 8083774:	bf08      	it	eq
 8083776:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808377a:	4770      	bx	lr

0808377c <__aeabi_fmul>:
 808377c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083780:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083784:	bf1e      	ittt	ne
 8083786:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808378a:	ea92 0f0c 	teqne	r2, ip
 808378e:	ea93 0f0c 	teqne	r3, ip
 8083792:	d06f      	beq.n	8083874 <__aeabi_fmul+0xf8>
 8083794:	441a      	add	r2, r3
 8083796:	ea80 0c01 	eor.w	ip, r0, r1
 808379a:	0240      	lsls	r0, r0, #9
 808379c:	bf18      	it	ne
 808379e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80837a2:	d01e      	beq.n	80837e2 <__aeabi_fmul+0x66>
 80837a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80837a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80837ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80837b0:	fba0 3101 	umull	r3, r1, r0, r1
 80837b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80837b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80837bc:	bf3e      	ittt	cc
 80837be:	0049      	lslcc	r1, r1, #1
 80837c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80837c4:	005b      	lslcc	r3, r3, #1
 80837c6:	ea40 0001 	orr.w	r0, r0, r1
 80837ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80837ce:	2afd      	cmp	r2, #253	; 0xfd
 80837d0:	d81d      	bhi.n	808380e <__aeabi_fmul+0x92>
 80837d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80837d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80837da:	bf08      	it	eq
 80837dc:	f020 0001 	biceq.w	r0, r0, #1
 80837e0:	4770      	bx	lr
 80837e2:	f090 0f00 	teq	r0, #0
 80837e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80837ea:	bf08      	it	eq
 80837ec:	0249      	lsleq	r1, r1, #9
 80837ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80837f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80837f6:	3a7f      	subs	r2, #127	; 0x7f
 80837f8:	bfc2      	ittt	gt
 80837fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80837fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083802:	4770      	bxgt	lr
 8083804:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083808:	f04f 0300 	mov.w	r3, #0
 808380c:	3a01      	subs	r2, #1
 808380e:	dc5d      	bgt.n	80838cc <__aeabi_fmul+0x150>
 8083810:	f112 0f19 	cmn.w	r2, #25
 8083814:	bfdc      	itt	le
 8083816:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808381a:	4770      	bxle	lr
 808381c:	f1c2 0200 	rsb	r2, r2, #0
 8083820:	0041      	lsls	r1, r0, #1
 8083822:	fa21 f102 	lsr.w	r1, r1, r2
 8083826:	f1c2 0220 	rsb	r2, r2, #32
 808382a:	fa00 fc02 	lsl.w	ip, r0, r2
 808382e:	ea5f 0031 	movs.w	r0, r1, rrx
 8083832:	f140 0000 	adc.w	r0, r0, #0
 8083836:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808383a:	bf08      	it	eq
 808383c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083840:	4770      	bx	lr
 8083842:	f092 0f00 	teq	r2, #0
 8083846:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808384a:	bf02      	ittt	eq
 808384c:	0040      	lsleq	r0, r0, #1
 808384e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083852:	3a01      	subeq	r2, #1
 8083854:	d0f9      	beq.n	808384a <__aeabi_fmul+0xce>
 8083856:	ea40 000c 	orr.w	r0, r0, ip
 808385a:	f093 0f00 	teq	r3, #0
 808385e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083862:	bf02      	ittt	eq
 8083864:	0049      	lsleq	r1, r1, #1
 8083866:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808386a:	3b01      	subeq	r3, #1
 808386c:	d0f9      	beq.n	8083862 <__aeabi_fmul+0xe6>
 808386e:	ea41 010c 	orr.w	r1, r1, ip
 8083872:	e78f      	b.n	8083794 <__aeabi_fmul+0x18>
 8083874:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083878:	ea92 0f0c 	teq	r2, ip
 808387c:	bf18      	it	ne
 808387e:	ea93 0f0c 	teqne	r3, ip
 8083882:	d00a      	beq.n	808389a <__aeabi_fmul+0x11e>
 8083884:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083888:	bf18      	it	ne
 808388a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808388e:	d1d8      	bne.n	8083842 <__aeabi_fmul+0xc6>
 8083890:	ea80 0001 	eor.w	r0, r0, r1
 8083894:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083898:	4770      	bx	lr
 808389a:	f090 0f00 	teq	r0, #0
 808389e:	bf17      	itett	ne
 80838a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80838a4:	4608      	moveq	r0, r1
 80838a6:	f091 0f00 	teqne	r1, #0
 80838aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80838ae:	d014      	beq.n	80838da <__aeabi_fmul+0x15e>
 80838b0:	ea92 0f0c 	teq	r2, ip
 80838b4:	d101      	bne.n	80838ba <__aeabi_fmul+0x13e>
 80838b6:	0242      	lsls	r2, r0, #9
 80838b8:	d10f      	bne.n	80838da <__aeabi_fmul+0x15e>
 80838ba:	ea93 0f0c 	teq	r3, ip
 80838be:	d103      	bne.n	80838c8 <__aeabi_fmul+0x14c>
 80838c0:	024b      	lsls	r3, r1, #9
 80838c2:	bf18      	it	ne
 80838c4:	4608      	movne	r0, r1
 80838c6:	d108      	bne.n	80838da <__aeabi_fmul+0x15e>
 80838c8:	ea80 0001 	eor.w	r0, r0, r1
 80838cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80838d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80838d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80838d8:	4770      	bx	lr
 80838da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80838de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80838e2:	4770      	bx	lr

080838e4 <__aeabi_fdiv>:
 80838e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80838e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80838ec:	bf1e      	ittt	ne
 80838ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80838f2:	ea92 0f0c 	teqne	r2, ip
 80838f6:	ea93 0f0c 	teqne	r3, ip
 80838fa:	d069      	beq.n	80839d0 <__aeabi_fdiv+0xec>
 80838fc:	eba2 0203 	sub.w	r2, r2, r3
 8083900:	ea80 0c01 	eor.w	ip, r0, r1
 8083904:	0249      	lsls	r1, r1, #9
 8083906:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808390a:	d037      	beq.n	808397c <__aeabi_fdiv+0x98>
 808390c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083910:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083914:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083918:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808391c:	428b      	cmp	r3, r1
 808391e:	bf38      	it	cc
 8083920:	005b      	lslcc	r3, r3, #1
 8083922:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083926:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808392a:	428b      	cmp	r3, r1
 808392c:	bf24      	itt	cs
 808392e:	1a5b      	subcs	r3, r3, r1
 8083930:	ea40 000c 	orrcs.w	r0, r0, ip
 8083934:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083938:	bf24      	itt	cs
 808393a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808393e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083942:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8083946:	bf24      	itt	cs
 8083948:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808394c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083950:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8083954:	bf24      	itt	cs
 8083956:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808395a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808395e:	011b      	lsls	r3, r3, #4
 8083960:	bf18      	it	ne
 8083962:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8083966:	d1e0      	bne.n	808392a <__aeabi_fdiv+0x46>
 8083968:	2afd      	cmp	r2, #253	; 0xfd
 808396a:	f63f af50 	bhi.w	808380e <__aeabi_fmul+0x92>
 808396e:	428b      	cmp	r3, r1
 8083970:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083974:	bf08      	it	eq
 8083976:	f020 0001 	biceq.w	r0, r0, #1
 808397a:	4770      	bx	lr
 808397c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083980:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083984:	327f      	adds	r2, #127	; 0x7f
 8083986:	bfc2      	ittt	gt
 8083988:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808398c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083990:	4770      	bxgt	lr
 8083992:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083996:	f04f 0300 	mov.w	r3, #0
 808399a:	3a01      	subs	r2, #1
 808399c:	e737      	b.n	808380e <__aeabi_fmul+0x92>
 808399e:	f092 0f00 	teq	r2, #0
 80839a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80839a6:	bf02      	ittt	eq
 80839a8:	0040      	lsleq	r0, r0, #1
 80839aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80839ae:	3a01      	subeq	r2, #1
 80839b0:	d0f9      	beq.n	80839a6 <__aeabi_fdiv+0xc2>
 80839b2:	ea40 000c 	orr.w	r0, r0, ip
 80839b6:	f093 0f00 	teq	r3, #0
 80839ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80839be:	bf02      	ittt	eq
 80839c0:	0049      	lsleq	r1, r1, #1
 80839c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80839c6:	3b01      	subeq	r3, #1
 80839c8:	d0f9      	beq.n	80839be <__aeabi_fdiv+0xda>
 80839ca:	ea41 010c 	orr.w	r1, r1, ip
 80839ce:	e795      	b.n	80838fc <__aeabi_fdiv+0x18>
 80839d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80839d4:	ea92 0f0c 	teq	r2, ip
 80839d8:	d108      	bne.n	80839ec <__aeabi_fdiv+0x108>
 80839da:	0242      	lsls	r2, r0, #9
 80839dc:	f47f af7d 	bne.w	80838da <__aeabi_fmul+0x15e>
 80839e0:	ea93 0f0c 	teq	r3, ip
 80839e4:	f47f af70 	bne.w	80838c8 <__aeabi_fmul+0x14c>
 80839e8:	4608      	mov	r0, r1
 80839ea:	e776      	b.n	80838da <__aeabi_fmul+0x15e>
 80839ec:	ea93 0f0c 	teq	r3, ip
 80839f0:	d104      	bne.n	80839fc <__aeabi_fdiv+0x118>
 80839f2:	024b      	lsls	r3, r1, #9
 80839f4:	f43f af4c 	beq.w	8083890 <__aeabi_fmul+0x114>
 80839f8:	4608      	mov	r0, r1
 80839fa:	e76e      	b.n	80838da <__aeabi_fmul+0x15e>
 80839fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083a00:	bf18      	it	ne
 8083a02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083a06:	d1ca      	bne.n	808399e <__aeabi_fdiv+0xba>
 8083a08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083a0c:	f47f af5c 	bne.w	80838c8 <__aeabi_fmul+0x14c>
 8083a10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083a14:	f47f af3c 	bne.w	8083890 <__aeabi_fmul+0x114>
 8083a18:	e75f      	b.n	80838da <__aeabi_fmul+0x15e>
 8083a1a:	bf00      	nop

08083a1c <__cxa_atexit>:
 8083a1c:	b510      	push	{r4, lr}
 8083a1e:	4c05      	ldr	r4, [pc, #20]	; (8083a34 <__cxa_atexit+0x18>)
 8083a20:	4613      	mov	r3, r2
 8083a22:	b12c      	cbz	r4, 8083a30 <__cxa_atexit+0x14>
 8083a24:	460a      	mov	r2, r1
 8083a26:	4601      	mov	r1, r0
 8083a28:	2002      	movs	r0, #2
 8083a2a:	f3af 8000 	nop.w
 8083a2e:	bd10      	pop	{r4, pc}
 8083a30:	4620      	mov	r0, r4
 8083a32:	bd10      	pop	{r4, pc}
 8083a34:	00000000 	.word	0x00000000

08083a38 <memcmp>:
 8083a38:	b510      	push	{r4, lr}
 8083a3a:	3901      	subs	r1, #1
 8083a3c:	4402      	add	r2, r0
 8083a3e:	4290      	cmp	r0, r2
 8083a40:	d007      	beq.n	8083a52 <memcmp+0x1a>
 8083a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8083a46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8083a4a:	42a3      	cmp	r3, r4
 8083a4c:	d0f7      	beq.n	8083a3e <memcmp+0x6>
 8083a4e:	1b18      	subs	r0, r3, r4
 8083a50:	bd10      	pop	{r4, pc}
 8083a52:	2000      	movs	r0, #0
 8083a54:	bd10      	pop	{r4, pc}

08083a56 <memcpy>:
 8083a56:	b510      	push	{r4, lr}
 8083a58:	1e43      	subs	r3, r0, #1
 8083a5a:	440a      	add	r2, r1
 8083a5c:	4291      	cmp	r1, r2
 8083a5e:	d004      	beq.n	8083a6a <memcpy+0x14>
 8083a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083a68:	e7f8      	b.n	8083a5c <memcpy+0x6>
 8083a6a:	bd10      	pop	{r4, pc}

08083a6c <memset>:
 8083a6c:	4603      	mov	r3, r0
 8083a6e:	4402      	add	r2, r0
 8083a70:	4293      	cmp	r3, r2
 8083a72:	d002      	beq.n	8083a7a <memset+0xe>
 8083a74:	f803 1b01 	strb.w	r1, [r3], #1
 8083a78:	e7fa      	b.n	8083a70 <memset+0x4>
 8083a7a:	4770      	bx	lr

08083a7c <srand>:
 8083a7c:	b538      	push	{r3, r4, r5, lr}
 8083a7e:	4b12      	ldr	r3, [pc, #72]	; (8083ac8 <srand+0x4c>)
 8083a80:	4605      	mov	r5, r0
 8083a82:	681c      	ldr	r4, [r3, #0]
 8083a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083a86:	b9d3      	cbnz	r3, 8083abe <srand+0x42>
 8083a88:	2018      	movs	r0, #24
 8083a8a:	f7fe fa4d 	bl	8081f28 <malloc>
 8083a8e:	f243 330e 	movw	r3, #13070	; 0x330e
 8083a92:	63a0      	str	r0, [r4, #56]	; 0x38
 8083a94:	8003      	strh	r3, [r0, #0]
 8083a96:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083a9a:	8043      	strh	r3, [r0, #2]
 8083a9c:	f241 2334 	movw	r3, #4660	; 0x1234
 8083aa0:	8083      	strh	r3, [r0, #4]
 8083aa2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083aa6:	80c3      	strh	r3, [r0, #6]
 8083aa8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083aac:	8103      	strh	r3, [r0, #8]
 8083aae:	2305      	movs	r3, #5
 8083ab0:	8143      	strh	r3, [r0, #10]
 8083ab2:	230b      	movs	r3, #11
 8083ab4:	8183      	strh	r3, [r0, #12]
 8083ab6:	2201      	movs	r2, #1
 8083ab8:	2300      	movs	r3, #0
 8083aba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083ac0:	2200      	movs	r2, #0
 8083ac2:	611d      	str	r5, [r3, #16]
 8083ac4:	615a      	str	r2, [r3, #20]
 8083ac6:	bd38      	pop	{r3, r4, r5, pc}
 8083ac8:	20000464 	.word	0x20000464

08083acc <strlen>:
 8083acc:	4603      	mov	r3, r0
 8083ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083ad2:	2a00      	cmp	r2, #0
 8083ad4:	d1fb      	bne.n	8083ace <strlen+0x2>
 8083ad6:	1a18      	subs	r0, r3, r0
 8083ad8:	3801      	subs	r0, #1
 8083ada:	4770      	bx	lr

08083adc <dynalib_user>:
 8083adc:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8083aec:	0000 0000                                   ....

08083af0 <_ZTV4File>:
	...
 8083af8:	00cb 0808 00cd 0808 00eb 0808 00e5 0808     ................
 8083b08:	00af 0808 0141 0808 00df 0808 00d9 0808     ....A...........

08083b18 <_ZTV5SdFat>:
	...
 8083b20:	011b 0808 0113 0808 010b 0808 0103 0808     ................
 8083b30:	7954 6570 6120 796e 6320 6168 6172 7463     Type any charact
 8083b40:	7265 7420 206f 7473 7261 0074 3165 742e     er to start.e1.t
 8083b50:	7478 6f00 6570 696e 676e 6520 2e31 7874     xt.opening e1.tx
 8083b60:	2074 6f66 2072 7277 7469 2065 6166 6c69     t for write fail
 8083b70:	6465 2820 2931 5700 6972 6974 676e 7420     ed (1).Writing t
 8083b80:	206f 3165 742e 7478 2e2e 002e 6574 7473     o e1.txt....test
 8083b90:	6e69 2067 2c31 3220 202c 2e33 6600 6c69     ing 1, 2, 3..fil
 8083ba0:	5365 7a69 3a65 2520 0a64 6400 6e6f 2e65     eSize: %d..done.
 8083bb0:	6f00 6570 696e 676e 6520 2e31 7874 2074     .opening e1.txt 
 8083bc0:	6f66 2072 6572 6461 6620 6961 656c 2064     for read failed 
 8083bd0:	3228 0029 3165 742e 7478 6320 6e6f 6574     (2).e1.txt conte
 8083be0:	746e 003a 706f 6e65 6e69 2067 3165 742e     nt:.opening e1.t
 8083bf0:	7478 6620 726f 7720 6972 6574 6620 6961     xt for write fai
 8083c00:	656c 2064 3328 0029 6425 202c 2e25 3230     led (3).%d, %.02
 8083c10:	2e66 2520 302e 6632 0000 0000               f. %.02f....

08083c1c <_ZL6spiPtr>:
 8083c1c:	0e20 2000 0e30 2000 0e40 2000                .. 0.. @.. 

08083c28 <_ZTV5SdSpi>:
	...
 8083c30:	196d 0808 197d 0808 1969 0808 19f9 0808     m...}...i.......
 8083c40:	1a1d 0808 1a0d 0808 1a61 0808 4453 6520     ........a...SD e
 8083c50:	7272 726f 6f43 6564 203a 5830 2c00 5830     rrorCode: 0X.,0X
 8083c60:	6500 7272 726f 203a 4300 6e61 7427 6120     .error: .Can't a
 8083c70:	6363 7365 2073 4453 6320 7261 2e64 4420     ccess SD card. D
 8083c80:	206f 6f6e 2074 6572 6f66 6d72 7461 002e     o not reformat..
 8083c90:	6f4e 6320 7261 2c64 7720 6f72 676e 6320     No card, wrong c
 8083ca0:	6968 2070 6573 656c 7463 7020 6e69 202c     hip select pin, 
 8083cb0:	726f 5320 4950 7020 6f72 6c62 6d65 003f     or SPI problem?.
 8083cc0:	6e49 6176 696c 2064 6f66 6d72 7461 202c     Invalid format, 
 8083cd0:	6572 6f66 6d72 7461 5320 2e44 4300 6e61     reformat SD..Can
 8083ce0:	7427 6f20 6570 206e 6f72 746f 6420 7269     't open root dir
 8083cf0:	6365 6f74 7972 002e 6f4e 6520 7272 726f     ectory..No error
 8083d00:	6620 756f 646e 002e                          found..

08083d08 <_ZTV8SPIClass>:
	...
 8083d10:	1f69 0808 1f6b 0808                         i...k...

08083d18 <_ZL14clock_divisors>:
 8083d18:	0800 1810 2820 3830 6e6c 6600 006e 6f63     .... (08ln.fn.co
 8083d28:	6564 6400 7465 6961 006c 0a0d 2500 3130     de.detail....%01
 8083d38:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
 8083d48:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 8083d58:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 8083d68:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 8083d78:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 8083d88:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 8083d98:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8083da8:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8083db8:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8083dc8:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8083dd8:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8083de8:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8083df8:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
 8083e08:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 8083e18:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 8083e28:	656d 0000                                   me..

08083e2c <_ZTV9IPAddress>:
	...
 8083e34:	2513 0808 2505 0808 2507 0808               .%...%...%..

08083e40 <_ZTV9USBSerial>:
	...
 8083e48:	2579 0808 25bd 0808 2597 0808 20e5 0808     y%...%...%... ..
 8083e58:	2591 0808 257b 0808 2583 0808 25b7 0808     .%..{%...%...%..
 8083e68:	258b 0808 2575 0808                         .%..u%..

08083e70 <_ZTVN5spark13CellularClassE>:
	...
 8083e78:	26f1 0808                                   .&..

08083e7c <_ZTV11USARTSerial>:
	...
 8083e84:	2739 0808 275d 0808 2769 0808 20e5 0808     9'..]'..i'... ..
 8083e94:	2745 0808 2751 0808 274b 0808 2757 0808     E'..Q'..K'..W'..
 8083ea4:	273b 0808 273f 0808                         ;'..?'..

08083eac <_ZTV7TwoWire>:
	...
 8083eb4:	280d 0808 2857 0808 282f 0808 280f 0808     .(..W(../(...(..
 8083ec4:	2837 0808 283f 0808 2847 0808 284f 0808     7(..?(..G(..O(..

08083ed4 <__sf_fake_stdin>:
	...

08083ef4 <__sf_fake_stdout>:
	...

08083f14 <__sf_fake_stderr>:
	...
 8083f34:	0043                                        C.

08083f36 <link_const_variable_data_end>:
	...

08083f38 <link_constructors_location>:
 8083f38:	080803b1 	.word	0x080803b1
 8083f3c:	08080471 	.word	0x08080471
 8083f40:	08080475 	.word	0x08080475
 8083f44:	08080479 	.word	0x08080479
 8083f48:	08080a91 	.word	0x08080a91
 8083f4c:	08080a95 	.word	0x08080a95
 8083f50:	08080a99 	.word	0x08080a99
 8083f54:	08080a9d 	.word	0x08080a9d
 8083f58:	0808113d 	.word	0x0808113d
 8083f5c:	08081161 	.word	0x08081161
 8083f60:	08081165 	.word	0x08081165
 8083f64:	0808147d 	.word	0x0808147d
 8083f68:	08081481 	.word	0x08081481
 8083f6c:	08081485 	.word	0x08081485
 8083f70:	0808194f 	.word	0x0808194f
 8083f74:	08081953 	.word	0x08081953
 8083f78:	08081957 	.word	0x08081957
 8083f7c:	08081aa9 	.word	0x08081aa9
 8083f80:	08081bad 	.word	0x08081bad
 8083f84:	080820a5 	.word	0x080820a5
 8083f88:	0808222d 	.word	0x0808222d
 8083f8c:	0808223d 	.word	0x0808223d
 8083f90:	08082275 	.word	0x08082275
 8083f94:	080826fd 	.word	0x080826fd
 8083f98:	08082985 	.word	0x08082985
 8083f9c:	080829e1 	.word	0x080829e1
 8083fa0:	08082a9d 	.word	0x08082a9d
 8083fa4:	08082b21 	.word	0x08082b21
 8083fa8:	08082be5 	.word	0x08082be5
 8083fac:	08082ca9 	.word	0x08082ca9
